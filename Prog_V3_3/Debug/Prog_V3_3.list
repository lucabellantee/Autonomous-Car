
Prog_V3_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b034  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a4  0800b1d8  0800b1d8  0001b1d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b97c  0800b97c  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  0800b97c  0800b97c  0001b97c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b984  0800b984  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b984  0800b984  0001b984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b988  0800b988  0001b988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800b98c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000218  0800bba0  00020218  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  0800bba0  000204a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001196b  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002492  00000000  00000000  00031baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  00034048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  00035110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018696  00000000  00000000  000360f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013848  00000000  00000000  0004e78e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093054  00000000  00000000  00061fd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f502a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dc8  00000000  00000000  000f507c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b1bc 	.word	0x0800b1bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	0800b1bc 	.word	0x0800b1bc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <Voltage2Duty>:
float DegreeSec2RPM(float speed_degsec){
	float speed_rpm = speed_degsec * 60/360;
	return speed_rpm;
}

float Voltage2Duty(float u){
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	ed87 0a01 	vstr	s0, [r7, #4]

	float duty = 100*u/V_MAX;
 8001012:	edd7 7a01 	vldr	s15, [r7, #4]
 8001016:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800106c <Voltage2Duty+0x64>
 800101a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800101e:	eef1 6a0e 	vmov.f32	s13, #30	; 0x40f00000  7.5
 8001022:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001026:	edc7 7a03 	vstr	s15, [r7, #12]

	if(duty>100){
 800102a:	edd7 7a03 	vldr	s15, [r7, #12]
 800102e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800106c <Voltage2Duty+0x64>
 8001032:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103a:	dd02      	ble.n	8001042 <Voltage2Duty+0x3a>
		duty=100;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <Voltage2Duty+0x68>)
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	e009      	b.n	8001056 <Voltage2Duty+0x4e>
	} else if(duty<0){
 8001042:	edd7 7a03 	vldr	s15, [r7, #12]
 8001046:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800104a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104e:	d502      	bpl.n	8001056 <Voltage2Duty+0x4e>
		duty = 0;
 8001050:	f04f 0300 	mov.w	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
	}

	return duty;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	ee07 3a90 	vmov	s15, r3
}
 800105c:	eeb0 0a67 	vmov.f32	s0, s15
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	42c80000 	.word	0x42c80000
 8001070:	42c80000 	.word	0x42c80000

08001074 <Ref2Direction>:

uint8_t Ref2Direction(float y_ref){
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t dir;

	if(y_ref>=0){
 800107e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001082:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800108a:	db02      	blt.n	8001092 <Ref2Direction+0x1e>
		dir = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	e001      	b.n	8001096 <Ref2Direction+0x22>
	} else {
		dir = 1;
 8001092:	2301      	movs	r3, #1
 8001094:	73fb      	strb	r3, [r7, #15]
	}
	return dir;
 8001096:	7bfb      	ldrb	r3, [r7, #15]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <set_PWM_and_dir>:

void set_PWM_and_dir(uint32_t duty, uint8_t dir){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	70fb      	strb	r3, [r7, #3]

	TIM10->CCR1 = ((float)duty/100)*TIM10->ARR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	ee07 3a90 	vmov	s15, r3
 80010b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ba:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001108 <set_PWM_and_dir+0x64>
 80010be:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010c2:	4b12      	ldr	r3, [pc, #72]	; (800110c <set_PWM_and_dir+0x68>)
 80010c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c6:	ee07 3a90 	vmov	s15, r3
 80010ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <set_PWM_and_dir+0x68>)
 80010d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010d8:	ee17 2a90 	vmov	r2, s15
 80010dc:	635a      	str	r2, [r3, #52]	; 0x34

	if( dir == 0){
 80010de:	78fb      	ldrb	r3, [r7, #3]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d105      	bne.n	80010f0 <set_PWM_and_dir+0x4c>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2101      	movs	r1, #1
 80010e8:	4809      	ldr	r0, [pc, #36]	; (8001110 <set_PWM_and_dir+0x6c>)
 80010ea:	f002 f89f 	bl	800322c <HAL_GPIO_WritePin>
	}else if ( dir == 1){
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
	}
}
 80010ee:	e007      	b.n	8001100 <set_PWM_and_dir+0x5c>
	}else if ( dir == 1){
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d104      	bne.n	8001100 <set_PWM_and_dir+0x5c>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 80010f6:	2201      	movs	r2, #1
 80010f8:	2101      	movs	r1, #1
 80010fa:	4805      	ldr	r0, [pc, #20]	; (8001110 <set_PWM_and_dir+0x6c>)
 80010fc:	f002 f896 	bl	800322c <HAL_GPIO_WritePin>
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	42c80000 	.word	0x42c80000
 800110c:	40014400 	.word	0x40014400
 8001110:	40020800 	.word	0x40020800

08001114 <init_PID>:
#include "PID.h"

//Questa funziona setta i prametri principali
void init_PID(PID* p, float Tc, float u_max, float u_min){
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001120:	edc7 0a01 	vstr	s1, [r7, #4]
 8001124:	ed87 1a00 	vstr	s2, [r7]
	p->Tc = Tc;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	60da      	str	r2, [r3, #12]
	p->u_max = u_max;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	611a      	str	r2, [r3, #16]
	p->u_min = u_min;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	683a      	ldr	r2, [r7, #0]
 8001138:	615a      	str	r2, [r3, #20]
	p->Iterm = 0;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	61da      	str	r2, [r3, #28]
	p->e_old = 0;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	619a      	str	r2, [r3, #24]
}
 800114a:	bf00      	nop
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <tune_PID>:

void tune_PID(PID*p, float Kp, float Ki, float Kd){
 8001156:	b480      	push	{r7}
 8001158:	b085      	sub	sp, #20
 800115a:	af00      	add	r7, sp, #0
 800115c:	60f8      	str	r0, [r7, #12]
 800115e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001162:	edc7 0a01 	vstr	s1, [r7, #4]
 8001166:	ed87 1a00 	vstr	s2, [r7]
	p->Kp = Kp;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	68ba      	ldr	r2, [r7, #8]
 800116e:	601a      	str	r2, [r3, #0]
	p->Ki = Ki;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	605a      	str	r2, [r3, #4]
	p->Kd = Kd;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	609a      	str	r2, [r3, #8]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <PID_controller>:

float PID_controller(PID* p , float y, float r){
 8001188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800118c:	b090      	sub	sp, #64	; 0x40
 800118e:	af06      	add	r7, sp, #24
 8001190:	60f8      	str	r0, [r7, #12]
 8001192:	ed87 0a02 	vstr	s0, [r7, #8]
 8001196:	edc7 0a01 	vstr	s1, [r7, #4]
	//static float e_old=0, Iterm=0;
	float u;
	float newIterm;
	float e = 0;
 800119a:	f04f 0300 	mov.w	r3, #0
 800119e:	623b      	str	r3, [r7, #32]

	e = r-y;
 80011a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80011a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80011a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ac:	edc7 7a08 	vstr	s15, [r7, #32]

	float Pterm = p->Kp*e;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	edd3 7a00 	vldr	s15, [r3]
 80011b6:	ed97 7a08 	vldr	s14, [r7, #32]
 80011ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011be:	edc7 7a07 	vstr	s15, [r7, #28]
	newIterm = p->Iterm + (p->Ki)*p->Tc*p->e_old;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	ed93 7a07 	vldr	s14, [r3, #28]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	edd3 6a01 	vldr	s13, [r3, #4]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80011d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	edd3 7a06 	vldr	s15, [r3, #24]
 80011de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e6:	edc7 7a06 	vstr	s15, [r7, #24]
	float Dterm = (p->Kd/p->Tc)*(e - p->e_old);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	edd3 6a02 	vldr	s13, [r3, #8]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80011f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001200:	edd7 6a08 	vldr	s13, [r7, #32]
 8001204:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800120c:	edc7 7a05 	vstr	s15, [r7, #20]

	p->e_old = e;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6a3a      	ldr	r2, [r7, #32]
 8001214:	619a      	str	r2, [r3, #24]

	u = Pterm + newIterm + Dterm;
 8001216:	ed97 7a07 	vldr	s14, [r7, #28]
 800121a:	edd7 7a06 	vldr	s15, [r7, #24]
 800121e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001222:	ed97 7a05 	vldr	s14, [r7, #20]
 8001226:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	if(u > p->u_max){
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	edd3 7a04 	vldr	s15, [r3, #16]
 8001234:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001238:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800123c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001240:	dd03      	ble.n	800124a <PID_controller+0xc2>
		u = p->u_max; //limite massimo
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
 8001248:	e010      	b.n	800126c <PID_controller+0xe4>
	} else if(u < p->u_min){
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001250:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001254:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125c:	d503      	bpl.n	8001266 <PID_controller+0xde>
		u = p->u_min; //limite minimo
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
 8001264:	e002      	b.n	800126c <PID_controller+0xe4>
	} else {
		p->Iterm = newIterm;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	61da      	str	r2, [r3, #28]
	}

	printf("w: %f, wref: %f, err: %f, u: %f \r\n", y, r, e, u);
 800126c:	68b8      	ldr	r0, [r7, #8]
 800126e:	f7ff f973 	bl	8000558 <__aeabi_f2d>
 8001272:	4682      	mov	sl, r0
 8001274:	468b      	mov	fp, r1
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff f96e 	bl	8000558 <__aeabi_f2d>
 800127c:	4604      	mov	r4, r0
 800127e:	460d      	mov	r5, r1
 8001280:	6a38      	ldr	r0, [r7, #32]
 8001282:	f7ff f969 	bl	8000558 <__aeabi_f2d>
 8001286:	4680      	mov	r8, r0
 8001288:	4689      	mov	r9, r1
 800128a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800128c:	f7ff f964 	bl	8000558 <__aeabi_f2d>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001298:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800129c:	e9cd 4500 	strd	r4, r5, [sp]
 80012a0:	4652      	mov	r2, sl
 80012a2:	465b      	mov	r3, fp
 80012a4:	4812      	ldr	r0, [pc, #72]	; (80012f0 <PID_controller+0x168>)
 80012a6:	f006 f917 	bl	80074d8 <iprintf>
	printf("Pterm %f; NewIterm %f, itermAcc: %f \r\n", Pterm, newIterm, p->Iterm);
 80012aa:	69f8      	ldr	r0, [r7, #28]
 80012ac:	f7ff f954 	bl	8000558 <__aeabi_f2d>
 80012b0:	4680      	mov	r8, r0
 80012b2:	4689      	mov	r9, r1
 80012b4:	69b8      	ldr	r0, [r7, #24]
 80012b6:	f7ff f94f 	bl	8000558 <__aeabi_f2d>
 80012ba:	4604      	mov	r4, r0
 80012bc:	460d      	mov	r5, r1
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f948 	bl	8000558 <__aeabi_f2d>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012d0:	e9cd 4500 	strd	r4, r5, [sp]
 80012d4:	4642      	mov	r2, r8
 80012d6:	464b      	mov	r3, r9
 80012d8:	4806      	ldr	r0, [pc, #24]	; (80012f4 <PID_controller+0x16c>)
 80012da:	f006 f8fd 	bl	80074d8 <iprintf>

	return u;
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	ee07 3a90 	vmov	s15, r3
}
 80012e4:	eeb0 0a67 	vmov.f32	s0, s15
 80012e8:	3728      	adds	r7, #40	; 0x28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80012f0:	0800b1d8 	.word	0x0800b1d8
 80012f4:	0800b1fc 	.word	0x0800b1fc

080012f8 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	4619      	mov	r1, r3
 8001306:	2007      	movs	r0, #7
 8001308:	f000 fa02 	bl	8001710 <bno055_writeData>
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	4619      	mov	r1, r3
 8001322:	203d      	movs	r0, #61	; 0x3d
 8001324:	f000 f9f4 	bl	8001710 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d103      	bne.n	8001336 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 800132e:	2013      	movs	r0, #19
 8001330:	f000 f9e2 	bl	80016f8 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8001334:	e002      	b.n	800133c <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8001336:	2007      	movs	r0, #7
 8001338:	f000 f9de 	bl	80016f8 <bno055_delay>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001348:	2000      	movs	r0, #0
 800134a:	f7ff ffe3 	bl	8001314 <bno055_setOperationMode>
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}

08001352 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8001352:	b580      	push	{r7, lr}
 8001354:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001356:	200c      	movs	r0, #12
 8001358:	f7ff ffdc 	bl	8001314 <bno055_setOperationMode>
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}

08001360 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8001364:	2120      	movs	r1, #32
 8001366:	203f      	movs	r0, #63	; 0x3f
 8001368:	f000 f9d2 	bl	8001710 <bno055_writeData>
  bno055_delay(700);
 800136c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001370:	f000 f9c2 	bl	80016f8 <bno055_delay>
}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}

08001378 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
  bno055_reset();
 800137e:	f7ff ffef 	bl	8001360 <bno055_reset>

  uint8_t id = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8001386:	1dfb      	adds	r3, r7, #7
 8001388:	2201      	movs	r2, #1
 800138a:	4619      	mov	r1, r3
 800138c:	2000      	movs	r0, #0
 800138e:	f000 faab 	bl	80018e8 <bno055_readData>
  if (id != BNO055_ID) {
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	2ba0      	cmp	r3, #160	; 0xa0
 8001396:	d004      	beq.n	80013a2 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	4619      	mov	r1, r3
 800139c:	4809      	ldr	r0, [pc, #36]	; (80013c4 <bno055_setup+0x4c>)
 800139e:	f006 f89b 	bl	80074d8 <iprintf>
  }
  bno055_setPage(0);
 80013a2:	2000      	movs	r0, #0
 80013a4:	f7ff ffa8 	bl	80012f8 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80013a8:	2100      	movs	r1, #0
 80013aa:	203f      	movs	r0, #63	; 0x3f
 80013ac:	f000 f9b0 	bl	8001710 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80013b0:	f7ff ffc8 	bl	8001344 <bno055_setOperationModeConfig>
  bno055_delay(10);
 80013b4:	200a      	movs	r0, #10
 80013b6:	f000 f99f 	bl	80016f8 <bno055_delay>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	0800b224 	.word	0x0800b224

080013c8 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 80013c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013cc:	b09e      	sub	sp, #120	; 0x78
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 80013d6:	2000      	movs	r0, #0
 80013d8:	f7ff ff8e 	bl	80012f8 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 80013dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013e0:	2b20      	cmp	r3, #32
 80013e2:	d108      	bne.n	80013f6 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 80013e4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80013e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013ec:	2208      	movs	r2, #8
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 fa7a 	bl	80018e8 <bno055_readData>
 80013f4:	e007      	b.n	8001406 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 80013f6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80013fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013fe:	2206      	movs	r2, #6
 8001400:	4618      	mov	r0, r3
 8001402:	f000 fa71 	bl	80018e8 <bno055_readData>

  double scale = 1;
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	4b8b      	ldr	r3, [pc, #556]	; (8001638 <bno055_getVector+0x270>)
 800140c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001414:	2b0e      	cmp	r3, #14
 8001416:	d109      	bne.n	800142c <bno055_getVector+0x64>
    scale = magScale;
 8001418:	4b88      	ldr	r3, [pc, #544]	; (800163c <bno055_getVector+0x274>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f879 	bl	8000514 <__aeabi_ui2d>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800142a:	e03e      	b.n	80014aa <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 800142c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001430:	2b08      	cmp	r3, #8
 8001432:	d007      	beq.n	8001444 <bno055_getVector+0x7c>
 8001434:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001438:	2b28      	cmp	r3, #40	; 0x28
 800143a:	d003      	beq.n	8001444 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 800143c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001440:	2b2e      	cmp	r3, #46	; 0x2e
 8001442:	d109      	bne.n	8001458 <bno055_getVector+0x90>
    scale = accelScale;
 8001444:	4b7e      	ldr	r3, [pc, #504]	; (8001640 <bno055_getVector+0x278>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f863 	bl	8000514 <__aeabi_ui2d>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001456:	e028      	b.n	80014aa <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800145c:	2b14      	cmp	r3, #20
 800145e:	d109      	bne.n	8001474 <bno055_getVector+0xac>
    scale = angularRateScale;
 8001460:	4b78      	ldr	r3, [pc, #480]	; (8001644 <bno055_getVector+0x27c>)
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff f855 	bl	8000514 <__aeabi_ui2d>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001472:	e01a      	b.n	80014aa <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8001474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001478:	2b1a      	cmp	r3, #26
 800147a:	d109      	bne.n	8001490 <bno055_getVector+0xc8>
    scale = eulerScale;
 800147c:	4b72      	ldr	r3, [pc, #456]	; (8001648 <bno055_getVector+0x280>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff f847 	bl	8000514 <__aeabi_ui2d>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800148e:	e00c      	b.n	80014aa <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8001490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001494:	2b20      	cmp	r3, #32
 8001496:	d108      	bne.n	80014aa <bno055_getVector+0xe2>
    scale = quaScale;
 8001498:	4b6c      	ldr	r3, [pc, #432]	; (800164c <bno055_getVector+0x284>)
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f839 	bl	8000514 <__aeabi_ui2d>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 80014aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ae:	2220      	movs	r2, #32
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f005 f98e 	bl	80067d4 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 80014b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014bc:	2b20      	cmp	r3, #32
 80014be:	d150      	bne.n	8001562 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80014c0:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80014cc:	b21b      	sxth	r3, r3
 80014ce:	4313      	orrs	r3, r2
 80014d0:	b21b      	sxth	r3, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff f82e 	bl	8000534 <__aeabi_i2d>
 80014d8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80014dc:	f7ff f9be 	bl	800085c <__aeabi_ddiv>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80014e8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80014ec:	021b      	lsls	r3, r3, #8
 80014ee:	b21a      	sxth	r2, r3
 80014f0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	4313      	orrs	r3, r2
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f81a 	bl	8000534 <__aeabi_i2d>
 8001500:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001504:	f7ff f9aa 	bl	800085c <__aeabi_ddiv>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001510:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001514:	021b      	lsls	r3, r3, #8
 8001516:	b21a      	sxth	r2, r3
 8001518:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800151c:	b21b      	sxth	r3, r3
 800151e:	4313      	orrs	r3, r2
 8001520:	b21b      	sxth	r3, r3
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f806 	bl	8000534 <__aeabi_i2d>
 8001528:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800152c:	f7ff f996 	bl	800085c <__aeabi_ddiv>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001538:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800153c:	021b      	lsls	r3, r3, #8
 800153e:	b21a      	sxth	r2, r3
 8001540:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001544:	b21b      	sxth	r3, r3
 8001546:	4313      	orrs	r3, r2
 8001548:	b21b      	sxth	r3, r3
 800154a:	4618      	mov	r0, r3
 800154c:	f7fe fff2 	bl	8000534 <__aeabi_i2d>
 8001550:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001554:	f7ff f982 	bl	800085c <__aeabi_ddiv>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001560:	e03b      	b.n	80015da <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001562:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b21a      	sxth	r2, r3
 800156a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800156e:	b21b      	sxth	r3, r3
 8001570:	4313      	orrs	r3, r2
 8001572:	b21b      	sxth	r3, r3
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe ffdd 	bl	8000534 <__aeabi_i2d>
 800157a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800157e:	f7ff f96d 	bl	800085c <__aeabi_ddiv>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800158a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	b21a      	sxth	r2, r3
 8001592:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001596:	b21b      	sxth	r3, r3
 8001598:	4313      	orrs	r3, r2
 800159a:	b21b      	sxth	r3, r3
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe ffc9 	bl	8000534 <__aeabi_i2d>
 80015a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80015a6:	f7ff f959 	bl	800085c <__aeabi_ddiv>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80015b2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80015b6:	021b      	lsls	r3, r3, #8
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80015be:	b21b      	sxth	r3, r3
 80015c0:	4313      	orrs	r3, r2
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe ffb5 	bl	8000534 <__aeabi_i2d>
 80015ca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80015ce:	f7ff f945 	bl	800085c <__aeabi_ddiv>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 80015da:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80015de:	f107 0528 	add.w	r5, r7, #40	; 0x28
 80015e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80015ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80015ee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80015f2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80015f6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80015fa:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80015fe:	ec49 8b14 	vmov	d4, r8, r9
 8001602:	ec45 4b15 	vmov	d5, r4, r5
 8001606:	ec41 0b16 	vmov	d6, r0, r1
 800160a:	ec43 2b17 	vmov	d7, r2, r3
}
 800160e:	eeb0 0a44 	vmov.f32	s0, s8
 8001612:	eef0 0a64 	vmov.f32	s1, s9
 8001616:	eeb0 1a45 	vmov.f32	s2, s10
 800161a:	eef0 1a65 	vmov.f32	s3, s11
 800161e:	eeb0 2a46 	vmov.f32	s4, s12
 8001622:	eef0 2a66 	vmov.f32	s5, s13
 8001626:	eeb0 3a47 	vmov.f32	s6, s14
 800162a:	eef0 3a67 	vmov.f32	s7, s15
 800162e:	3778      	adds	r7, #120	; 0x78
 8001630:	46bd      	mov	sp, r7
 8001632:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001636:	bf00      	nop
 8001638:	3ff00000 	.word	0x3ff00000
 800163c:	20000006 	.word	0x20000006
 8001640:	20000000 	.word	0x20000000
 8001644:	20000002 	.word	0x20000002
 8001648:	20000004 	.word	0x20000004
 800164c:	20000008 	.word	0x20000008

08001650 <bno055_getVectorGyroscope>:
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
}
bno055_vector_t bno055_getVectorMagnetometer() {
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
 8001650:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001654:	b090      	sub	sp, #64	; 0x40
 8001656:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 8001658:	2014      	movs	r0, #20
 800165a:	f7ff feb5 	bl	80013c8 <bno055_getVector>
 800165e:	eeb0 4a40 	vmov.f32	s8, s0
 8001662:	eef0 4a60 	vmov.f32	s9, s1
 8001666:	eeb0 5a41 	vmov.f32	s10, s2
 800166a:	eef0 5a61 	vmov.f32	s11, s3
 800166e:	eeb0 6a42 	vmov.f32	s12, s4
 8001672:	eef0 6a62 	vmov.f32	s13, s5
 8001676:	eeb0 7a43 	vmov.f32	s14, s6
 800167a:	eef0 7a63 	vmov.f32	s15, s7
 800167e:	ed87 4b08 	vstr	d4, [r7, #32]
 8001682:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001686:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 800168a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 800168e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001692:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001696:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800169a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800169e:	ec49 8b14 	vmov	d4, r8, r9
 80016a2:	ec45 4b15 	vmov	d5, r4, r5
 80016a6:	ec41 0b16 	vmov	d6, r0, r1
 80016aa:	ec43 2b17 	vmov	d7, r2, r3
}
 80016ae:	eeb0 0a44 	vmov.f32	s0, s8
 80016b2:	eef0 0a64 	vmov.f32	s1, s9
 80016b6:	eeb0 1a45 	vmov.f32	s2, s10
 80016ba:	eef0 1a65 	vmov.f32	s3, s11
 80016be:	eeb0 2a46 	vmov.f32	s4, s12
 80016c2:	eef0 2a66 	vmov.f32	s5, s13
 80016c6:	eeb0 3a47 	vmov.f32	s6, s14
 80016ca:	eef0 3a67 	vmov.f32	s7, s15
 80016ce:	3740      	adds	r7, #64	; 0x40
 80016d0:	46bd      	mov	sp, r7
 80016d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080016d8 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 80016e0:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <bno055_assignI2C+0x1c>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6013      	str	r3, [r2, #0]
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	20000234 	.word	0x20000234

080016f8 <bno055_delay>:

void bno055_delay(int time) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4618      	mov	r0, r3
 8001704:	f001 fad8 	bl	8002cb8 <HAL_Delay>
#endif
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af02      	add	r7, sp, #8
 8001716:	4603      	mov	r3, r0
 8001718:	460a      	mov	r2, r1
 800171a:	71fb      	strb	r3, [r7, #7]
 800171c:	4613      	mov	r3, r2
 800171e:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	733b      	strb	r3, [r7, #12]
 8001724:	79bb      	ldrb	r3, [r7, #6]
 8001726:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001728:	4b5a      	ldr	r3, [pc, #360]	; (8001894 <bno055_writeData+0x184>)
 800172a:	6818      	ldr	r0, [r3, #0]
 800172c:	f107 020c 	add.w	r2, r7, #12
 8001730:	230a      	movs	r3, #10
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	2302      	movs	r3, #2
 8001736:	2150      	movs	r1, #80	; 0x50
 8001738:	f001 fed6 	bl	80034e8 <HAL_I2C_Master_Transmit>
 800173c:	4603      	mov	r3, r0
 800173e:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8001740:	7dfb      	ldrb	r3, [r7, #23]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 80a0 	beq.w	8001888 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8001748:	7dfb      	ldrb	r3, [r7, #23]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d103      	bne.n	8001756 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 800174e:	4852      	ldr	r0, [pc, #328]	; (8001898 <bno055_writeData+0x188>)
 8001750:	f005 ff48 	bl	80075e4 <puts>
 8001754:	e012      	b.n	800177c <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001756:	7dfb      	ldrb	r3, [r7, #23]
 8001758:	2b03      	cmp	r3, #3
 800175a:	d103      	bne.n	8001764 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 800175c:	484f      	ldr	r0, [pc, #316]	; (800189c <bno055_writeData+0x18c>)
 800175e:	f005 ff41 	bl	80075e4 <puts>
 8001762:	e00b      	b.n	800177c <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001764:	7dfb      	ldrb	r3, [r7, #23]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d103      	bne.n	8001772 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 800176a:	484d      	ldr	r0, [pc, #308]	; (80018a0 <bno055_writeData+0x190>)
 800176c:	f005 ff3a 	bl	80075e4 <puts>
 8001770:	e004      	b.n	800177c <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001772:	7dfb      	ldrb	r3, [r7, #23]
 8001774:	4619      	mov	r1, r3
 8001776:	484b      	ldr	r0, [pc, #300]	; (80018a4 <bno055_writeData+0x194>)
 8001778:	f005 feae 	bl	80074d8 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 800177c:	4b45      	ldr	r3, [pc, #276]	; (8001894 <bno055_writeData+0x184>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f002 fb11 	bl	8003da8 <HAL_I2C_GetError>
 8001786:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d07e      	beq.n	800188c <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d103      	bne.n	800179c <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001794:	4844      	ldr	r0, [pc, #272]	; (80018a8 <bno055_writeData+0x198>)
 8001796:	f005 ff25 	bl	80075e4 <puts>
 800179a:	e021      	b.n	80017e0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d103      	bne.n	80017aa <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 80017a2:	4842      	ldr	r0, [pc, #264]	; (80018ac <bno055_writeData+0x19c>)
 80017a4:	f005 ff1e 	bl	80075e4 <puts>
 80017a8:	e01a      	b.n	80017e0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d103      	bne.n	80017b8 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 80017b0:	483f      	ldr	r0, [pc, #252]	; (80018b0 <bno055_writeData+0x1a0>)
 80017b2:	f005 ff17 	bl	80075e4 <puts>
 80017b6:	e013      	b.n	80017e0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	2b08      	cmp	r3, #8
 80017bc:	d103      	bne.n	80017c6 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 80017be:	483d      	ldr	r0, [pc, #244]	; (80018b4 <bno055_writeData+0x1a4>)
 80017c0:	f005 ff10 	bl	80075e4 <puts>
 80017c4:	e00c      	b.n	80017e0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	2b10      	cmp	r3, #16
 80017ca:	d103      	bne.n	80017d4 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 80017cc:	483a      	ldr	r0, [pc, #232]	; (80018b8 <bno055_writeData+0x1a8>)
 80017ce:	f005 ff09 	bl	80075e4 <puts>
 80017d2:	e005      	b.n	80017e0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	2b20      	cmp	r3, #32
 80017d8:	d102      	bne.n	80017e0 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 80017da:	4838      	ldr	r0, [pc, #224]	; (80018bc <bno055_writeData+0x1ac>)
 80017dc:	f005 ff02 	bl	80075e4 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 80017e0:	4b2c      	ldr	r3, [pc, #176]	; (8001894 <bno055_writeData+0x184>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f002 fad1 	bl	8003d8c <HAL_I2C_GetState>
 80017ea:	4603      	mov	r3, r0
 80017ec:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d103      	bne.n	80017fc <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 80017f4:	4832      	ldr	r0, [pc, #200]	; (80018c0 <bno055_writeData+0x1b0>)
 80017f6:	f005 fef5 	bl	80075e4 <puts>
 80017fa:	e048      	b.n	800188e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	2b20      	cmp	r3, #32
 8001800:	d103      	bne.n	800180a <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001802:	482f      	ldr	r0, [pc, #188]	; (80018c0 <bno055_writeData+0x1b0>)
 8001804:	f005 feee 	bl	80075e4 <puts>
 8001808:	e041      	b.n	800188e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	2b24      	cmp	r3, #36	; 0x24
 800180e:	d103      	bne.n	8001818 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001810:	482c      	ldr	r0, [pc, #176]	; (80018c4 <bno055_writeData+0x1b4>)
 8001812:	f005 fee7 	bl	80075e4 <puts>
 8001816:	e03a      	b.n	800188e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	2b21      	cmp	r3, #33	; 0x21
 800181c:	d103      	bne.n	8001826 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 800181e:	482a      	ldr	r0, [pc, #168]	; (80018c8 <bno055_writeData+0x1b8>)
 8001820:	f005 fee0 	bl	80075e4 <puts>
 8001824:	e033      	b.n	800188e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8001826:	7bfb      	ldrb	r3, [r7, #15]
 8001828:	2b22      	cmp	r3, #34	; 0x22
 800182a:	d103      	bne.n	8001834 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 800182c:	4827      	ldr	r0, [pc, #156]	; (80018cc <bno055_writeData+0x1bc>)
 800182e:	f005 fed9 	bl	80075e4 <puts>
 8001832:	e02c      	b.n	800188e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001834:	7bfb      	ldrb	r3, [r7, #15]
 8001836:	2b28      	cmp	r3, #40	; 0x28
 8001838:	d103      	bne.n	8001842 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 800183a:	4825      	ldr	r0, [pc, #148]	; (80018d0 <bno055_writeData+0x1c0>)
 800183c:	f005 fed2 	bl	80075e4 <puts>
 8001840:	e025      	b.n	800188e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	2b29      	cmp	r3, #41	; 0x29
 8001846:	d103      	bne.n	8001850 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001848:	4822      	ldr	r0, [pc, #136]	; (80018d4 <bno055_writeData+0x1c4>)
 800184a:	f005 fecb 	bl	80075e4 <puts>
 800184e:	e01e      	b.n	800188e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	2b2a      	cmp	r3, #42	; 0x2a
 8001854:	d103      	bne.n	800185e <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001856:	4820      	ldr	r0, [pc, #128]	; (80018d8 <bno055_writeData+0x1c8>)
 8001858:	f005 fec4 	bl	80075e4 <puts>
 800185c:	e017      	b.n	800188e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	2b60      	cmp	r3, #96	; 0x60
 8001862:	d103      	bne.n	800186c <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001864:	481d      	ldr	r0, [pc, #116]	; (80018dc <bno055_writeData+0x1cc>)
 8001866:	f005 febd 	bl	80075e4 <puts>
 800186a:	e010      	b.n	800188e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 800186c:	7bfb      	ldrb	r3, [r7, #15]
 800186e:	2ba0      	cmp	r3, #160	; 0xa0
 8001870:	d103      	bne.n	800187a <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001872:	481b      	ldr	r0, [pc, #108]	; (80018e0 <bno055_writeData+0x1d0>)
 8001874:	f005 feb6 	bl	80075e4 <puts>
 8001878:	e009      	b.n	800188e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	2be0      	cmp	r3, #224	; 0xe0
 800187e:	d106      	bne.n	800188e <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001880:	4818      	ldr	r0, [pc, #96]	; (80018e4 <bno055_writeData+0x1d4>)
 8001882:	f005 feaf 	bl	80075e4 <puts>
 8001886:	e002      	b.n	800188e <bno055_writeData+0x17e>
    return;
 8001888:	bf00      	nop
 800188a:	e000      	b.n	800188e <bno055_writeData+0x17e>
    return;
 800188c:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000234 	.word	0x20000234
 8001898:	0800b260 	.word	0x0800b260
 800189c:	0800b284 	.word	0x0800b284
 80018a0:	0800b2ac 	.word	0x0800b2ac
 80018a4:	0800b2d0 	.word	0x0800b2d0
 80018a8:	0800b2e8 	.word	0x0800b2e8
 80018ac:	0800b2fc 	.word	0x0800b2fc
 80018b0:	0800b310 	.word	0x0800b310
 80018b4:	0800b324 	.word	0x0800b324
 80018b8:	0800b338 	.word	0x0800b338
 80018bc:	0800b34c 	.word	0x0800b34c
 80018c0:	0800b364 	.word	0x0800b364
 80018c4:	0800b37c 	.word	0x0800b37c
 80018c8:	0800b390 	.word	0x0800b390
 80018cc:	0800b3a8 	.word	0x0800b3a8
 80018d0:	0800b3c0 	.word	0x0800b3c0
 80018d4:	0800b3d8 	.word	0x0800b3d8
 80018d8:	0800b3f8 	.word	0x0800b3f8
 80018dc:	0800b418 	.word	0x0800b418
 80018e0:	0800b430 	.word	0x0800b430
 80018e4:	0800b448 	.word	0x0800b448

080018e8 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af02      	add	r7, sp, #8
 80018ee:	4603      	mov	r3, r0
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	71fb      	strb	r3, [r7, #7]
 80018f4:	4613      	mov	r3, r2
 80018f6:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 80018f8:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <bno055_readData+0x48>)
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	1dfa      	adds	r2, r7, #7
 80018fe:	2364      	movs	r3, #100	; 0x64
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	2301      	movs	r3, #1
 8001904:	2150      	movs	r1, #80	; 0x50
 8001906:	f001 fdef 	bl	80034e8 <HAL_I2C_Master_Transmit>
 800190a:	4603      	mov	r3, r0
 800190c:	73fb      	strb	r3, [r7, #15]
                          100);
  ret = HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <bno055_readData+0x48>)
 8001910:	6818      	ldr	r0, [r3, #0]
 8001912:	79bb      	ldrb	r3, [r7, #6]
 8001914:	b29b      	uxth	r3, r3
 8001916:	2264      	movs	r2, #100	; 0x64
 8001918:	9200      	str	r2, [sp, #0]
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	2150      	movs	r1, #80	; 0x50
 800191e:	f001 fee1 	bl	80036e4 <HAL_I2C_Master_Receive>
 8001922:	4603      	mov	r3, r0
 8001924:	73fb      	strb	r3, [r7, #15]
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001926:	bf00      	nop
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000234 	.word	0x20000234
 8001934:	00000000 	.word	0x00000000

08001938 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800193c:	b09e      	sub	sp, #120	; 0x78
 800193e:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001940:	f001 f948 	bl	8002bd4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001944:	f000 faea 	bl	8001f1c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001948:	f000 fd14 	bl	8002374 <MX_GPIO_Init>
	MX_I2C1_Init();
 800194c:	f000 fb52 	bl	8001ff4 <MX_I2C1_Init>
	MX_TIM1_Init();
 8001950:	f000 fb7e 	bl	8002050 <MX_TIM1_Init>
	MX_TIM10_Init();
 8001954:	f000 fc72 	bl	800223c <MX_TIM10_Init>
	MX_TIM11_Init();
 8001958:	f000 fcbe 	bl	80022d8 <MX_TIM11_Init>
	MX_USART2_UART_Init();
 800195c:	f000 fce0 	bl	8002320 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8001960:	f000 fc18 	bl	8002194 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	//MOTORE-SERVO
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001964:	2100      	movs	r1, #0
 8001966:	48c0      	ldr	r0, [pc, #768]	; (8001c68 <main+0x330>)
 8001968:	f003 fafc 	bl	8004f64 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 800196c:	2100      	movs	r1, #0
 800196e:	48bf      	ldr	r0, [pc, #764]	; (8001c6c <main+0x334>)
 8001970:	f003 faf8 	bl	8004f64 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001974:	213c      	movs	r1, #60	; 0x3c
 8001976:	48be      	ldr	r0, [pc, #760]	; (8001c70 <main+0x338>)
 8001978:	f003 fc4a 	bl	8005210 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 800197c:	48bd      	ldr	r0, [pc, #756]	; (8001c74 <main+0x33c>)
 800197e:	f003 fa35 	bl	8004dec <HAL_TIM_Base_Start_IT>
	init_PID(&pid, dt, MAX_V_ENCODER, -MAX_V_ENCODER);
 8001982:	4bbd      	ldr	r3, [pc, #756]	; (8001c78 <main+0x340>)
 8001984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001988:	4610      	mov	r0, r2
 800198a:	4619      	mov	r1, r3
 800198c:	f7ff f934 	bl	8000bf8 <__aeabi_d2f>
 8001990:	4603      	mov	r3, r0
 8001992:	ed9f 1aba 	vldr	s2, [pc, #744]	; 8001c7c <main+0x344>
 8001996:	eddf 0aba 	vldr	s1, [pc, #744]	; 8001c80 <main+0x348>
 800199a:	ee00 3a10 	vmov	s0, r3
 800199e:	48b9      	ldr	r0, [pc, #740]	; (8001c84 <main+0x34c>)
 80019a0:	f7ff fbb8 	bl	8001114 <init_PID>
	tune_PID(&pid, 0.001, 0.0018, 0);
 80019a4:	ed9f 1ab8 	vldr	s2, [pc, #736]	; 8001c88 <main+0x350>
 80019a8:	eddf 0ab8 	vldr	s1, [pc, #736]	; 8001c8c <main+0x354>
 80019ac:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 8001c90 <main+0x358>
 80019b0:	48b4      	ldr	r0, [pc, #720]	; (8001c84 <main+0x34c>)
 80019b2:	f7ff fbd0 	bl	8001156 <tune_PID>

	init_PID(&pid_servo, dt_servo, MAX_ANGOLO, MIN_ANGOLO);
 80019b6:	4bb7      	ldr	r3, [pc, #732]	; (8001c94 <main+0x35c>)
 80019b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019bc:	4610      	mov	r0, r2
 80019be:	4619      	mov	r1, r3
 80019c0:	f7ff f91a 	bl	8000bf8 <__aeabi_d2f>
 80019c4:	4603      	mov	r3, r0
 80019c6:	eebb 1a07 	vmov.f32	s2, #183	; 0xc1b80000 -23.0
 80019ca:	eef3 0a07 	vmov.f32	s1, #55	; 0x41b80000  23.0
 80019ce:	ee00 3a10 	vmov	s0, r3
 80019d2:	48b1      	ldr	r0, [pc, #708]	; (8001c98 <main+0x360>)
 80019d4:	f7ff fb9e 	bl	8001114 <init_PID>
	tune_PID(&pid_servo, 1.25, 250, 0); //11.25, 2250, 0  //0.035, 0.09, 0 //0.4, 0.7, 0
 80019d8:	ed9f 1aab 	vldr	s2, [pc, #684]	; 8001c88 <main+0x350>
 80019dc:	eddf 0aaf 	vldr	s1, [pc, #700]	; 8001c9c <main+0x364>
 80019e0:	eeb7 0a04 	vmov.f32	s0, #116	; 0x3fa00000  1.250
 80019e4:	48ac      	ldr	r0, [pc, #688]	; (8001c98 <main+0x360>)
 80019e6:	f7ff fbb6 	bl	8001156 <tune_PID>
											//0.035, 0.015, 0
	//IMU
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, BNO055_I2C_ADDR << 1,
 80019ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ee:	2205      	movs	r2, #5
 80019f0:	2150      	movs	r1, #80	; 0x50
 80019f2:	48ab      	ldr	r0, [pc, #684]	; (8001ca0 <main+0x368>)
 80019f4:	f002 f89c 	bl	8003b30 <HAL_I2C_IsDeviceReady>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			5, 1000);
	bno055_assignI2C(&hi2c1);
 80019fe:	48a8      	ldr	r0, [pc, #672]	; (8001ca0 <main+0x368>)
 8001a00:	f7ff fe6a 	bl	80016d8 <bno055_assignI2C>
	bno055_setup();
 8001a04:	f7ff fcb8 	bl	8001378 <bno055_setup>
	bno055_setOperationModeNDOF();
 8001a08:	f7ff fca3 	bl	8001352 <bno055_setOperationModeNDOF>
		//funzione che attiva il servo motore
		//servo_motor(20); //al posto dello 0 va passato il valore dell'angolo (int)

		//inzio codice MOTORE (giansimone,walter)

		if (flag_Tc == 1) {
 8001a0c:	4ba5      	ldr	r3, [pc, #660]	; (8001ca4 <main+0x36c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	f040 80ef 	bne.w	8001bf4 <main+0x2bc>
			flag_Tc = 0;
 8001a16:	4ba3      	ldr	r3, [pc, #652]	; (8001ca4 <main+0x36c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]

			ref_count = TIM2->ARR / 2;
 8001a1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a22:	085b      	lsrs	r3, r3, #1
 8001a24:	461a      	mov	r2, r3
 8001a26:	4ba0      	ldr	r3, [pc, #640]	; (8001ca8 <main+0x370>)
 8001a28:	601a      	str	r2, [r3, #0]
			diff_count = counts - ref_count;
 8001a2a:	4ba0      	ldr	r3, [pc, #640]	; (8001cac <main+0x374>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	4b9e      	ldr	r3, [pc, #632]	; (8001ca8 <main+0x370>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	4a9e      	ldr	r2, [pc, #632]	; (8001cb0 <main+0x378>)
 8001a36:	6013      	str	r3, [r2, #0]
			diff_angle = (diff_count * 360)
 8001a38:	4b9d      	ldr	r3, [pc, #628]	; (8001cb0 <main+0x378>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001a40:	fb02 f303 	mul.w	r3, r2, r3
					/ ((double) (ENCODER_PPR * ENCODER_COUNTING_MODE
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fd75 	bl	8000534 <__aeabi_i2d>
 8001a4a:	4604      	mov	r4, r0
 8001a4c:	460d      	mov	r5, r1
 8001a4e:	4b99      	ldr	r3, [pc, #612]	; (8001cb4 <main+0x37c>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	4b99      	ldr	r3, [pc, #612]	; (8001cb8 <main+0x380>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	fb03 f202 	mul.w	r2, r3, r2
							* GEARBOX_RATIO));
 8001a5a:	4b98      	ldr	r3, [pc, #608]	; (8001cbc <main+0x384>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	fb02 f303 	mul.w	r3, r2, r3
					/ ((double) (ENCODER_PPR * ENCODER_COUNTING_MODE
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fd66 	bl	8000534 <__aeabi_i2d>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	4629      	mov	r1, r5
 8001a70:	f7fe fef4 	bl	800085c <__aeabi_ddiv>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
			diff_angle = (diff_count * 360)
 8001a78:	4991      	ldr	r1, [pc, #580]	; (8001cc0 <main+0x388>)
 8001a7a:	e9c1 2300 	strd	r2, r3, [r1]
			speed = diff_angle / dt;
 8001a7e:	4b90      	ldr	r3, [pc, #576]	; (8001cc0 <main+0x388>)
 8001a80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a84:	4b7c      	ldr	r3, [pc, #496]	; (8001c78 <main+0x340>)
 8001a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8a:	f7fe fee7 	bl	800085c <__aeabi_ddiv>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4610      	mov	r0, r2
 8001a94:	4619      	mov	r1, r3
 8001a96:	f7ff f8af 	bl	8000bf8 <__aeabi_d2f>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	4a89      	ldr	r2, [pc, #548]	; (8001cc4 <main+0x38c>)
 8001a9e:	6013      	str	r3, [r2, #0]

			direction = Ref2Direction(y_ref);
 8001aa0:	4b89      	ldr	r3, [pc, #548]	; (8001cc8 <main+0x390>)
 8001aa2:	edd3 7a00 	vldr	s15, [r3]
 8001aa6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aaa:	f7ff fae3 	bl	8001074 <Ref2Direction>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b86      	ldr	r3, [pc, #536]	; (8001ccc <main+0x394>)
 8001ab4:	701a      	strb	r2, [r3, #0]

			y_ref = m_s / GIRI_MIN_CONV; //convertito da m/s in rpm
 8001ab6:	4b86      	ldr	r3, [pc, #536]	; (8001cd0 <main+0x398>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fd4c 	bl	8000558 <__aeabi_f2d>
 8001ac0:	a365      	add	r3, pc, #404	; (adr r3, 8001c58 <main+0x320>)
 8001ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac6:	f7fe fec9 	bl	800085c <__aeabi_ddiv>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f7ff f891 	bl	8000bf8 <__aeabi_d2f>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	4a7b      	ldr	r2, [pc, #492]	; (8001cc8 <main+0x390>)
 8001ada:	6013      	str	r3, [r2, #0]

			float speed2 = speed;
 8001adc:	4b79      	ldr	r3, [pc, #484]	; (8001cc4 <main+0x38c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	667b      	str	r3, [r7, #100]	; 0x64
			float y_ref2 = y_ref;
 8001ae2:	4b79      	ldr	r3, [pc, #484]	; (8001cc8 <main+0x390>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	663b      	str	r3, [r7, #96]	; 0x60
			if (speed2 < 0)
 8001ae8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001aec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af4:	d505      	bpl.n	8001b02 <main+0x1ca>
				speed2 = -speed2;
 8001af6:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001afa:	eef1 7a67 	vneg.f32	s15, s15
 8001afe:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
			if (y_ref2 < 0)
 8001b02:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0e:	d505      	bpl.n	8001b1c <main+0x1e4>
				y_ref2 = -y_ref2;
 8001b10:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b14:	eef1 7a67 	vneg.f32	s15, s15
 8001b18:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

			u = PID_controller(&pid, speed2 * 60 / 360, y_ref2);
 8001b1c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001b20:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001cd4 <main+0x39c>
 8001b24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b28:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8001cd8 <main+0x3a0>
 8001b2c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b30:	edd7 0a18 	vldr	s1, [r7, #96]	; 0x60
 8001b34:	eeb0 0a47 	vmov.f32	s0, s14
 8001b38:	4852      	ldr	r0, [pc, #328]	; (8001c84 <main+0x34c>)
 8001b3a:	f7ff fb25 	bl	8001188 <PID_controller>
 8001b3e:	ee10 3a10 	vmov	r3, s0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fd08 	bl	8000558 <__aeabi_f2d>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4963      	ldr	r1, [pc, #396]	; (8001cdc <main+0x3a4>)
 8001b4e:	e9c1 2300 	strd	r2, r3, [r1]
			delta_duty = Voltage2Duty(u);
 8001b52:	4b62      	ldr	r3, [pc, #392]	; (8001cdc <main+0x3a4>)
 8001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f7ff f84c 	bl	8000bf8 <__aeabi_d2f>
 8001b60:	4603      	mov	r3, r0
 8001b62:	ee00 3a10 	vmov	s0, r3
 8001b66:	f7ff fa4f 	bl	8001008 <Voltage2Duty>
 8001b6a:	ee10 3a10 	vmov	r3, s0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fcf2 	bl	8000558 <__aeabi_f2d>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4959      	ldr	r1, [pc, #356]	; (8001ce0 <main+0x3a8>)
 8001b7a:	e9c1 2300 	strd	r2, r3, [r1]
			duty = old_duty + delta_duty;
 8001b7e:	4b59      	ldr	r3, [pc, #356]	; (8001ce4 <main+0x3ac>)
 8001b80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b84:	4b56      	ldr	r3, [pc, #344]	; (8001ce0 <main+0x3a8>)
 8001b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8a:	f7fe fb87 	bl	800029c <__adddf3>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4955      	ldr	r1, [pc, #340]	; (8001ce8 <main+0x3b0>)
 8001b94:	e9c1 2300 	strd	r2, r3, [r1]
			set_PWM_and_dir((uint32_t) duty, direction);
 8001b98:	4b53      	ldr	r3, [pc, #332]	; (8001ce8 <main+0x3b0>)
 8001b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f7ff f809 	bl	8000bb8 <__aeabi_d2uiz>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	4b48      	ldr	r3, [pc, #288]	; (8001ccc <main+0x394>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	4619      	mov	r1, r3
 8001bae:	4610      	mov	r0, r2
 8001bb0:	f7ff fa78 	bl	80010a4 <set_PWM_and_dir>
			//TIM10->CCR1 = 200;
			printf("%f;%f;%f\r\n", speed * 60 / 360, duty, u);
 8001bb4:	4b43      	ldr	r3, [pc, #268]	; (8001cc4 <main+0x38c>)
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001cd4 <main+0x39c>
 8001bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bc2:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001cd8 <main+0x3a0>
 8001bc6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001bca:	ee16 0a90 	vmov	r0, s13
 8001bce:	f7fe fcc3 	bl	8000558 <__aeabi_f2d>
 8001bd2:	4604      	mov	r4, r0
 8001bd4:	460d      	mov	r5, r1
 8001bd6:	4b44      	ldr	r3, [pc, #272]	; (8001ce8 <main+0x3b0>)
 8001bd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bdc:	4b3f      	ldr	r3, [pc, #252]	; (8001cdc <main+0x3a4>)
 8001bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001be6:	e9cd 0100 	strd	r0, r1, [sp]
 8001bea:	4622      	mov	r2, r4
 8001bec:	462b      	mov	r3, r5
 8001bee:	483f      	ldr	r0, [pc, #252]	; (8001cec <main+0x3b4>)
 8001bf0:	f005 fc72 	bl	80074d8 <iprintf>

		}

		if(flag10_ms == 1){
 8001bf4:	4b3e      	ldr	r3, [pc, #248]	; (8001cf0 <main+0x3b8>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	f47f af07 	bne.w	8001a0c <main+0xd4>
			flag10_ms = 0;
 8001bfe:	4b3c      	ldr	r3, [pc, #240]	; (8001cf0 <main+0x3b8>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]

			//raggio_riferimento = 1/curvatura_riferimento;

			bno055_vector_t v = bno055_getVectorGyroscope();
 8001c04:	f7ff fd24 	bl	8001650 <bno055_getVectorGyroscope>
 8001c08:	eeb0 4a40 	vmov.f32	s8, s0
 8001c0c:	eef0 4a60 	vmov.f32	s9, s1
 8001c10:	eeb0 5a41 	vmov.f32	s10, s2
 8001c14:	eef0 5a61 	vmov.f32	s11, s3
 8001c18:	eeb0 6a42 	vmov.f32	s12, s4
 8001c1c:	eef0 6a62 	vmov.f32	s13, s5
 8001c20:	eeb0 7a43 	vmov.f32	s14, s6
 8001c24:	eef0 7a63 	vmov.f32	s15, s7
 8001c28:	ed87 4b06 	vstr	d4, [r7, #24]
 8001c2c:	ed87 5b08 	vstr	d5, [r7, #32]
 8001c30:	ed87 6b0a 	vstr	d6, [r7, #40]	; 0x28
 8001c34:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
			double yaw_rate = v.z;
 8001c38:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c3c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			double yaw_rate_rad = (yaw_rate*PI)/180;
 8001c40:	a307      	add	r3, pc, #28	; (adr r3, 8001c60 <main+0x328>)
 8001c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c46:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001c4a:	f7fe fcdd 	bl	8000608 <__aeabi_dmul>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4610      	mov	r0, r2
 8001c54:	4619      	mov	r1, r3
 8001c56:	e04d      	b.n	8001cf4 <main+0x3bc>
 8001c58:	3e361304 	.word	0x3e361304
 8001c5c:	3f407dbe 	.word	0x3f407dbe
 8001c60:	51eb851f 	.word	0x51eb851f
 8001c64:	40091eb8 	.word	0x40091eb8
 8001c68:	2000028c 	.word	0x2000028c
 8001c6c:	2000031c 	.word	0x2000031c
 8001c70:	200002d4 	.word	0x200002d4
 8001c74:	20000364 	.word	0x20000364
 8001c78:	20000018 	.word	0x20000018
 8001c7c:	c0266666 	.word	0xc0266666
 8001c80:	40266666 	.word	0x40266666
 8001c84:	200003f8 	.word	0x200003f8
 8001c88:	00000000 	.word	0x00000000
 8001c8c:	3aebedfa 	.word	0x3aebedfa
 8001c90:	3a83126f 	.word	0x3a83126f
 8001c94:	20000020 	.word	0x20000020
 8001c98:	20000418 	.word	0x20000418
 8001c9c:	437a0000 	.word	0x437a0000
 8001ca0:	20000238 	.word	0x20000238
 8001ca4:	20000468 	.word	0x20000468
 8001ca8:	2000047c 	.word	0x2000047c
 8001cac:	2000046c 	.word	0x2000046c
 8001cb0:	20000478 	.word	0x20000478
 8001cb4:	2000000c 	.word	0x2000000c
 8001cb8:	20000014 	.word	0x20000014
 8001cbc:	20000010 	.word	0x20000010
 8001cc0:	20000470 	.word	0x20000470
 8001cc4:	20000480 	.word	0x20000480
 8001cc8:	20000448 	.word	0x20000448
 8001ccc:	2000044c 	.word	0x2000044c
 8001cd0:	20000030 	.word	0x20000030
 8001cd4:	42700000 	.word	0x42700000
 8001cd8:	43b40000 	.word	0x43b40000
 8001cdc:	20000438 	.word	0x20000438
 8001ce0:	20000460 	.word	0x20000460
 8001ce4:	20000458 	.word	0x20000458
 8001ce8:	20000450 	.word	0x20000450
 8001cec:	0800b460 	.word	0x0800b460
 8001cf0:	20000484 	.word	0x20000484
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	4b7e      	ldr	r3, [pc, #504]	; (8001ef4 <main+0x5bc>)
 8001cfa:	f7fe fdaf 	bl	800085c <__aeabi_ddiv>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			//printf("yaw_rate: %f \r\n", yaw_rate);
			//yaw_ref = (speed * GIRI_MIN_CONV) / (raggio_riferimento); //raggio_rif da passare
			//steering_angle = atan(1/raggio_riferimento);
			//yaw_ref = m_s/raggio_riferimento;
			printf("raggio_refMain: %f\r\n", raggio_riferimento);
 8001d06:	4b7c      	ldr	r3, [pc, #496]	; (8001ef8 <main+0x5c0>)
 8001d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0c:	487b      	ldr	r0, [pc, #492]	; (8001efc <main+0x5c4>)
 8001d0e:	f005 fbe3 	bl	80074d8 <iprintf>
			if (raggio_riferimento == 0){
 8001d12:	4b79      	ldr	r3, [pc, #484]	; (8001ef8 <main+0x5c0>)
 8001d14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	f7fe feda 	bl	8000ad8 <__aeabi_dcmpeq>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d028      	beq.n	8001d7c <main+0x444>
				//printf("sterzo: %f, w: %f, wref: %f\r\n\r\n", u1, yaw_rate, yaw_ref);
				printf("dritto senza PID \r\n");
 8001d2a:	4875      	ldr	r0, [pc, #468]	; (8001f00 <main+0x5c8>)
 8001d2c:	f005 fc5a 	bl	80075e4 <puts>
				u1 = PID_controller(&pid_servo, yaw_rate, 0);
 8001d30:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001d34:	f7fe ff60 	bl	8000bf8 <__aeabi_d2f>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	eddf 0a72 	vldr	s1, [pc, #456]	; 8001f04 <main+0x5cc>
 8001d3e:	ee00 3a10 	vmov	s0, r3
 8001d42:	4871      	ldr	r0, [pc, #452]	; (8001f08 <main+0x5d0>)
 8001d44:	f7ff fa20 	bl	8001188 <PID_controller>
 8001d48:	ee10 3a10 	vmov	r3, s0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fc03 	bl	8000558 <__aeabi_f2d>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	496d      	ldr	r1, [pc, #436]	; (8001f0c <main+0x5d4>)
 8001d58:	e9c1 2300 	strd	r2, r3, [r1]
				servo_motor(-u1);
 8001d5c:	4b6b      	ldr	r3, [pc, #428]	; (8001f0c <main+0x5d4>)
 8001d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d62:	613a      	str	r2, [r7, #16]
 8001d64:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d6e:	f7fe fefb 	bl	8000b68 <__aeabi_d2iz>
 8001d72:	4603      	mov	r3, r0
 8001d74:	4618      	mov	r0, r3
 8001d76:	f000 fbcf 	bl	8002518 <servo_motor>
 8001d7a:	e647      	b.n	8001a0c <main+0xd4>
				//servo_motor(0);
			} else {
				yaw_ref = m_s/(raggio_riferimento);
 8001d7c:	4b64      	ldr	r3, [pc, #400]	; (8001f10 <main+0x5d8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fbe9 	bl	8000558 <__aeabi_f2d>
 8001d86:	4b5c      	ldr	r3, [pc, #368]	; (8001ef8 <main+0x5c0>)
 8001d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8c:	f7fe fd66 	bl	800085c <__aeabi_ddiv>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	495f      	ldr	r1, [pc, #380]	; (8001f14 <main+0x5dc>)
 8001d96:	e9c1 2300 	strd	r2, r3, [r1]
				if (yaw_rate2 < 0)
					yaw_rate2 = -yaw_rate2;
				if (yaw_ref2 < 0)
					yaw_ref2 = -yaw_ref2;*/

				double yaw_rate2 = yaw_rate_rad;
 8001d9a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d9e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
				double yaw_ref2 = yaw_ref;
 8001da2:	4b5c      	ldr	r3, [pc, #368]	; (8001f14 <main+0x5dc>)
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				if (yaw_rate2 < 0)
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	f04f 0300 	mov.w	r3, #0
 8001db4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001db8:	f7fe fe98 	bl	8000aec <__aeabi_dcmplt>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d009      	beq.n	8001dd6 <main+0x49e>
				yaw_rate2 = -yaw_rate2;
 8001dc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dc8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	ed97 7b02 	vldr	d7, [r7, #8]
 8001dd2:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
				if (yaw_ref2 < 0)
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	f04f 0300 	mov.w	r3, #0
 8001dde:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001de2:	f7fe fe83 	bl	8000aec <__aeabi_dcmplt>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d009      	beq.n	8001e00 <main+0x4c8>
				yaw_ref2= -yaw_ref2;
 8001dec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	ed97 7b00 	vldr	d7, [r7]
 8001dfc:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50

				u1 = PID_controller(&pid_servo, yaw_rate2, yaw_ref2);
 8001e00:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001e04:	f7fe fef8 	bl	8000bf8 <__aeabi_d2f>
 8001e08:	4604      	mov	r4, r0
 8001e0a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001e0e:	f7fe fef3 	bl	8000bf8 <__aeabi_d2f>
 8001e12:	4603      	mov	r3, r0
 8001e14:	ee00 3a90 	vmov	s1, r3
 8001e18:	ee00 4a10 	vmov	s0, r4
 8001e1c:	483a      	ldr	r0, [pc, #232]	; (8001f08 <main+0x5d0>)
 8001e1e:	f7ff f9b3 	bl	8001188 <PID_controller>
 8001e22:	ee10 3a10 	vmov	r3, s0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe fb96 	bl	8000558 <__aeabi_f2d>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4936      	ldr	r1, [pc, #216]	; (8001f0c <main+0x5d4>)
 8001e32:	e9c1 2300 	strd	r2, r3, [r1]
				//printf("---------------------------\r\n");
				//printf("y_ref %f\r\n", yaw_ref);
				//printf("----------------------------\r\n");
				//printf("%f;%f;%f\r\n", u1, yaw_rate, yaw_ref);

				if(raggio_riferimento >= 0 && u1 > 0)
 8001e36:	4b30      	ldr	r3, [pc, #192]	; (8001ef8 <main+0x5c0>)
 8001e38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	f04f 0300 	mov.w	r3, #0
 8001e44:	f7fe fe66 	bl	8000b14 <__aeabi_dcmpge>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d014      	beq.n	8001e78 <main+0x540>
 8001e4e:	4b2f      	ldr	r3, [pc, #188]	; (8001f0c <main+0x5d4>)
 8001e50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	f04f 0300 	mov.w	r3, #0
 8001e5c:	f7fe fe64 	bl	8000b28 <__aeabi_dcmpgt>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d008      	beq.n	8001e78 <main+0x540>
					u1*=-1;
 8001e66:	4b29      	ldr	r3, [pc, #164]	; (8001f0c <main+0x5d4>)
 8001e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6c:	4690      	mov	r8, r2
 8001e6e:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001e72:	4b26      	ldr	r3, [pc, #152]	; (8001f0c <main+0x5d4>)
 8001e74:	e9c3 8900 	strd	r8, r9, [r3]
				if(raggio_riferimento <  0 && u1 < 0)
 8001e78:	4b1f      	ldr	r3, [pc, #124]	; (8001ef8 <main+0x5c0>)
 8001e7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	f7fe fe31 	bl	8000aec <__aeabi_dcmplt>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d014      	beq.n	8001eba <main+0x582>
 8001e90:	4b1e      	ldr	r3, [pc, #120]	; (8001f0c <main+0x5d4>)
 8001e92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	f04f 0300 	mov.w	r3, #0
 8001e9e:	f7fe fe25 	bl	8000aec <__aeabi_dcmplt>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d008      	beq.n	8001eba <main+0x582>
					u1*=-1;
 8001ea8:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <main+0x5d4>)
 8001eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eae:	4692      	mov	sl, r2
 8001eb0:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8001eb4:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <main+0x5d4>)
 8001eb6:	e9c3 ab00 	strd	sl, fp, [r3]
				printf("sterzo: %f, w: %f, wref: %f\r\n\r\n", u1, yaw_rate, yaw_ref);
 8001eba:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <main+0x5d4>)
 8001ebc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ec0:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <main+0x5dc>)
 8001ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001eca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ece:	e9cd 2300 	strd	r2, r3, [sp]
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4810      	ldr	r0, [pc, #64]	; (8001f18 <main+0x5e0>)
 8001ed8:	f005 fafe 	bl	80074d8 <iprintf>

				servo_motor((int)u1);
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <main+0x5d4>)
 8001ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f7fe fe3f 	bl	8000b68 <__aeabi_d2iz>
 8001eea:	4603      	mov	r3, r0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f000 fb13 	bl	8002518 <servo_motor>
		if (flag_Tc == 1) {
 8001ef2:	e58b      	b.n	8001a0c <main+0xd4>
 8001ef4:	40668000 	.word	0x40668000
 8001ef8:	20000028 	.word	0x20000028
 8001efc:	0800b46c 	.word	0x0800b46c
 8001f00:	0800b484 	.word	0x0800b484
 8001f04:	00000000 	.word	0x00000000
 8001f08:	20000418 	.word	0x20000418
 8001f0c:	20000440 	.word	0x20000440
 8001f10:	20000030 	.word	0x20000030
 8001f14:	20000488 	.word	0x20000488
 8001f18:	0800b498 	.word	0x0800b498

08001f1c <SystemClock_Config>:

	/**
	 * @brief System Clock Configuration
	 * @retval None
	 */
	void SystemClock_Config(void) {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b094      	sub	sp, #80	; 0x50
 8001f20:	af00      	add	r7, sp, #0
		RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001f22:	f107 0320 	add.w	r3, r7, #32
 8001f26:	2230      	movs	r2, #48	; 0x30
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f004 fc52 	bl	80067d4 <memset>
		RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001f30:	f107 030c 	add.w	r3, r7, #12
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]

		/** Configure the main internal regulator output voltage
		 */
		__HAL_RCC_PWR_CLK_ENABLE();
 8001f40:	2300      	movs	r3, #0
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	4b29      	ldr	r3, [pc, #164]	; (8001fec <SystemClock_Config+0xd0>)
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	4a28      	ldr	r2, [pc, #160]	; (8001fec <SystemClock_Config+0xd0>)
 8001f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f50:	4b26      	ldr	r3, [pc, #152]	; (8001fec <SystemClock_Config+0xd0>)
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
		__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	607b      	str	r3, [r7, #4]
 8001f60:	4b23      	ldr	r3, [pc, #140]	; (8001ff0 <SystemClock_Config+0xd4>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f68:	4a21      	ldr	r2, [pc, #132]	; (8001ff0 <SystemClock_Config+0xd4>)
 8001f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	4b1f      	ldr	r3, [pc, #124]	; (8001ff0 <SystemClock_Config+0xd4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]

		/** Initializes the RCC Oscillators according to the specified parameters
		 * in the RCC_OscInitTypeDef structure.
		 */
		RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	623b      	str	r3, [r7, #32]
		RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f80:	2301      	movs	r3, #1
 8001f82:	62fb      	str	r3, [r7, #44]	; 0x2c
		RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f84:	2310      	movs	r3, #16
 8001f86:	633b      	str	r3, [r7, #48]	; 0x30
		RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	63bb      	str	r3, [r7, #56]	; 0x38
		RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
		RCC_OscInitStruct.PLL.PLLM = 16;
 8001f90:	2310      	movs	r3, #16
 8001f92:	643b      	str	r3, [r7, #64]	; 0x40
		RCC_OscInitStruct.PLL.PLLN = 336;
 8001f94:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001f98:	647b      	str	r3, [r7, #68]	; 0x44
		RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	64bb      	str	r3, [r7, #72]	; 0x48
		RCC_OscInitStruct.PLL.PLLQ = 7;
 8001f9e:	2307      	movs	r3, #7
 8001fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001fa2:	f107 0320 	add.w	r3, r7, #32
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f002 fa38 	bl	800441c <HAL_RCC_OscConfig>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <SystemClock_Config+0x9a>
			Error_Handler();
 8001fb2:	f000 faab 	bl	800250c <Error_Handler>
		}

		/** Initializes the CPU, AHB and APB buses clocks
		 */
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001fb6:	230f      	movs	r3, #15
 8001fb8:	60fb      	str	r3, [r7, #12]
				| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	613b      	str	r3, [r7, #16]
		RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fc6:	61bb      	str	r3, [r7, #24]
		RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61fb      	str	r3, [r7, #28]

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)
 8001fcc:	f107 030c 	add.w	r3, r7, #12
 8001fd0:	2102      	movs	r1, #2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f002 fc9a 	bl	800490c <HAL_RCC_ClockConfig>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <SystemClock_Config+0xc6>
				!= HAL_OK) {
			Error_Handler();
 8001fde:	f000 fa95 	bl	800250c <Error_Handler>
		}
	}
 8001fe2:	bf00      	nop
 8001fe4:	3750      	adds	r7, #80	; 0x50
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40007000 	.word	0x40007000

08001ff4 <MX_I2C1_Init>:
	/**
	 * @brief I2C1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_I2C1_Init(void) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
		/* USER CODE END I2C1_Init 0 */

		/* USER CODE BEGIN I2C1_Init 1 */

		/* USER CODE END I2C1_Init 1 */
		hi2c1.Instance = I2C1;
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <MX_I2C1_Init+0x50>)
 8001ffa:	4a13      	ldr	r2, [pc, #76]	; (8002048 <MX_I2C1_Init+0x54>)
 8001ffc:	601a      	str	r2, [r3, #0]
		hi2c1.Init.ClockSpeed = 100000;
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <MX_I2C1_Init+0x50>)
 8002000:	4a12      	ldr	r2, [pc, #72]	; (800204c <MX_I2C1_Init+0x58>)
 8002002:	605a      	str	r2, [r3, #4]
		hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002004:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <MX_I2C1_Init+0x50>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
		hi2c1.Init.OwnAddress1 = 0;
 800200a:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <MX_I2C1_Init+0x50>)
 800200c:	2200      	movs	r2, #0
 800200e:	60da      	str	r2, [r3, #12]
		hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002010:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <MX_I2C1_Init+0x50>)
 8002012:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002016:	611a      	str	r2, [r3, #16]
		hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002018:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <MX_I2C1_Init+0x50>)
 800201a:	2200      	movs	r2, #0
 800201c:	615a      	str	r2, [r3, #20]
		hi2c1.Init.OwnAddress2 = 0;
 800201e:	4b09      	ldr	r3, [pc, #36]	; (8002044 <MX_I2C1_Init+0x50>)
 8002020:	2200      	movs	r2, #0
 8002022:	619a      	str	r2, [r3, #24]
		hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002024:	4b07      	ldr	r3, [pc, #28]	; (8002044 <MX_I2C1_Init+0x50>)
 8002026:	2200      	movs	r2, #0
 8002028:	61da      	str	r2, [r3, #28]
		hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800202a:	4b06      	ldr	r3, [pc, #24]	; (8002044 <MX_I2C1_Init+0x50>)
 800202c:	2200      	movs	r2, #0
 800202e:	621a      	str	r2, [r3, #32]
		if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002030:	4804      	ldr	r0, [pc, #16]	; (8002044 <MX_I2C1_Init+0x50>)
 8002032:	f001 f915 	bl	8003260 <HAL_I2C_Init>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_I2C1_Init+0x4c>
			Error_Handler();
 800203c:	f000 fa66 	bl	800250c <Error_Handler>
		}
		/* USER CODE BEGIN I2C1_Init 2 */

		/* USER CODE END I2C1_Init 2 */

	}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000238 	.word	0x20000238
 8002048:	40005400 	.word	0x40005400
 800204c:	000186a0 	.word	0x000186a0

08002050 <MX_TIM1_Init>:
	/**
	 * @brief TIM1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM1_Init(void) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b096      	sub	sp, #88	; 0x58
 8002054:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM1_Init 0 */

		/* USER CODE END TIM1_Init 0 */

		TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002056:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	605a      	str	r2, [r3, #4]
 8002060:	609a      	str	r2, [r3, #8]
 8002062:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002064:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
		TIM_OC_InitTypeDef sConfigOC = { 0 };
 800206e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]
 8002078:	609a      	str	r2, [r3, #8]
 800207a:	60da      	str	r2, [r3, #12]
 800207c:	611a      	str	r2, [r3, #16]
 800207e:	615a      	str	r2, [r3, #20]
 8002080:	619a      	str	r2, [r3, #24]
		TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	2220      	movs	r2, #32
 8002086:	2100      	movs	r1, #0
 8002088:	4618      	mov	r0, r3
 800208a:	f004 fba3 	bl	80067d4 <memset>

		/* USER CODE BEGIN TIM1_Init 1 */

		/* USER CODE END TIM1_Init 1 */
		htim1.Instance = TIM1;
 800208e:	4b3f      	ldr	r3, [pc, #252]	; (800218c <MX_TIM1_Init+0x13c>)
 8002090:	4a3f      	ldr	r2, [pc, #252]	; (8002190 <MX_TIM1_Init+0x140>)
 8002092:	601a      	str	r2, [r3, #0]
		htim1.Init.Prescaler = 1681 - 1;
 8002094:	4b3d      	ldr	r3, [pc, #244]	; (800218c <MX_TIM1_Init+0x13c>)
 8002096:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800209a:	605a      	str	r2, [r3, #4]
		htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800209c:	4b3b      	ldr	r3, [pc, #236]	; (800218c <MX_TIM1_Init+0x13c>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
		htim1.Init.Period = 1001 - 1;
 80020a2:	4b3a      	ldr	r3, [pc, #232]	; (800218c <MX_TIM1_Init+0x13c>)
 80020a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020a8:	60da      	str	r2, [r3, #12]
		htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020aa:	4b38      	ldr	r3, [pc, #224]	; (800218c <MX_TIM1_Init+0x13c>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	611a      	str	r2, [r3, #16]
		htim1.Init.RepetitionCounter = 0;
 80020b0:	4b36      	ldr	r3, [pc, #216]	; (800218c <MX_TIM1_Init+0x13c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	615a      	str	r2, [r3, #20]
		htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b6:	4b35      	ldr	r3, [pc, #212]	; (800218c <MX_TIM1_Init+0x13c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80020bc:	4833      	ldr	r0, [pc, #204]	; (800218c <MX_TIM1_Init+0x13c>)
 80020be:	f002 fe45 	bl	8004d4c <HAL_TIM_Base_Init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_TIM1_Init+0x7c>
			Error_Handler();
 80020c8:	f000 fa20 	bl	800250c <Error_Handler>
		}
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80020d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020d6:	4619      	mov	r1, r3
 80020d8:	482c      	ldr	r0, [pc, #176]	; (800218c <MX_TIM1_Init+0x13c>)
 80020da:	f003 faf1 	bl	80056c0 <HAL_TIM_ConfigClockSource>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_TIM1_Init+0x98>
			Error_Handler();
 80020e4:	f000 fa12 	bl	800250c <Error_Handler>
		}
		if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80020e8:	4828      	ldr	r0, [pc, #160]	; (800218c <MX_TIM1_Init+0x13c>)
 80020ea:	f002 fee1 	bl	8004eb0 <HAL_TIM_PWM_Init>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM1_Init+0xa8>
			Error_Handler();
 80020f4:	f000 fa0a 	bl	800250c <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f8:	2300      	movs	r3, #0
 80020fa:	643b      	str	r3, [r7, #64]	; 0x40
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020fc:	2300      	movs	r3, #0
 80020fe:	647b      	str	r3, [r7, #68]	; 0x44
		if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002100:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002104:	4619      	mov	r1, r3
 8002106:	4821      	ldr	r0, [pc, #132]	; (800218c <MX_TIM1_Init+0x13c>)
 8002108:	f003 fe96 	bl	8005e38 <HAL_TIMEx_MasterConfigSynchronization>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM1_Init+0xc6>
				!= HAL_OK) {
			Error_Handler();
 8002112:	f000 f9fb 	bl	800250c <Error_Handler>
		}
		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002116:	2360      	movs	r3, #96	; 0x60
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
		sConfigOC.Pulse = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	62bb      	str	r3, [r7, #40]	; 0x28
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800211e:	2300      	movs	r3, #0
 8002120:	62fb      	str	r3, [r7, #44]	; 0x2c
		sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002122:	2300      	movs	r3, #0
 8002124:	633b      	str	r3, [r7, #48]	; 0x30
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002126:	2300      	movs	r3, #0
 8002128:	637b      	str	r3, [r7, #52]	; 0x34
		sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800212a:	2300      	movs	r3, #0
 800212c:	63bb      	str	r3, [r7, #56]	; 0x38
		sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800212e:	2300      	movs	r3, #0
 8002130:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8002132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002136:	2200      	movs	r2, #0
 8002138:	4619      	mov	r1, r3
 800213a:	4814      	ldr	r0, [pc, #80]	; (800218c <MX_TIM1_Init+0x13c>)
 800213c:	f003 f9fe 	bl	800553c <HAL_TIM_PWM_ConfigChannel>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_TIM1_Init+0xfa>
				!= HAL_OK) {
			Error_Handler();
 8002146:	f000 f9e1 	bl	800250c <Error_Handler>
		}
		sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800214a:	2300      	movs	r3, #0
 800214c:	607b      	str	r3, [r7, #4]
		sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	60bb      	str	r3, [r7, #8]
		sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
		sBreakDeadTimeConfig.DeadTime = 0;
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
		sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
		sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800215e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002162:	61bb      	str	r3, [r7, #24]
		sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002164:	2300      	movs	r3, #0
 8002166:	623b      	str	r3, [r7, #32]
		if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8002168:	1d3b      	adds	r3, r7, #4
 800216a:	4619      	mov	r1, r3
 800216c:	4807      	ldr	r0, [pc, #28]	; (800218c <MX_TIM1_Init+0x13c>)
 800216e:	f003 fed1 	bl	8005f14 <HAL_TIMEx_ConfigBreakDeadTime>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_TIM1_Init+0x12c>
				!= HAL_OK) {
			Error_Handler();
 8002178:	f000 f9c8 	bl	800250c <Error_Handler>
		}
		/* USER CODE BEGIN TIM1_Init 2 */

		/* USER CODE END TIM1_Init 2 */
		HAL_TIM_MspPostInit(&htim1);
 800217c:	4803      	ldr	r0, [pc, #12]	; (800218c <MX_TIM1_Init+0x13c>)
 800217e:	f000 fb37 	bl	80027f0 <HAL_TIM_MspPostInit>

	}
 8002182:	bf00      	nop
 8002184:	3758      	adds	r7, #88	; 0x58
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	2000028c 	.word	0x2000028c
 8002190:	40010000 	.word	0x40010000

08002194 <MX_TIM2_Init>:
	/**
	 * @brief TIM2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM2_Init(void) {
 8002194:	b580      	push	{r7, lr}
 8002196:	b08c      	sub	sp, #48	; 0x30
 8002198:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM2_Init 0 */

		/* USER CODE END TIM2_Init 0 */

		TIM_Encoder_InitTypeDef sConfig = { 0 };
 800219a:	f107 030c 	add.w	r3, r7, #12
 800219e:	2224      	movs	r2, #36	; 0x24
 80021a0:	2100      	movs	r1, #0
 80021a2:	4618      	mov	r0, r3
 80021a4:	f004 fb16 	bl	80067d4 <memset>
		TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80021a8:	1d3b      	adds	r3, r7, #4
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]

		/* USER CODE BEGIN TIM2_Init 1 */

		/* USER CODE END TIM2_Init 1 */
		htim2.Instance = TIM2;
 80021b0:	4b21      	ldr	r3, [pc, #132]	; (8002238 <MX_TIM2_Init+0xa4>)
 80021b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021b6:	601a      	str	r2, [r3, #0]
		htim2.Init.Prescaler = 0;
 80021b8:	4b1f      	ldr	r3, [pc, #124]	; (8002238 <MX_TIM2_Init+0xa4>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	605a      	str	r2, [r3, #4]
		htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021be:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <MX_TIM2_Init+0xa4>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
		htim2.Init.Period = 4294967295 - 1;
 80021c4:	4b1c      	ldr	r3, [pc, #112]	; (8002238 <MX_TIM2_Init+0xa4>)
 80021c6:	f06f 0201 	mvn.w	r2, #1
 80021ca:	60da      	str	r2, [r3, #12]
		htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021cc:	4b1a      	ldr	r3, [pc, #104]	; (8002238 <MX_TIM2_Init+0xa4>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	611a      	str	r2, [r3, #16]
		htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d2:	4b19      	ldr	r3, [pc, #100]	; (8002238 <MX_TIM2_Init+0xa4>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	619a      	str	r2, [r3, #24]
		sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80021d8:	2303      	movs	r3, #3
 80021da:	60fb      	str	r3, [r7, #12]
		sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021dc:	2300      	movs	r3, #0
 80021de:	613b      	str	r3, [r7, #16]
		sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021e0:	2301      	movs	r3, #1
 80021e2:	617b      	str	r3, [r7, #20]
		sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61bb      	str	r3, [r7, #24]
		sConfig.IC1Filter = 10;
 80021e8:	230a      	movs	r3, #10
 80021ea:	61fb      	str	r3, [r7, #28]
		sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021ec:	2300      	movs	r3, #0
 80021ee:	623b      	str	r3, [r7, #32]
		sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021f0:	2301      	movs	r3, #1
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
		sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021f4:	2300      	movs	r3, #0
 80021f6:	62bb      	str	r3, [r7, #40]	; 0x28
		sConfig.IC2Filter = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 80021fc:	f107 030c 	add.w	r3, r7, #12
 8002200:	4619      	mov	r1, r3
 8002202:	480d      	ldr	r0, [pc, #52]	; (8002238 <MX_TIM2_Init+0xa4>)
 8002204:	f002 ff5e 	bl	80050c4 <HAL_TIM_Encoder_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_TIM2_Init+0x7e>
			Error_Handler();
 800220e:	f000 f97d 	bl	800250c <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002212:	2300      	movs	r3, #0
 8002214:	607b      	str	r3, [r7, #4]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002216:	2300      	movs	r3, #0
 8002218:	60bb      	str	r3, [r7, #8]
		if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800221a:	1d3b      	adds	r3, r7, #4
 800221c:	4619      	mov	r1, r3
 800221e:	4806      	ldr	r0, [pc, #24]	; (8002238 <MX_TIM2_Init+0xa4>)
 8002220:	f003 fe0a 	bl	8005e38 <HAL_TIMEx_MasterConfigSynchronization>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_TIM2_Init+0x9a>
				!= HAL_OK) {
			Error_Handler();
 800222a:	f000 f96f 	bl	800250c <Error_Handler>
		}
		/* USER CODE BEGIN TIM2_Init 2 */

		/* USER CODE END TIM2_Init 2 */

	}
 800222e:	bf00      	nop
 8002230:	3730      	adds	r7, #48	; 0x30
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	200002d4 	.word	0x200002d4

0800223c <MX_TIM10_Init>:
	/**
	 * @brief TIM10 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM10_Init(void) {
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM10_Init 0 */

		/* USER CODE END TIM10_Init 0 */

		TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
 8002250:	615a      	str	r2, [r3, #20]
 8002252:	619a      	str	r2, [r3, #24]

		/* USER CODE BEGIN TIM10_Init 1 */

		/* USER CODE END TIM10_Init 1 */
		htim10.Instance = TIM10;
 8002254:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <MX_TIM10_Init+0x94>)
 8002256:	4a1f      	ldr	r2, [pc, #124]	; (80022d4 <MX_TIM10_Init+0x98>)
 8002258:	601a      	str	r2, [r3, #0]
		htim10.Init.Prescaler = 84 - 1;
 800225a:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <MX_TIM10_Init+0x94>)
 800225c:	2253      	movs	r2, #83	; 0x53
 800225e:	605a      	str	r2, [r3, #4]
		htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002260:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <MX_TIM10_Init+0x94>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
		htim10.Init.Period = 1000 - 1;
 8002266:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <MX_TIM10_Init+0x94>)
 8002268:	f240 32e7 	movw	r2, #999	; 0x3e7
 800226c:	60da      	str	r2, [r3, #12]
		htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800226e:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <MX_TIM10_Init+0x94>)
 8002270:	2200      	movs	r2, #0
 8002272:	611a      	str	r2, [r3, #16]
		htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002274:	4b16      	ldr	r3, [pc, #88]	; (80022d0 <MX_TIM10_Init+0x94>)
 8002276:	2200      	movs	r2, #0
 8002278:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 800227a:	4815      	ldr	r0, [pc, #84]	; (80022d0 <MX_TIM10_Init+0x94>)
 800227c:	f002 fd66 	bl	8004d4c <HAL_TIM_Base_Init>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_TIM10_Init+0x4e>
			Error_Handler();
 8002286:	f000 f941 	bl	800250c <Error_Handler>
		}
		if (HAL_TIM_PWM_Init(&htim10) != HAL_OK) {
 800228a:	4811      	ldr	r0, [pc, #68]	; (80022d0 <MX_TIM10_Init+0x94>)
 800228c:	f002 fe10 	bl	8004eb0 <HAL_TIM_PWM_Init>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_TIM10_Init+0x5e>
			Error_Handler();
 8002296:	f000 f939 	bl	800250c <Error_Handler>
		}
		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800229a:	2360      	movs	r3, #96	; 0x60
 800229c:	607b      	str	r3, [r7, #4]
		sConfigOC.Pulse = 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	60bb      	str	r3, [r7, #8]
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
		if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1)
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	2200      	movs	r2, #0
 80022ae:	4619      	mov	r1, r3
 80022b0:	4807      	ldr	r0, [pc, #28]	; (80022d0 <MX_TIM10_Init+0x94>)
 80022b2:	f003 f943 	bl	800553c <HAL_TIM_PWM_ConfigChannel>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <MX_TIM10_Init+0x84>
				!= HAL_OK) {
			Error_Handler();
 80022bc:	f000 f926 	bl	800250c <Error_Handler>
		}
		/* USER CODE BEGIN TIM10_Init 2 */

		/* USER CODE END TIM10_Init 2 */
		HAL_TIM_MspPostInit(&htim10);
 80022c0:	4803      	ldr	r0, [pc, #12]	; (80022d0 <MX_TIM10_Init+0x94>)
 80022c2:	f000 fa95 	bl	80027f0 <HAL_TIM_MspPostInit>

	}
 80022c6:	bf00      	nop
 80022c8:	3720      	adds	r7, #32
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	2000031c 	.word	0x2000031c
 80022d4:	40014400 	.word	0x40014400

080022d8 <MX_TIM11_Init>:
	/**
	 * @brief TIM11 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM11_Init(void) {
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
		/* USER CODE END TIM11_Init 0 */

		/* USER CODE BEGIN TIM11_Init 1 */

		/* USER CODE END TIM11_Init 1 */
		htim11.Instance = TIM11;
 80022dc:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <MX_TIM11_Init+0x40>)
 80022de:	4a0f      	ldr	r2, [pc, #60]	; (800231c <MX_TIM11_Init+0x44>)
 80022e0:	601a      	str	r2, [r3, #0]
		htim11.Init.Prescaler = 120 - 1;
 80022e2:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <MX_TIM11_Init+0x40>)
 80022e4:	2277      	movs	r2, #119	; 0x77
 80022e6:	605a      	str	r2, [r3, #4]
		htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <MX_TIM11_Init+0x40>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	609a      	str	r2, [r3, #8]
		htim11.Init.Period = 7000 - 1;
 80022ee:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <MX_TIM11_Init+0x40>)
 80022f0:	f641 3257 	movw	r2, #6999	; 0x1b57
 80022f4:	60da      	str	r2, [r3, #12]
		htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f6:	4b08      	ldr	r3, [pc, #32]	; (8002318 <MX_TIM11_Init+0x40>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	611a      	str	r2, [r3, #16]
		htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <MX_TIM11_Init+0x40>)
 80022fe:	2200      	movs	r2, #0
 8002300:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 8002302:	4805      	ldr	r0, [pc, #20]	; (8002318 <MX_TIM11_Init+0x40>)
 8002304:	f002 fd22 	bl	8004d4c <HAL_TIM_Base_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM11_Init+0x3a>
			Error_Handler();
 800230e:	f000 f8fd 	bl	800250c <Error_Handler>
		}
		/* USER CODE BEGIN TIM11_Init 2 */

		/* USER CODE END TIM11_Init 2 */

	}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000364 	.word	0x20000364
 800231c:	40014800 	.word	0x40014800

08002320 <MX_USART2_UART_Init>:
	/**
	 * @brief USART2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_USART2_UART_Init(void) {
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
		/* USER CODE END USART2_Init 0 */

		/* USER CODE BEGIN USART2_Init 1 */

		/* USER CODE END USART2_Init 1 */
		huart2.Instance = USART2;
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <MX_USART2_UART_Init+0x4c>)
 8002326:	4a12      	ldr	r2, [pc, #72]	; (8002370 <MX_USART2_UART_Init+0x50>)
 8002328:	601a      	str	r2, [r3, #0]
		huart2.Init.BaudRate = 115200;
 800232a:	4b10      	ldr	r3, [pc, #64]	; (800236c <MX_USART2_UART_Init+0x4c>)
 800232c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002330:	605a      	str	r2, [r3, #4]
		huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002332:	4b0e      	ldr	r3, [pc, #56]	; (800236c <MX_USART2_UART_Init+0x4c>)
 8002334:	2200      	movs	r2, #0
 8002336:	609a      	str	r2, [r3, #8]
		huart2.Init.StopBits = UART_STOPBITS_1;
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <MX_USART2_UART_Init+0x4c>)
 800233a:	2200      	movs	r2, #0
 800233c:	60da      	str	r2, [r3, #12]
		huart2.Init.Parity = UART_PARITY_NONE;
 800233e:	4b0b      	ldr	r3, [pc, #44]	; (800236c <MX_USART2_UART_Init+0x4c>)
 8002340:	2200      	movs	r2, #0
 8002342:	611a      	str	r2, [r3, #16]
		huart2.Init.Mode = UART_MODE_TX_RX;
 8002344:	4b09      	ldr	r3, [pc, #36]	; (800236c <MX_USART2_UART_Init+0x4c>)
 8002346:	220c      	movs	r2, #12
 8002348:	615a      	str	r2, [r3, #20]
		huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234a:	4b08      	ldr	r3, [pc, #32]	; (800236c <MX_USART2_UART_Init+0x4c>)
 800234c:	2200      	movs	r2, #0
 800234e:	619a      	str	r2, [r3, #24]
		huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002350:	4b06      	ldr	r3, [pc, #24]	; (800236c <MX_USART2_UART_Init+0x4c>)
 8002352:	2200      	movs	r2, #0
 8002354:	61da      	str	r2, [r3, #28]
		if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002356:	4805      	ldr	r0, [pc, #20]	; (800236c <MX_USART2_UART_Init+0x4c>)
 8002358:	f003 fe42 	bl	8005fe0 <HAL_UART_Init>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_USART2_UART_Init+0x46>
			Error_Handler();
 8002362:	f000 f8d3 	bl	800250c <Error_Handler>
		}
		/* USER CODE BEGIN USART2_Init 2 */

		/* USER CODE END USART2_Init 2 */

	}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	200003ac 	.word	0x200003ac
 8002370:	40004400 	.word	0x40004400

08002374 <MX_GPIO_Init>:
	/**
	 * @brief GPIO Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_GPIO_Init(void) {
 8002374:	b580      	push	{r7, lr}
 8002376:	b08a      	sub	sp, #40	; 0x28
 8002378:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800237a:	f107 0314 	add.w	r3, r7, #20
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	609a      	str	r2, [r3, #8]
 8002386:	60da      	str	r2, [r3, #12]
 8002388:	611a      	str	r2, [r3, #16]

		/* GPIO Ports Clock Enable */
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	4b26      	ldr	r3, [pc, #152]	; (8002428 <MX_GPIO_Init+0xb4>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	4a25      	ldr	r2, [pc, #148]	; (8002428 <MX_GPIO_Init+0xb4>)
 8002394:	f043 0304 	orr.w	r3, r3, #4
 8002398:	6313      	str	r3, [r2, #48]	; 0x30
 800239a:	4b23      	ldr	r3, [pc, #140]	; (8002428 <MX_GPIO_Init+0xb4>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOH_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	4b1f      	ldr	r3, [pc, #124]	; (8002428 <MX_GPIO_Init+0xb4>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4a1e      	ldr	r2, [pc, #120]	; (8002428 <MX_GPIO_Init+0xb4>)
 80023b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
 80023b6:	4b1c      	ldr	r3, [pc, #112]	; (8002428 <MX_GPIO_Init+0xb4>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	4b18      	ldr	r3, [pc, #96]	; (8002428 <MX_GPIO_Init+0xb4>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	4a17      	ldr	r2, [pc, #92]	; (8002428 <MX_GPIO_Init+0xb4>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	6313      	str	r3, [r2, #48]	; 0x30
 80023d2:	4b15      	ldr	r3, [pc, #84]	; (8002428 <MX_GPIO_Init+0xb4>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	68bb      	ldr	r3, [r7, #8]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	4b11      	ldr	r3, [pc, #68]	; (8002428 <MX_GPIO_Init+0xb4>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	4a10      	ldr	r2, [pc, #64]	; (8002428 <MX_GPIO_Init+0xb4>)
 80023e8:	f043 0302 	orr.w	r3, r3, #2
 80023ec:	6313      	str	r3, [r2, #48]	; 0x30
 80023ee:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <MX_GPIO_Init+0xb4>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	607b      	str	r3, [r7, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2101      	movs	r1, #1
 80023fe:	480b      	ldr	r0, [pc, #44]	; (800242c <MX_GPIO_Init+0xb8>)
 8002400:	f000 ff14 	bl	800322c <HAL_GPIO_WritePin>

		/*Configure GPIO pin : DIR_Pin */
		GPIO_InitStruct.Pin = DIR_Pin;
 8002404:	2301      	movs	r3, #1
 8002406:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002408:	2301      	movs	r3, #1
 800240a:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002410:	2300      	movs	r3, #0
 8002412:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	4619      	mov	r1, r3
 800241a:	4804      	ldr	r0, [pc, #16]	; (800242c <MX_GPIO_Init+0xb8>)
 800241c:	f000 fd82 	bl	8002f24 <HAL_GPIO_Init>

	}
 8002420:	bf00      	nop
 8002422:	3728      	adds	r7, #40	; 0x28
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40023800 	.word	0x40023800
 800242c:	40020800 	.word	0x40020800

08002430 <__io_putchar>:

	/* USER CODE BEGIN 4 */

//giansimone, walter
	int __io_putchar(int ch) {
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8002438:	1d39      	adds	r1, r7, #4
 800243a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800243e:	2201      	movs	r2, #1
 8002440:	4803      	ldr	r0, [pc, #12]	; (8002450 <__io_putchar+0x20>)
 8002442:	f003 fe1a 	bl	800607a <HAL_UART_Transmit>
		return ch;
 8002446:	687b      	ldr	r3, [r7, #4]
	}
 8002448:	4618      	mov	r0, r3
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200003ac 	.word	0x200003ac
 8002454:	00000000 	.word	0x00000000

08002458 <HAL_TIM_PeriodElapsedCallback>:

	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
		if (htim == &htim11) {
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a23      	ldr	r2, [pc, #140]	; (80024f0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d139      	bne.n	80024dc <HAL_TIM_PeriodElapsedCallback+0x84>
			flag10_ms = 1;
 8002468:	4b22      	ldr	r3, [pc, #136]	; (80024f4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800246a:	2201      	movs	r2, #1
 800246c:	601a      	str	r2, [r3, #0]
			n++;
 800246e:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	3301      	adds	r3, #1
 8002474:	4a20      	ldr	r2, [pc, #128]	; (80024f8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002476:	6013      	str	r3, [r2, #0]
			n1++;
 8002478:	4b20      	ldr	r3, [pc, #128]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	3301      	adds	r3, #1
 800247e:	4a1f      	ldr	r2, [pc, #124]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002480:	6013      	str	r3, [r2, #0]
			//printf("n1: %d\r\n", n1);
			//printf("---------------------------\r\n");

			if (n1 == 200) {
 8002482:	4b1e      	ldr	r3, [pc, #120]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2bc8      	cmp	r3, #200	; 0xc8
 8002488:	d106      	bne.n	8002498 <HAL_TIM_PeriodElapsedCallback+0x40>
				raggio_riferimento = 0;
 800248a:	491d      	ldr	r1, [pc, #116]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800248c:	f04f 0200 	mov.w	r2, #0
 8002490:	f04f 0300 	mov.w	r3, #0
 8002494:	e9c1 2300 	strd	r2, r3, [r1]
				//printf("raggio_refIF: %f\r\n", raggio_riferimento);
				//n1 = 0;
			}

			if (n1 == 400) {
 8002498:	4b18      	ldr	r3, [pc, #96]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80024a0:	d105      	bne.n	80024ae <HAL_TIM_PeriodElapsedCallback+0x56>
				raggio_riferimento = -1.4;
 80024a2:	4917      	ldr	r1, [pc, #92]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80024a4:	a310      	add	r3, pc, #64	; (adr r3, 80024e8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80024a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024aa:	e9c1 2300 	strd	r2, r3, [r1]
				//printf("raggio_refIF: %f\r\n", raggio_riferimento);
				//n1 = 0;
			}

			if (n == 10) {
 80024ae:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2b0a      	cmp	r3, #10
 80024b4:	d112      	bne.n	80024dc <HAL_TIM_PeriodElapsedCallback+0x84>
				counts = TIM2->CNT;
 80024b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	461a      	mov	r2, r3
 80024be:	4b11      	ldr	r3, [pc, #68]	; (8002504 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80024c0:	601a      	str	r2, [r3, #0]
				flag_Tc = 1;
 80024c2:	4b11      	ldr	r3, [pc, #68]	; (8002508 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	601a      	str	r2, [r3, #0]
				TIM2->CNT = TIM2->ARR / 2;
 80024c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024d2:	085b      	lsrs	r3, r3, #1
 80024d4:	6253      	str	r3, [r2, #36]	; 0x24
				n = 0;
 80024d6:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
			}

		}
	}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	66666666 	.word	0x66666666
 80024ec:	bff66666 	.word	0xbff66666
 80024f0:	20000364 	.word	0x20000364
 80024f4:	20000484 	.word	0x20000484
 80024f8:	200003f0 	.word	0x200003f0
 80024fc:	200003f4 	.word	0x200003f4
 8002500:	20000028 	.word	0x20000028
 8002504:	2000046c 	.word	0x2000046c
 8002508:	20000468 	.word	0x20000468

0800250c <Error_Handler>:

	/**
	 * @brief  This function is executed in case of error occurrence.
	 * @retval None
	 */
	void Error_Handler(void) {
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002510:	b672      	cpsid	i
}
 8002512:	bf00      	nop
		/* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1) {
 8002514:	e7fe      	b.n	8002514 <Error_Handler+0x8>
	...

08002518 <servo_motor>:
#include "servo_motor.h"



void servo_motor(int angolo)
{
 8002518:	b5b0      	push	{r4, r5, r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
	float tic;
	tic = 0.02;
 8002520:	4b23      	ldr	r3, [pc, #140]	; (80025b0 <servo_motor+0x98>)
 8002522:	617b      	str	r3, [r7, #20]
			//(((1/(TIMER_CLOCK/PRESCALER))*1000);  //tic corrisponde a questo, bisogna provare se funziona
	  float ccr;
	  int conv_angolo;

	  if(angolo < MIN_ANGOLO)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f113 0f17 	cmn.w	r3, #23
 800252a:	da03      	bge.n	8002534 <servo_motor+0x1c>

		   angolo = MIN_ANGOLO;
 800252c:	f06f 0316 	mvn.w	r3, #22
 8002530:	607b      	str	r3, [r7, #4]
 8002532:	e004      	b.n	800253e <servo_motor+0x26>

	  else if (angolo > MAX_ANGOLO)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b17      	cmp	r3, #23
 8002538:	dd01      	ble.n	800253e <servo_motor+0x26>

		   angolo = MAX_ANGOLO;
 800253a:	2317      	movs	r3, #23
 800253c:	607b      	str	r3, [r7, #4]

	  conv_angolo = angolo + 92;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	335c      	adds	r3, #92	; 0x5c
 8002542:	613b      	str	r3, [r7, #16]

	  ccr=(((0.01111*conv_angolo)+0.5)/tic);
 8002544:	6938      	ldr	r0, [r7, #16]
 8002546:	f7fd fff5 	bl	8000534 <__aeabi_i2d>
 800254a:	a317      	add	r3, pc, #92	; (adr r3, 80025a8 <servo_motor+0x90>)
 800254c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002550:	f7fe f85a 	bl	8000608 <__aeabi_dmul>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	4b14      	ldr	r3, [pc, #80]	; (80025b4 <servo_motor+0x9c>)
 8002562:	f7fd fe9b 	bl	800029c <__adddf3>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	4614      	mov	r4, r2
 800256c:	461d      	mov	r5, r3
 800256e:	6978      	ldr	r0, [r7, #20]
 8002570:	f7fd fff2 	bl	8000558 <__aeabi_f2d>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4620      	mov	r0, r4
 800257a:	4629      	mov	r1, r5
 800257c:	f7fe f96e 	bl	800085c <__aeabi_ddiv>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4610      	mov	r0, r2
 8002586:	4619      	mov	r1, r3
 8002588:	f7fe fb36 	bl	8000bf8 <__aeabi_d2f>
 800258c:	4603      	mov	r3, r0
 800258e:	60fb      	str	r3, [r7, #12]
	  TIM1->CCR1=ccr;
 8002590:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <servo_motor+0xa0>)
 8002592:	edd7 7a03 	vldr	s15, [r7, #12]
 8002596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800259a:	ee17 2a90 	vmov	r2, s15
 800259e:	635a      	str	r2, [r3, #52]	; 0x34
	  //TIM1->CCR1 = 75;
	  //return ccr;

}
 80025a0:	bf00      	nop
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bdb0      	pop	{r4, r5, r7, pc}
 80025a8:	f544bb1b 	.word	0xf544bb1b
 80025ac:	3f86c0d6 	.word	0x3f86c0d6
 80025b0:	3ca3d70a 	.word	0x3ca3d70a
 80025b4:	3fe00000 	.word	0x3fe00000
 80025b8:	40010000 	.word	0x40010000

080025bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	607b      	str	r3, [r7, #4]
 80025c6:	4b10      	ldr	r3, [pc, #64]	; (8002608 <HAL_MspInit+0x4c>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	4a0f      	ldr	r2, [pc, #60]	; (8002608 <HAL_MspInit+0x4c>)
 80025cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025d0:	6453      	str	r3, [r2, #68]	; 0x44
 80025d2:	4b0d      	ldr	r3, [pc, #52]	; (8002608 <HAL_MspInit+0x4c>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025da:	607b      	str	r3, [r7, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	603b      	str	r3, [r7, #0]
 80025e2:	4b09      	ldr	r3, [pc, #36]	; (8002608 <HAL_MspInit+0x4c>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	4a08      	ldr	r2, [pc, #32]	; (8002608 <HAL_MspInit+0x4c>)
 80025e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ec:	6413      	str	r3, [r2, #64]	; 0x40
 80025ee:	4b06      	ldr	r3, [pc, #24]	; (8002608 <HAL_MspInit+0x4c>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f6:	603b      	str	r3, [r7, #0]
 80025f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025fa:	2007      	movs	r0, #7
 80025fc:	f000 fc50 	bl	8002ea0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002600:	bf00      	nop
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40023800 	.word	0x40023800

0800260c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08a      	sub	sp, #40	; 0x28
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	f107 0314 	add.w	r3, r7, #20
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a19      	ldr	r2, [pc, #100]	; (8002690 <HAL_I2C_MspInit+0x84>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d12b      	bne.n	8002686 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	4b18      	ldr	r3, [pc, #96]	; (8002694 <HAL_I2C_MspInit+0x88>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	4a17      	ldr	r2, [pc, #92]	; (8002694 <HAL_I2C_MspInit+0x88>)
 8002638:	f043 0302 	orr.w	r3, r3, #2
 800263c:	6313      	str	r3, [r2, #48]	; 0x30
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <HAL_I2C_MspInit+0x88>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_A_Pin|I2C_B_Pin;
 800264a:	23c0      	movs	r3, #192	; 0xc0
 800264c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800264e:	2312      	movs	r3, #18
 8002650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002656:	2303      	movs	r3, #3
 8002658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800265a:	2304      	movs	r3, #4
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800265e:	f107 0314 	add.w	r3, r7, #20
 8002662:	4619      	mov	r1, r3
 8002664:	480c      	ldr	r0, [pc, #48]	; (8002698 <HAL_I2C_MspInit+0x8c>)
 8002666:	f000 fc5d 	bl	8002f24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	4b09      	ldr	r3, [pc, #36]	; (8002694 <HAL_I2C_MspInit+0x88>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	4a08      	ldr	r2, [pc, #32]	; (8002694 <HAL_I2C_MspInit+0x88>)
 8002674:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002678:	6413      	str	r3, [r2, #64]	; 0x40
 800267a:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_I2C_MspInit+0x88>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002686:	bf00      	nop
 8002688:	3728      	adds	r7, #40	; 0x28
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40005400 	.word	0x40005400
 8002694:	40023800 	.word	0x40023800
 8002698:	40020400 	.word	0x40020400

0800269c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a2a      	ldr	r2, [pc, #168]	; (8002754 <HAL_TIM_Base_MspInit+0xb8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d11e      	bne.n	80026ec <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	4b29      	ldr	r3, [pc, #164]	; (8002758 <HAL_TIM_Base_MspInit+0xbc>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	4a28      	ldr	r2, [pc, #160]	; (8002758 <HAL_TIM_Base_MspInit+0xbc>)
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	6453      	str	r3, [r2, #68]	; 0x44
 80026be:	4b26      	ldr	r3, [pc, #152]	; (8002758 <HAL_TIM_Base_MspInit+0xbc>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2100      	movs	r1, #0
 80026ce:	2018      	movs	r0, #24
 80026d0:	f000 fbf1 	bl	8002eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80026d4:	2018      	movs	r0, #24
 80026d6:	f000 fc0a 	bl	8002eee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80026da:	2200      	movs	r2, #0
 80026dc:	2100      	movs	r1, #0
 80026de:	201a      	movs	r0, #26
 80026e0:	f000 fbe9 	bl	8002eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80026e4:	201a      	movs	r0, #26
 80026e6:	f000 fc02 	bl	8002eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80026ea:	e02e      	b.n	800274a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a1a      	ldr	r2, [pc, #104]	; (800275c <HAL_TIM_Base_MspInit+0xc0>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d10e      	bne.n	8002714 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	4b17      	ldr	r3, [pc, #92]	; (8002758 <HAL_TIM_Base_MspInit+0xbc>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	4a16      	ldr	r2, [pc, #88]	; (8002758 <HAL_TIM_Base_MspInit+0xbc>)
 8002700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002704:	6453      	str	r3, [r2, #68]	; 0x44
 8002706:	4b14      	ldr	r3, [pc, #80]	; (8002758 <HAL_TIM_Base_MspInit+0xbc>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270e:	613b      	str	r3, [r7, #16]
 8002710:	693b      	ldr	r3, [r7, #16]
}
 8002712:	e01a      	b.n	800274a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a11      	ldr	r2, [pc, #68]	; (8002760 <HAL_TIM_Base_MspInit+0xc4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d115      	bne.n	800274a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <HAL_TIM_Base_MspInit+0xbc>)
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	4a0c      	ldr	r2, [pc, #48]	; (8002758 <HAL_TIM_Base_MspInit+0xbc>)
 8002728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800272c:	6453      	str	r3, [r2, #68]	; 0x44
 800272e:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <HAL_TIM_Base_MspInit+0xbc>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800273a:	2200      	movs	r2, #0
 800273c:	2100      	movs	r1, #0
 800273e:	201a      	movs	r0, #26
 8002740:	f000 fbb9 	bl	8002eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002744:	201a      	movs	r0, #26
 8002746:	f000 fbd2 	bl	8002eee <HAL_NVIC_EnableIRQ>
}
 800274a:	bf00      	nop
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40010000 	.word	0x40010000
 8002758:	40023800 	.word	0x40023800
 800275c:	40014400 	.word	0x40014400
 8002760:	40014800 	.word	0x40014800

08002764 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08a      	sub	sp, #40	; 0x28
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276c:	f107 0314 	add.w	r3, r7, #20
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002784:	d12b      	bne.n	80027de <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	4b17      	ldr	r3, [pc, #92]	; (80027e8 <HAL_TIM_Encoder_MspInit+0x84>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	4a16      	ldr	r2, [pc, #88]	; (80027e8 <HAL_TIM_Encoder_MspInit+0x84>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	6413      	str	r3, [r2, #64]	; 0x40
 8002796:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <HAL_TIM_Encoder_MspInit+0x84>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <HAL_TIM_Encoder_MspInit+0x84>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	4a0f      	ldr	r2, [pc, #60]	; (80027e8 <HAL_TIM_Encoder_MspInit+0x84>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6313      	str	r3, [r2, #48]	; 0x30
 80027b2:	4b0d      	ldr	r3, [pc, #52]	; (80027e8 <HAL_TIM_Encoder_MspInit+0x84>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 80027be:	2303      	movs	r3, #3
 80027c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c2:	2302      	movs	r3, #2
 80027c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ca:	2300      	movs	r3, #0
 80027cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027ce:	2301      	movs	r3, #1
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d2:	f107 0314 	add.w	r3, r7, #20
 80027d6:	4619      	mov	r1, r3
 80027d8:	4804      	ldr	r0, [pc, #16]	; (80027ec <HAL_TIM_Encoder_MspInit+0x88>)
 80027da:	f000 fba3 	bl	8002f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80027de:	bf00      	nop
 80027e0:	3728      	adds	r7, #40	; 0x28
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40020000 	.word	0x40020000

080027f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08a      	sub	sp, #40	; 0x28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f8:	f107 0314 	add.w	r3, r7, #20
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	60da      	str	r2, [r3, #12]
 8002806:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a25      	ldr	r2, [pc, #148]	; (80028a4 <HAL_TIM_MspPostInit+0xb4>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d11f      	bne.n	8002852 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	4b24      	ldr	r3, [pc, #144]	; (80028a8 <HAL_TIM_MspPostInit+0xb8>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	4a23      	ldr	r2, [pc, #140]	; (80028a8 <HAL_TIM_MspPostInit+0xb8>)
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	6313      	str	r3, [r2, #48]	; 0x30
 8002822:	4b21      	ldr	r3, [pc, #132]	; (80028a8 <HAL_TIM_MspPostInit+0xb8>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_SERVO_Pin;
 800282e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002834:	2302      	movs	r3, #2
 8002836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283c:	2300      	movs	r3, #0
 800283e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002840:	2301      	movs	r3, #1
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_SERVO_GPIO_Port, &GPIO_InitStruct);
 8002844:	f107 0314 	add.w	r3, r7, #20
 8002848:	4619      	mov	r1, r3
 800284a:	4818      	ldr	r0, [pc, #96]	; (80028ac <HAL_TIM_MspPostInit+0xbc>)
 800284c:	f000 fb6a 	bl	8002f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8002850:	e023      	b.n	800289a <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM10)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a16      	ldr	r2, [pc, #88]	; (80028b0 <HAL_TIM_MspPostInit+0xc0>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d11e      	bne.n	800289a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800285c:	2300      	movs	r3, #0
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <HAL_TIM_MspPostInit+0xb8>)
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	4a10      	ldr	r2, [pc, #64]	; (80028a8 <HAL_TIM_MspPostInit+0xb8>)
 8002866:	f043 0302 	orr.w	r3, r3, #2
 800286a:	6313      	str	r3, [r2, #48]	; 0x30
 800286c:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <HAL_TIM_MspPostInit+0xb8>)
 800286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_MOTORE_Pin;
 8002878:	f44f 7380 	mov.w	r3, #256	; 0x100
 800287c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287e:	2302      	movs	r3, #2
 8002880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002886:	2300      	movs	r3, #0
 8002888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800288a:	2303      	movs	r3, #3
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_MOTORE_GPIO_Port, &GPIO_InitStruct);
 800288e:	f107 0314 	add.w	r3, r7, #20
 8002892:	4619      	mov	r1, r3
 8002894:	4807      	ldr	r0, [pc, #28]	; (80028b4 <HAL_TIM_MspPostInit+0xc4>)
 8002896:	f000 fb45 	bl	8002f24 <HAL_GPIO_Init>
}
 800289a:	bf00      	nop
 800289c:	3728      	adds	r7, #40	; 0x28
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40010000 	.word	0x40010000
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40020000 	.word	0x40020000
 80028b0:	40014400 	.word	0x40014400
 80028b4:	40020400 	.word	0x40020400

080028b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08a      	sub	sp, #40	; 0x28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c0:	f107 0314 	add.w	r3, r7, #20
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]
 80028ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a19      	ldr	r2, [pc, #100]	; (800293c <HAL_UART_MspInit+0x84>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d12b      	bne.n	8002932 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	4b18      	ldr	r3, [pc, #96]	; (8002940 <HAL_UART_MspInit+0x88>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	4a17      	ldr	r2, [pc, #92]	; (8002940 <HAL_UART_MspInit+0x88>)
 80028e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ea:	4b15      	ldr	r3, [pc, #84]	; (8002940 <HAL_UART_MspInit+0x88>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	4b11      	ldr	r3, [pc, #68]	; (8002940 <HAL_UART_MspInit+0x88>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	4a10      	ldr	r2, [pc, #64]	; (8002940 <HAL_UART_MspInit+0x88>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	6313      	str	r3, [r2, #48]	; 0x30
 8002906:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <HAL_UART_MspInit+0x88>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_1_Pin|USART_2_Pin;
 8002912:	230c      	movs	r3, #12
 8002914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002916:	2302      	movs	r3, #2
 8002918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291e:	2303      	movs	r3, #3
 8002920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002922:	2307      	movs	r3, #7
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002926:	f107 0314 	add.w	r3, r7, #20
 800292a:	4619      	mov	r1, r3
 800292c:	4805      	ldr	r0, [pc, #20]	; (8002944 <HAL_UART_MspInit+0x8c>)
 800292e:	f000 faf9 	bl	8002f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002932:	bf00      	nop
 8002934:	3728      	adds	r7, #40	; 0x28
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40004400 	.word	0x40004400
 8002940:	40023800 	.word	0x40023800
 8002944:	40020000 	.word	0x40020000

08002948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800294c:	e7fe      	b.n	800294c <NMI_Handler+0x4>

0800294e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800294e:	b480      	push	{r7}
 8002950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002952:	e7fe      	b.n	8002952 <HardFault_Handler+0x4>

08002954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002958:	e7fe      	b.n	8002958 <MemManage_Handler+0x4>

0800295a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800295a:	b480      	push	{r7}
 800295c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800295e:	e7fe      	b.n	800295e <BusFault_Handler+0x4>

08002960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002964:	e7fe      	b.n	8002964 <UsageFault_Handler+0x4>

08002966 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002966:	b480      	push	{r7}
 8002968:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800296a:	bf00      	nop
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002994:	f000 f970 	bl	8002c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002998:	bf00      	nop
 800299a:	bd80      	pop	{r7, pc}

0800299c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029a0:	4802      	ldr	r0, [pc, #8]	; (80029ac <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80029a2:	f002 fcc3 	bl	800532c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	2000028c 	.word	0x2000028c

080029b0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029b4:	4803      	ldr	r0, [pc, #12]	; (80029c4 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80029b6:	f002 fcb9 	bl	800532c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80029ba:	4803      	ldr	r0, [pc, #12]	; (80029c8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80029bc:	f002 fcb6 	bl	800532c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80029c0:	bf00      	nop
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	2000028c 	.word	0x2000028c
 80029c8:	20000364 	.word	0x20000364

080029cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
	return 1;
 80029d0:	2301      	movs	r3, #1
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <_kill>:

int _kill(int pid, int sig)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80029e6:	f003 febd 	bl	8006764 <__errno>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2216      	movs	r2, #22
 80029ee:	601a      	str	r2, [r3, #0]
	return -1;
 80029f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <_exit>:

void _exit (int status)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a04:	f04f 31ff 	mov.w	r1, #4294967295
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ffe7 	bl	80029dc <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a0e:	e7fe      	b.n	8002a0e <_exit+0x12>

08002a10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	len = 1;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	607b      	str	r3, [r7, #4]

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	e00a      	b.n	8002a3c <_read+0x2c>
	{
		*ptr++ = __io_getchar();
 8002a26:	f3af 8000 	nop.w
 8002a2a:	4601      	mov	r1, r0
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	1c5a      	adds	r2, r3, #1
 8002a30:	60ba      	str	r2, [r7, #8]
 8002a32:	b2ca      	uxtb	r2, r1
 8002a34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	dbf0      	blt.n	8002a26 <_read+0x16>
	}

return len;
 8002a44:	687b      	ldr	r3, [r7, #4]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	e009      	b.n	8002a74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	60ba      	str	r2, [r7, #8]
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff fce1 	bl	8002430 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	3301      	adds	r3, #1
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	dbf1      	blt.n	8002a60 <_write+0x12>
	}
	return len;
 8002a7c:	687b      	ldr	r3, [r7, #4]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <_close>:

int _close(int file)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
	return -1;
 8002a8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002aae:	605a      	str	r2, [r3, #4]
	return 0;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <_isatty>:

int _isatty(int file)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
	return 1;
 8002ac6:	2301      	movs	r3, #1
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
	return 0;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
	...

08002af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002af8:	4a14      	ldr	r2, [pc, #80]	; (8002b4c <_sbrk+0x5c>)
 8002afa:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <_sbrk+0x60>)
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b04:	4b13      	ldr	r3, [pc, #76]	; (8002b54 <_sbrk+0x64>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d102      	bne.n	8002b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b0c:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <_sbrk+0x64>)
 8002b0e:	4a12      	ldr	r2, [pc, #72]	; (8002b58 <_sbrk+0x68>)
 8002b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b12:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <_sbrk+0x64>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4413      	add	r3, r2
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d207      	bcs.n	8002b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b20:	f003 fe20 	bl	8006764 <__errno>
 8002b24:	4603      	mov	r3, r0
 8002b26:	220c      	movs	r2, #12
 8002b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2e:	e009      	b.n	8002b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b30:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <_sbrk+0x64>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b36:	4b07      	ldr	r3, [pc, #28]	; (8002b54 <_sbrk+0x64>)
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	4a05      	ldr	r2, [pc, #20]	; (8002b54 <_sbrk+0x64>)
 8002b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b42:	68fb      	ldr	r3, [r7, #12]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	20018000 	.word	0x20018000
 8002b50:	00000400 	.word	0x00000400
 8002b54:	20000490 	.word	0x20000490
 8002b58:	200004a8 	.word	0x200004a8

08002b5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <SystemInit+0x20>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b66:	4a05      	ldr	r2, [pc, #20]	; (8002b7c <SystemInit+0x20>)
 8002b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b84:	480d      	ldr	r0, [pc, #52]	; (8002bbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b86:	490e      	ldr	r1, [pc, #56]	; (8002bc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b88:	4a0e      	ldr	r2, [pc, #56]	; (8002bc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b8c:	e002      	b.n	8002b94 <LoopCopyDataInit>

08002b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b92:	3304      	adds	r3, #4

08002b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b98:	d3f9      	bcc.n	8002b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b9a:	4a0b      	ldr	r2, [pc, #44]	; (8002bc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b9c:	4c0b      	ldr	r4, [pc, #44]	; (8002bcc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ba0:	e001      	b.n	8002ba6 <LoopFillZerobss>

08002ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ba4:	3204      	adds	r2, #4

08002ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ba8:	d3fb      	bcc.n	8002ba2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002baa:	f7ff ffd7 	bl	8002b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bae:	f003 fddf 	bl	8006770 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bb2:	f7fe fec1 	bl	8001938 <main>
  bx  lr    
 8002bb6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bb8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bc0:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8002bc4:	0800b98c 	.word	0x0800b98c
  ldr r2, =_sbss
 8002bc8:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8002bcc:	200004a8 	.word	0x200004a8

08002bd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bd0:	e7fe      	b.n	8002bd0 <ADC_IRQHandler>
	...

08002bd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bd8:	4b0e      	ldr	r3, [pc, #56]	; (8002c14 <HAL_Init+0x40>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a0d      	ldr	r2, [pc, #52]	; (8002c14 <HAL_Init+0x40>)
 8002bde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002be2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_Init+0x40>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <HAL_Init+0x40>)
 8002bea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bf0:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <HAL_Init+0x40>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a07      	ldr	r2, [pc, #28]	; (8002c14 <HAL_Init+0x40>)
 8002bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bfc:	2003      	movs	r0, #3
 8002bfe:	f000 f94f 	bl	8002ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c02:	2000      	movs	r0, #0
 8002c04:	f000 f808 	bl	8002c18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c08:	f7ff fcd8 	bl	80025bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40023c00 	.word	0x40023c00

08002c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c20:	4b12      	ldr	r3, [pc, #72]	; (8002c6c <HAL_InitTick+0x54>)
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <HAL_InitTick+0x58>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	4619      	mov	r1, r3
 8002c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 f967 	bl	8002f0a <HAL_SYSTICK_Config>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e00e      	b.n	8002c64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b0f      	cmp	r3, #15
 8002c4a:	d80a      	bhi.n	8002c62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	f04f 30ff 	mov.w	r0, #4294967295
 8002c54:	f000 f92f 	bl	8002eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c58:	4a06      	ldr	r2, [pc, #24]	; (8002c74 <HAL_InitTick+0x5c>)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	e000      	b.n	8002c64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	20000034 	.word	0x20000034
 8002c70:	2000003c 	.word	0x2000003c
 8002c74:	20000038 	.word	0x20000038

08002c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c7c:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_IncTick+0x20>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	461a      	mov	r2, r3
 8002c82:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <HAL_IncTick+0x24>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4413      	add	r3, r2
 8002c88:	4a04      	ldr	r2, [pc, #16]	; (8002c9c <HAL_IncTick+0x24>)
 8002c8a:	6013      	str	r3, [r2, #0]
}
 8002c8c:	bf00      	nop
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	2000003c 	.word	0x2000003c
 8002c9c:	20000494 	.word	0x20000494

08002ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ca4:	4b03      	ldr	r3, [pc, #12]	; (8002cb4 <HAL_GetTick+0x14>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	20000494 	.word	0x20000494

08002cb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cc0:	f7ff ffee 	bl	8002ca0 <HAL_GetTick>
 8002cc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd0:	d005      	beq.n	8002cde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cd2:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <HAL_Delay+0x44>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4413      	add	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cde:	bf00      	nop
 8002ce0:	f7ff ffde 	bl	8002ca0 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d8f7      	bhi.n	8002ce0 <HAL_Delay+0x28>
  {
  }
}
 8002cf0:	bf00      	nop
 8002cf2:	bf00      	nop
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	2000003c 	.word	0x2000003c

08002d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d10:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <__NVIC_SetPriorityGrouping+0x44>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d32:	4a04      	ldr	r2, [pc, #16]	; (8002d44 <__NVIC_SetPriorityGrouping+0x44>)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	60d3      	str	r3, [r2, #12]
}
 8002d38:	bf00      	nop
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	e000ed00 	.word	0xe000ed00

08002d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d4c:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <__NVIC_GetPriorityGrouping+0x18>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	0a1b      	lsrs	r3, r3, #8
 8002d52:	f003 0307 	and.w	r3, r3, #7
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	e000ed00 	.word	0xe000ed00

08002d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	db0b      	blt.n	8002d8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	f003 021f 	and.w	r2, r3, #31
 8002d7c:	4907      	ldr	r1, [pc, #28]	; (8002d9c <__NVIC_EnableIRQ+0x38>)
 8002d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	2001      	movs	r0, #1
 8002d86:	fa00 f202 	lsl.w	r2, r0, r2
 8002d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	e000e100 	.word	0xe000e100

08002da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	6039      	str	r1, [r7, #0]
 8002daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	db0a      	blt.n	8002dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	490c      	ldr	r1, [pc, #48]	; (8002dec <__NVIC_SetPriority+0x4c>)
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	0112      	lsls	r2, r2, #4
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dc8:	e00a      	b.n	8002de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	4908      	ldr	r1, [pc, #32]	; (8002df0 <__NVIC_SetPriority+0x50>)
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	3b04      	subs	r3, #4
 8002dd8:	0112      	lsls	r2, r2, #4
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	440b      	add	r3, r1
 8002dde:	761a      	strb	r2, [r3, #24]
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	e000e100 	.word	0xe000e100
 8002df0:	e000ed00 	.word	0xe000ed00

08002df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b089      	sub	sp, #36	; 0x24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f1c3 0307 	rsb	r3, r3, #7
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	bf28      	it	cs
 8002e12:	2304      	movcs	r3, #4
 8002e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	3304      	adds	r3, #4
 8002e1a:	2b06      	cmp	r3, #6
 8002e1c:	d902      	bls.n	8002e24 <NVIC_EncodePriority+0x30>
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	3b03      	subs	r3, #3
 8002e22:	e000      	b.n	8002e26 <NVIC_EncodePriority+0x32>
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e28:	f04f 32ff 	mov.w	r2, #4294967295
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43da      	mvns	r2, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	401a      	ands	r2, r3
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	fa01 f303 	lsl.w	r3, r1, r3
 8002e46:	43d9      	mvns	r1, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e4c:	4313      	orrs	r3, r2
         );
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3724      	adds	r7, #36	; 0x24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
	...

08002e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e6c:	d301      	bcc.n	8002e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e00f      	b.n	8002e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e72:	4a0a      	ldr	r2, [pc, #40]	; (8002e9c <SysTick_Config+0x40>)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e7a:	210f      	movs	r1, #15
 8002e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e80:	f7ff ff8e 	bl	8002da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e84:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <SysTick_Config+0x40>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e8a:	4b04      	ldr	r3, [pc, #16]	; (8002e9c <SysTick_Config+0x40>)
 8002e8c:	2207      	movs	r2, #7
 8002e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	e000e010 	.word	0xe000e010

08002ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7ff ff29 	bl	8002d00 <__NVIC_SetPriorityGrouping>
}
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b086      	sub	sp, #24
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	607a      	str	r2, [r7, #4]
 8002ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ec8:	f7ff ff3e 	bl	8002d48 <__NVIC_GetPriorityGrouping>
 8002ecc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	68b9      	ldr	r1, [r7, #8]
 8002ed2:	6978      	ldr	r0, [r7, #20]
 8002ed4:	f7ff ff8e 	bl	8002df4 <NVIC_EncodePriority>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ede:	4611      	mov	r1, r2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff ff5d 	bl	8002da0 <__NVIC_SetPriority>
}
 8002ee6:	bf00      	nop
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b082      	sub	sp, #8
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff ff31 	bl	8002d64 <__NVIC_EnableIRQ>
}
 8002f02:	bf00      	nop
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b082      	sub	sp, #8
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff ffa2 	bl	8002e5c <SysTick_Config>
 8002f18:	4603      	mov	r3, r0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
	...

08002f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b089      	sub	sp, #36	; 0x24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61fb      	str	r3, [r7, #28]
 8002f3e:	e159      	b.n	80031f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f40:	2201      	movs	r2, #1
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	4013      	ands	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	f040 8148 	bne.w	80031ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d005      	beq.n	8002f76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d130      	bne.n	8002fd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	2203      	movs	r2, #3
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43db      	mvns	r3, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fac:	2201      	movs	r2, #1
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	f003 0201 	and.w	r2, r3, #1
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	2b03      	cmp	r3, #3
 8002fe2:	d017      	beq.n	8003014 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	2203      	movs	r2, #3
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d123      	bne.n	8003068 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	08da      	lsrs	r2, r3, #3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3208      	adds	r2, #8
 8003028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800302c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	220f      	movs	r2, #15
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4313      	orrs	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	08da      	lsrs	r2, r3, #3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	3208      	adds	r2, #8
 8003062:	69b9      	ldr	r1, [r7, #24]
 8003064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	2203      	movs	r2, #3
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4013      	ands	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f003 0203 	and.w	r2, r3, #3
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4313      	orrs	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 80a2 	beq.w	80031ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030aa:	2300      	movs	r3, #0
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	4b57      	ldr	r3, [pc, #348]	; (800320c <HAL_GPIO_Init+0x2e8>)
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	4a56      	ldr	r2, [pc, #344]	; (800320c <HAL_GPIO_Init+0x2e8>)
 80030b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030b8:	6453      	str	r3, [r2, #68]	; 0x44
 80030ba:	4b54      	ldr	r3, [pc, #336]	; (800320c <HAL_GPIO_Init+0x2e8>)
 80030bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030c6:	4a52      	ldr	r2, [pc, #328]	; (8003210 <HAL_GPIO_Init+0x2ec>)
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	089b      	lsrs	r3, r3, #2
 80030cc:	3302      	adds	r3, #2
 80030ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	220f      	movs	r2, #15
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	43db      	mvns	r3, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4013      	ands	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a49      	ldr	r2, [pc, #292]	; (8003214 <HAL_GPIO_Init+0x2f0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d019      	beq.n	8003126 <HAL_GPIO_Init+0x202>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a48      	ldr	r2, [pc, #288]	; (8003218 <HAL_GPIO_Init+0x2f4>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d013      	beq.n	8003122 <HAL_GPIO_Init+0x1fe>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a47      	ldr	r2, [pc, #284]	; (800321c <HAL_GPIO_Init+0x2f8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00d      	beq.n	800311e <HAL_GPIO_Init+0x1fa>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a46      	ldr	r2, [pc, #280]	; (8003220 <HAL_GPIO_Init+0x2fc>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d007      	beq.n	800311a <HAL_GPIO_Init+0x1f6>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a45      	ldr	r2, [pc, #276]	; (8003224 <HAL_GPIO_Init+0x300>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d101      	bne.n	8003116 <HAL_GPIO_Init+0x1f2>
 8003112:	2304      	movs	r3, #4
 8003114:	e008      	b.n	8003128 <HAL_GPIO_Init+0x204>
 8003116:	2307      	movs	r3, #7
 8003118:	e006      	b.n	8003128 <HAL_GPIO_Init+0x204>
 800311a:	2303      	movs	r3, #3
 800311c:	e004      	b.n	8003128 <HAL_GPIO_Init+0x204>
 800311e:	2302      	movs	r3, #2
 8003120:	e002      	b.n	8003128 <HAL_GPIO_Init+0x204>
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <HAL_GPIO_Init+0x204>
 8003126:	2300      	movs	r3, #0
 8003128:	69fa      	ldr	r2, [r7, #28]
 800312a:	f002 0203 	and.w	r2, r2, #3
 800312e:	0092      	lsls	r2, r2, #2
 8003130:	4093      	lsls	r3, r2
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	4313      	orrs	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003138:	4935      	ldr	r1, [pc, #212]	; (8003210 <HAL_GPIO_Init+0x2ec>)
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	089b      	lsrs	r3, r3, #2
 800313e:	3302      	adds	r3, #2
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003146:	4b38      	ldr	r3, [pc, #224]	; (8003228 <HAL_GPIO_Init+0x304>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	43db      	mvns	r3, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4013      	ands	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	4313      	orrs	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800316a:	4a2f      	ldr	r2, [pc, #188]	; (8003228 <HAL_GPIO_Init+0x304>)
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003170:	4b2d      	ldr	r3, [pc, #180]	; (8003228 <HAL_GPIO_Init+0x304>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	43db      	mvns	r3, r3
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	4013      	ands	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4313      	orrs	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003194:	4a24      	ldr	r2, [pc, #144]	; (8003228 <HAL_GPIO_Init+0x304>)
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800319a:	4b23      	ldr	r3, [pc, #140]	; (8003228 <HAL_GPIO_Init+0x304>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	43db      	mvns	r3, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4013      	ands	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031be:	4a1a      	ldr	r2, [pc, #104]	; (8003228 <HAL_GPIO_Init+0x304>)
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031c4:	4b18      	ldr	r3, [pc, #96]	; (8003228 <HAL_GPIO_Init+0x304>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	43db      	mvns	r3, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4013      	ands	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031e8:	4a0f      	ldr	r2, [pc, #60]	; (8003228 <HAL_GPIO_Init+0x304>)
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	3301      	adds	r3, #1
 80031f2:	61fb      	str	r3, [r7, #28]
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	2b0f      	cmp	r3, #15
 80031f8:	f67f aea2 	bls.w	8002f40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031fc:	bf00      	nop
 80031fe:	bf00      	nop
 8003200:	3724      	adds	r7, #36	; 0x24
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	40023800 	.word	0x40023800
 8003210:	40013800 	.word	0x40013800
 8003214:	40020000 	.word	0x40020000
 8003218:	40020400 	.word	0x40020400
 800321c:	40020800 	.word	0x40020800
 8003220:	40020c00 	.word	0x40020c00
 8003224:	40021000 	.word	0x40021000
 8003228:	40013c00 	.word	0x40013c00

0800322c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	807b      	strh	r3, [r7, #2]
 8003238:	4613      	mov	r3, r2
 800323a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800323c:	787b      	ldrb	r3, [r7, #1]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003242:	887a      	ldrh	r2, [r7, #2]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003248:	e003      	b.n	8003252 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800324a:	887b      	ldrh	r3, [r7, #2]
 800324c:	041a      	lsls	r2, r3, #16
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	619a      	str	r2, [r3, #24]
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
	...

08003260 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e12b      	b.n	80034ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d106      	bne.n	800328c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff f9c0 	bl	800260c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2224      	movs	r2, #36	; 0x24
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0201 	bic.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032c4:	f001 fd1a 	bl	8004cfc <HAL_RCC_GetPCLK1Freq>
 80032c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	4a81      	ldr	r2, [pc, #516]	; (80034d4 <HAL_I2C_Init+0x274>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d807      	bhi.n	80032e4 <HAL_I2C_Init+0x84>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4a80      	ldr	r2, [pc, #512]	; (80034d8 <HAL_I2C_Init+0x278>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	bf94      	ite	ls
 80032dc:	2301      	movls	r3, #1
 80032de:	2300      	movhi	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	e006      	b.n	80032f2 <HAL_I2C_Init+0x92>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4a7d      	ldr	r2, [pc, #500]	; (80034dc <HAL_I2C_Init+0x27c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	bf94      	ite	ls
 80032ec:	2301      	movls	r3, #1
 80032ee:	2300      	movhi	r3, #0
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e0e7      	b.n	80034ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4a78      	ldr	r2, [pc, #480]	; (80034e0 <HAL_I2C_Init+0x280>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	0c9b      	lsrs	r3, r3, #18
 8003304:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	430a      	orrs	r2, r1
 8003318:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	4a6a      	ldr	r2, [pc, #424]	; (80034d4 <HAL_I2C_Init+0x274>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d802      	bhi.n	8003334 <HAL_I2C_Init+0xd4>
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	3301      	adds	r3, #1
 8003332:	e009      	b.n	8003348 <HAL_I2C_Init+0xe8>
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800333a:	fb02 f303 	mul.w	r3, r2, r3
 800333e:	4a69      	ldr	r2, [pc, #420]	; (80034e4 <HAL_I2C_Init+0x284>)
 8003340:	fba2 2303 	umull	r2, r3, r2, r3
 8003344:	099b      	lsrs	r3, r3, #6
 8003346:	3301      	adds	r3, #1
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6812      	ldr	r2, [r2, #0]
 800334c:	430b      	orrs	r3, r1
 800334e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800335a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	495c      	ldr	r1, [pc, #368]	; (80034d4 <HAL_I2C_Init+0x274>)
 8003364:	428b      	cmp	r3, r1
 8003366:	d819      	bhi.n	800339c <HAL_I2C_Init+0x13c>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	1e59      	subs	r1, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	fbb1 f3f3 	udiv	r3, r1, r3
 8003376:	1c59      	adds	r1, r3, #1
 8003378:	f640 73fc 	movw	r3, #4092	; 0xffc
 800337c:	400b      	ands	r3, r1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <HAL_I2C_Init+0x138>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	1e59      	subs	r1, r3, #1
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003390:	3301      	adds	r3, #1
 8003392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003396:	e051      	b.n	800343c <HAL_I2C_Init+0x1dc>
 8003398:	2304      	movs	r3, #4
 800339a:	e04f      	b.n	800343c <HAL_I2C_Init+0x1dc>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d111      	bne.n	80033c8 <HAL_I2C_Init+0x168>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	1e58      	subs	r0, r3, #1
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6859      	ldr	r1, [r3, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	440b      	add	r3, r1
 80033b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033b6:	3301      	adds	r3, #1
 80033b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033bc:	2b00      	cmp	r3, #0
 80033be:	bf0c      	ite	eq
 80033c0:	2301      	moveq	r3, #1
 80033c2:	2300      	movne	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	e012      	b.n	80033ee <HAL_I2C_Init+0x18e>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	1e58      	subs	r0, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6859      	ldr	r1, [r3, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	0099      	lsls	r1, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	fbb0 f3f3 	udiv	r3, r0, r3
 80033de:	3301      	adds	r3, #1
 80033e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	bf0c      	ite	eq
 80033e8:	2301      	moveq	r3, #1
 80033ea:	2300      	movne	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <HAL_I2C_Init+0x196>
 80033f2:	2301      	movs	r3, #1
 80033f4:	e022      	b.n	800343c <HAL_I2C_Init+0x1dc>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10e      	bne.n	800341c <HAL_I2C_Init+0x1bc>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	1e58      	subs	r0, r3, #1
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6859      	ldr	r1, [r3, #4]
 8003406:	460b      	mov	r3, r1
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	440b      	add	r3, r1
 800340c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003410:	3301      	adds	r3, #1
 8003412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800341a:	e00f      	b.n	800343c <HAL_I2C_Init+0x1dc>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	1e58      	subs	r0, r3, #1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6859      	ldr	r1, [r3, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	0099      	lsls	r1, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003432:	3301      	adds	r3, #1
 8003434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003438:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	6809      	ldr	r1, [r1, #0]
 8003440:	4313      	orrs	r3, r2
 8003442:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69da      	ldr	r2, [r3, #28]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800346a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6911      	ldr	r1, [r2, #16]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	68d2      	ldr	r2, [r2, #12]
 8003476:	4311      	orrs	r1, r2
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6812      	ldr	r2, [r2, #0]
 800347c:	430b      	orrs	r3, r1
 800347e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	695a      	ldr	r2, [r3, #20]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	000186a0 	.word	0x000186a0
 80034d8:	001e847f 	.word	0x001e847f
 80034dc:	003d08ff 	.word	0x003d08ff
 80034e0:	431bde83 	.word	0x431bde83
 80034e4:	10624dd3 	.word	0x10624dd3

080034e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b088      	sub	sp, #32
 80034ec:	af02      	add	r7, sp, #8
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	607a      	str	r2, [r7, #4]
 80034f2:	461a      	mov	r2, r3
 80034f4:	460b      	mov	r3, r1
 80034f6:	817b      	strh	r3, [r7, #10]
 80034f8:	4613      	mov	r3, r2
 80034fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034fc:	f7ff fbd0 	bl	8002ca0 <HAL_GetTick>
 8003500:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b20      	cmp	r3, #32
 800350c:	f040 80e0 	bne.w	80036d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	2319      	movs	r3, #25
 8003516:	2201      	movs	r2, #1
 8003518:	4970      	ldr	r1, [pc, #448]	; (80036dc <HAL_I2C_Master_Transmit+0x1f4>)
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 fda0 	bl	8004060 <I2C_WaitOnFlagUntilTimeout>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003526:	2302      	movs	r3, #2
 8003528:	e0d3      	b.n	80036d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003530:	2b01      	cmp	r3, #1
 8003532:	d101      	bne.n	8003538 <HAL_I2C_Master_Transmit+0x50>
 8003534:	2302      	movs	r3, #2
 8003536:	e0cc      	b.n	80036d2 <HAL_I2C_Master_Transmit+0x1ea>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b01      	cmp	r3, #1
 800354c:	d007      	beq.n	800355e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f042 0201 	orr.w	r2, r2, #1
 800355c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800356c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2221      	movs	r2, #33	; 0x21
 8003572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2210      	movs	r2, #16
 800357a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	893a      	ldrh	r2, [r7, #8]
 800358e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	4a50      	ldr	r2, [pc, #320]	; (80036e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800359e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035a0:	8979      	ldrh	r1, [r7, #10]
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	6a3a      	ldr	r2, [r7, #32]
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 fc0a 	bl	8003dc0 <I2C_MasterRequestWrite>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e08d      	b.n	80036d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035b6:	2300      	movs	r3, #0
 80035b8:	613b      	str	r3, [r7, #16]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	613b      	str	r3, [r7, #16]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	613b      	str	r3, [r7, #16]
 80035ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80035cc:	e066      	b.n	800369c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	6a39      	ldr	r1, [r7, #32]
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 fe1a 	bl	800420c <I2C_WaitOnTXEFlagUntilTimeout>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00d      	beq.n	80035fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d107      	bne.n	80035f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e06b      	b.n	80036d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	781a      	ldrb	r2, [r3, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003614:	b29b      	uxth	r3, r3
 8003616:	3b01      	subs	r3, #1
 8003618:	b29a      	uxth	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003622:	3b01      	subs	r3, #1
 8003624:	b29a      	uxth	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b04      	cmp	r3, #4
 8003636:	d11b      	bne.n	8003670 <HAL_I2C_Master_Transmit+0x188>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363c:	2b00      	cmp	r3, #0
 800363e:	d017      	beq.n	8003670 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	781a      	ldrb	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365a:	b29b      	uxth	r3, r3
 800365c:	3b01      	subs	r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	6a39      	ldr	r1, [r7, #32]
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 fe0a 	bl	800428e <I2C_WaitOnBTFFlagUntilTimeout>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00d      	beq.n	800369c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	2b04      	cmp	r3, #4
 8003686:	d107      	bne.n	8003698 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003696:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e01a      	b.n	80036d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d194      	bne.n	80035ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	e000      	b.n	80036d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036d0:	2302      	movs	r3, #2
  }
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	00100002 	.word	0x00100002
 80036e0:	ffff0000 	.word	0xffff0000

080036e4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08c      	sub	sp, #48	; 0x30
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	607a      	str	r2, [r7, #4]
 80036ee:	461a      	mov	r2, r3
 80036f0:	460b      	mov	r3, r1
 80036f2:	817b      	strh	r3, [r7, #10]
 80036f4:	4613      	mov	r3, r2
 80036f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036f8:	f7ff fad2 	bl	8002ca0 <HAL_GetTick>
 80036fc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b20      	cmp	r3, #32
 8003708:	f040 820b 	bne.w	8003b22 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	2319      	movs	r3, #25
 8003712:	2201      	movs	r2, #1
 8003714:	497c      	ldr	r1, [pc, #496]	; (8003908 <HAL_I2C_Master_Receive+0x224>)
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 fca2 	bl	8004060 <I2C_WaitOnFlagUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003722:	2302      	movs	r3, #2
 8003724:	e1fe      	b.n	8003b24 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_I2C_Master_Receive+0x50>
 8003730:	2302      	movs	r3, #2
 8003732:	e1f7      	b.n	8003b24 <HAL_I2C_Master_Receive+0x440>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b01      	cmp	r3, #1
 8003748:	d007      	beq.n	800375a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f042 0201 	orr.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003768:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2222      	movs	r2, #34	; 0x22
 800376e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2210      	movs	r2, #16
 8003776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	893a      	ldrh	r2, [r7, #8]
 800378a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003790:	b29a      	uxth	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4a5c      	ldr	r2, [pc, #368]	; (800390c <HAL_I2C_Master_Receive+0x228>)
 800379a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800379c:	8979      	ldrh	r1, [r7, #10]
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 fb8e 	bl	8003ec4 <I2C_MasterRequestRead>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e1b8      	b.n	8003b24 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d113      	bne.n	80037e2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ba:	2300      	movs	r3, #0
 80037bc:	623b      	str	r3, [r7, #32]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	623b      	str	r3, [r7, #32]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	623b      	str	r3, [r7, #32]
 80037ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	e18c      	b.n	8003afc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d11b      	bne.n	8003822 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	61fb      	str	r3, [r7, #28]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	61fb      	str	r3, [r7, #28]
 800380e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	e16c      	b.n	8003afc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003826:	2b02      	cmp	r3, #2
 8003828:	d11b      	bne.n	8003862 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003838:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003848:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800384a:	2300      	movs	r3, #0
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	61bb      	str	r3, [r7, #24]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	61bb      	str	r3, [r7, #24]
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	e14c      	b.n	8003afc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003870:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003872:	2300      	movs	r3, #0
 8003874:	617b      	str	r3, [r7, #20]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	617b      	str	r3, [r7, #20]
 8003886:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003888:	e138      	b.n	8003afc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388e:	2b03      	cmp	r3, #3
 8003890:	f200 80f1 	bhi.w	8003a76 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003898:	2b01      	cmp	r3, #1
 800389a:	d123      	bne.n	80038e4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800389c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800389e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 fd35 	bl	8004310 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e139      	b.n	8003b24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691a      	ldr	r2, [r3, #16]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038cc:	3b01      	subs	r3, #1
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d8:	b29b      	uxth	r3, r3
 80038da:	3b01      	subs	r3, #1
 80038dc:	b29a      	uxth	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038e2:	e10b      	b.n	8003afc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d14e      	bne.n	800398a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f2:	2200      	movs	r2, #0
 80038f4:	4906      	ldr	r1, [pc, #24]	; (8003910 <HAL_I2C_Master_Receive+0x22c>)
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 fbb2 	bl	8004060 <I2C_WaitOnFlagUntilTimeout>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d008      	beq.n	8003914 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e10e      	b.n	8003b24 <HAL_I2C_Master_Receive+0x440>
 8003906:	bf00      	nop
 8003908:	00100002 	.word	0x00100002
 800390c:	ffff0000 	.word	0xffff0000
 8003910:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003922:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691a      	ldr	r2, [r3, #16]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	1c5a      	adds	r2, r3, #1
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394c:	b29b      	uxth	r3, r3
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003988:	e0b8      	b.n	8003afc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003990:	2200      	movs	r2, #0
 8003992:	4966      	ldr	r1, [pc, #408]	; (8003b2c <HAL_I2C_Master_Receive+0x448>)
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 fb63 	bl	8004060 <I2C_WaitOnFlagUntilTimeout>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e0bf      	b.n	8003b24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691a      	ldr	r2, [r3, #16]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	1c5a      	adds	r2, r3, #1
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039dc:	b29b      	uxth	r3, r3
 80039de:	3b01      	subs	r3, #1
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ec:	2200      	movs	r2, #0
 80039ee:	494f      	ldr	r1, [pc, #316]	; (8003b2c <HAL_I2C_Master_Receive+0x448>)
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 fb35 	bl	8004060 <I2C_WaitOnFlagUntilTimeout>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e091      	b.n	8003b24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691a      	ldr	r2, [r3, #16]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	691a      	ldr	r2, [r3, #16]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a74:	e042      	b.n	8003afc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 fc48 	bl	8004310 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e04c      	b.n	8003b24 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	691a      	ldr	r2, [r3, #16]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d118      	bne.n	8003afc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	691a      	ldr	r2, [r3, #16]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f47f aec2 	bne.w	800388a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	e000      	b.n	8003b24 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003b22:	2302      	movs	r3, #2
  }
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3728      	adds	r7, #40	; 0x28
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	00010004 	.word	0x00010004

08003b30 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08a      	sub	sp, #40	; 0x28
 8003b34:	af02      	add	r7, sp, #8
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	607a      	str	r2, [r7, #4]
 8003b3a:	603b      	str	r3, [r7, #0]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003b40:	f7ff f8ae 	bl	8002ca0 <HAL_GetTick>
 8003b44:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	f040 8111 	bne.w	8003d7a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	2319      	movs	r3, #25
 8003b5e:	2201      	movs	r2, #1
 8003b60:	4988      	ldr	r1, [pc, #544]	; (8003d84 <HAL_I2C_IsDeviceReady+0x254>)
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 fa7c 	bl	8004060 <I2C_WaitOnFlagUntilTimeout>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e104      	b.n	8003d7c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_I2C_IsDeviceReady+0x50>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e0fd      	b.n	8003d7c <HAL_I2C_IsDeviceReady+0x24c>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d007      	beq.n	8003ba6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f042 0201 	orr.w	r2, r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2224      	movs	r2, #36	; 0x24
 8003bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4a70      	ldr	r2, [pc, #448]	; (8003d88 <HAL_I2C_IsDeviceReady+0x258>)
 8003bc8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bd8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 fa3a 	bl	8004060 <I2C_WaitOnFlagUntilTimeout>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00d      	beq.n	8003c0e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c00:	d103      	bne.n	8003c0a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c08:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e0b6      	b.n	8003d7c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c0e:	897b      	ldrh	r3, [r7, #10]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	461a      	mov	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c1c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003c1e:	f7ff f83f 	bl	8002ca0 <HAL_GetTick>
 8003c22:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	bf0c      	ite	eq
 8003c32:	2301      	moveq	r3, #1
 8003c34:	2300      	movne	r3, #0
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c48:	bf0c      	ite	eq
 8003c4a:	2301      	moveq	r3, #1
 8003c4c:	2300      	movne	r3, #0
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003c52:	e025      	b.n	8003ca0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c54:	f7ff f824 	bl	8002ca0 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d302      	bcc.n	8003c6a <HAL_I2C_IsDeviceReady+0x13a>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d103      	bne.n	8003c72 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	22a0      	movs	r2, #160	; 0xa0
 8003c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	bf0c      	ite	eq
 8003c80:	2301      	moveq	r3, #1
 8003c82:	2300      	movne	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c96:	bf0c      	ite	eq
 8003c98:	2301      	moveq	r3, #1
 8003c9a:	2300      	movne	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2ba0      	cmp	r3, #160	; 0xa0
 8003caa:	d005      	beq.n	8003cb8 <HAL_I2C_IsDeviceReady+0x188>
 8003cac:	7dfb      	ldrb	r3, [r7, #23]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d102      	bne.n	8003cb8 <HAL_I2C_IsDeviceReady+0x188>
 8003cb2:	7dbb      	ldrb	r3, [r7, #22]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0cd      	beq.n	8003c54 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d129      	bne.n	8003d22 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cdc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cde:	2300      	movs	r3, #0
 8003ce0:	613b      	str	r3, [r7, #16]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	613b      	str	r3, [r7, #16]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	2319      	movs	r3, #25
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	4921      	ldr	r1, [pc, #132]	; (8003d84 <HAL_I2C_IsDeviceReady+0x254>)
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 f9ae 	bl	8004060 <I2C_WaitOnFlagUntilTimeout>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e036      	b.n	8003d7c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	e02c      	b.n	8003d7c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d30:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d3a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	2319      	movs	r3, #25
 8003d42:	2201      	movs	r2, #1
 8003d44:	490f      	ldr	r1, [pc, #60]	; (8003d84 <HAL_I2C_IsDeviceReady+0x254>)
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 f98a 	bl	8004060 <I2C_WaitOnFlagUntilTimeout>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e012      	b.n	8003d7c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	f4ff af32 	bcc.w	8003bca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003d7a:	2302      	movs	r3, #2
  }
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3720      	adds	r7, #32
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	00100002 	.word	0x00100002
 8003d88:	ffff0000 	.word	0xffff0000

08003d8c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9a:	b2db      	uxtb	r3, r3
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b088      	sub	sp, #32
 8003dc4:	af02      	add	r7, sp, #8
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	607a      	str	r2, [r7, #4]
 8003dca:	603b      	str	r3, [r7, #0]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d006      	beq.n	8003dea <I2C_MasterRequestWrite+0x2a>
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d003      	beq.n	8003dea <I2C_MasterRequestWrite+0x2a>
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003de8:	d108      	bne.n	8003dfc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	e00b      	b.n	8003e14 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e00:	2b12      	cmp	r3, #18
 8003e02:	d107      	bne.n	8003e14 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 f91d 	bl	8004060 <I2C_WaitOnFlagUntilTimeout>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00d      	beq.n	8003e48 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e3a:	d103      	bne.n	8003e44 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e035      	b.n	8003eb4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e50:	d108      	bne.n	8003e64 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e52:	897b      	ldrh	r3, [r7, #10]
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	461a      	mov	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e60:	611a      	str	r2, [r3, #16]
 8003e62:	e01b      	b.n	8003e9c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e64:	897b      	ldrh	r3, [r7, #10]
 8003e66:	11db      	asrs	r3, r3, #7
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	f003 0306 	and.w	r3, r3, #6
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	f063 030f 	orn	r3, r3, #15
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	490e      	ldr	r1, [pc, #56]	; (8003ebc <I2C_MasterRequestWrite+0xfc>)
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 f943 	bl	800410e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e010      	b.n	8003eb4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e92:	897b      	ldrh	r3, [r7, #10]
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	4907      	ldr	r1, [pc, #28]	; (8003ec0 <I2C_MasterRequestWrite+0x100>)
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 f933 	bl	800410e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e000      	b.n	8003eb4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	00010008 	.word	0x00010008
 8003ec0:	00010002 	.word	0x00010002

08003ec4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b088      	sub	sp, #32
 8003ec8:	af02      	add	r7, sp, #8
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	607a      	str	r2, [r7, #4]
 8003ece:	603b      	str	r3, [r7, #0]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ee8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d006      	beq.n	8003efe <I2C_MasterRequestRead+0x3a>
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d003      	beq.n	8003efe <I2C_MasterRequestRead+0x3a>
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003efc:	d108      	bne.n	8003f10 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	e00b      	b.n	8003f28 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f14:	2b11      	cmp	r3, #17
 8003f16:	d107      	bne.n	8003f28 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 f893 	bl	8004060 <I2C_WaitOnFlagUntilTimeout>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00d      	beq.n	8003f5c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f4e:	d103      	bne.n	8003f58 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e079      	b.n	8004050 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f64:	d108      	bne.n	8003f78 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f66:	897b      	ldrh	r3, [r7, #10]
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	f043 0301 	orr.w	r3, r3, #1
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	611a      	str	r2, [r3, #16]
 8003f76:	e05f      	b.n	8004038 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f78:	897b      	ldrh	r3, [r7, #10]
 8003f7a:	11db      	asrs	r3, r3, #7
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	f003 0306 	and.w	r3, r3, #6
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	f063 030f 	orn	r3, r3, #15
 8003f88:	b2da      	uxtb	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	4930      	ldr	r1, [pc, #192]	; (8004058 <I2C_MasterRequestRead+0x194>)
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 f8b9 	bl	800410e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e054      	b.n	8004050 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003fa6:	897b      	ldrh	r3, [r7, #10]
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	4929      	ldr	r1, [pc, #164]	; (800405c <I2C_MasterRequestRead+0x198>)
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f000 f8a9 	bl	800410e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e044      	b.n	8004050 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	613b      	str	r3, [r7, #16]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	613b      	str	r3, [r7, #16]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	613b      	str	r3, [r7, #16]
 8003fda:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fea:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f000 f831 	bl	8004060 <I2C_WaitOnFlagUntilTimeout>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00d      	beq.n	8004020 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004012:	d103      	bne.n	800401c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f44f 7200 	mov.w	r2, #512	; 0x200
 800401a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e017      	b.n	8004050 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004020:	897b      	ldrh	r3, [r7, #10]
 8004022:	11db      	asrs	r3, r3, #7
 8004024:	b2db      	uxtb	r3, r3
 8004026:	f003 0306 	and.w	r3, r3, #6
 800402a:	b2db      	uxtb	r3, r3
 800402c:	f063 030e 	orn	r3, r3, #14
 8004030:	b2da      	uxtb	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	4907      	ldr	r1, [pc, #28]	; (800405c <I2C_MasterRequestRead+0x198>)
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 f865 	bl	800410e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e000      	b.n	8004050 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3718      	adds	r7, #24
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	00010008 	.word	0x00010008
 800405c:	00010002 	.word	0x00010002

08004060 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	4613      	mov	r3, r2
 800406e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004070:	e025      	b.n	80040be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004078:	d021      	beq.n	80040be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800407a:	f7fe fe11 	bl	8002ca0 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d302      	bcc.n	8004090 <I2C_WaitOnFlagUntilTimeout+0x30>
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d116      	bne.n	80040be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2220      	movs	r2, #32
 800409a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	f043 0220 	orr.w	r2, r3, #32
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e023      	b.n	8004106 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	0c1b      	lsrs	r3, r3, #16
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d10d      	bne.n	80040e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	43da      	mvns	r2, r3
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	4013      	ands	r3, r2
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	bf0c      	ite	eq
 80040da:	2301      	moveq	r3, #1
 80040dc:	2300      	movne	r3, #0
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	461a      	mov	r2, r3
 80040e2:	e00c      	b.n	80040fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	43da      	mvns	r2, r3
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	4013      	ands	r3, r2
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	bf0c      	ite	eq
 80040f6:	2301      	moveq	r3, #1
 80040f8:	2300      	movne	r3, #0
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	461a      	mov	r2, r3
 80040fe:	79fb      	ldrb	r3, [r7, #7]
 8004100:	429a      	cmp	r2, r3
 8004102:	d0b6      	beq.n	8004072 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b084      	sub	sp, #16
 8004112:	af00      	add	r7, sp, #0
 8004114:	60f8      	str	r0, [r7, #12]
 8004116:	60b9      	str	r1, [r7, #8]
 8004118:	607a      	str	r2, [r7, #4]
 800411a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800411c:	e051      	b.n	80041c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412c:	d123      	bne.n	8004176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800413c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004146:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2220      	movs	r2, #32
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	f043 0204 	orr.w	r2, r3, #4
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e046      	b.n	8004204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417c:	d021      	beq.n	80041c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800417e:	f7fe fd8f 	bl	8002ca0 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	429a      	cmp	r2, r3
 800418c:	d302      	bcc.n	8004194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d116      	bne.n	80041c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2220      	movs	r2, #32
 800419e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	f043 0220 	orr.w	r2, r3, #32
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e020      	b.n	8004204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	0c1b      	lsrs	r3, r3, #16
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d10c      	bne.n	80041e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	43da      	mvns	r2, r3
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4013      	ands	r3, r2
 80041d8:	b29b      	uxth	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	bf14      	ite	ne
 80041de:	2301      	movne	r3, #1
 80041e0:	2300      	moveq	r3, #0
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	e00b      	b.n	80041fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	43da      	mvns	r2, r3
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	4013      	ands	r3, r2
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	bf14      	ite	ne
 80041f8:	2301      	movne	r3, #1
 80041fa:	2300      	moveq	r3, #0
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d18d      	bne.n	800411e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004218:	e02d      	b.n	8004276 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 f8ce 	bl	80043bc <I2C_IsAcknowledgeFailed>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e02d      	b.n	8004286 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004230:	d021      	beq.n	8004276 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004232:	f7fe fd35 	bl	8002ca0 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	429a      	cmp	r2, r3
 8004240:	d302      	bcc.n	8004248 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d116      	bne.n	8004276 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2220      	movs	r2, #32
 8004252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	f043 0220 	orr.w	r2, r3, #32
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e007      	b.n	8004286 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004280:	2b80      	cmp	r3, #128	; 0x80
 8004282:	d1ca      	bne.n	800421a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b084      	sub	sp, #16
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800429a:	e02d      	b.n	80042f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f000 f88d 	bl	80043bc <I2C_IsAcknowledgeFailed>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e02d      	b.n	8004308 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b2:	d021      	beq.n	80042f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b4:	f7fe fcf4 	bl	8002ca0 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d302      	bcc.n	80042ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d116      	bne.n	80042f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e4:	f043 0220 	orr.w	r2, r3, #32
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e007      	b.n	8004308 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	f003 0304 	and.w	r3, r3, #4
 8004302:	2b04      	cmp	r3, #4
 8004304:	d1ca      	bne.n	800429c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800431c:	e042      	b.n	80043a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	f003 0310 	and.w	r3, r3, #16
 8004328:	2b10      	cmp	r3, #16
 800432a:	d119      	bne.n	8004360 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f06f 0210 	mvn.w	r2, #16
 8004334:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2220      	movs	r2, #32
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e029      	b.n	80043b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004360:	f7fe fc9e 	bl	8002ca0 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	429a      	cmp	r2, r3
 800436e:	d302      	bcc.n	8004376 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d116      	bne.n	80043a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	f043 0220 	orr.w	r2, r3, #32
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e007      	b.n	80043b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ae:	2b40      	cmp	r3, #64	; 0x40
 80043b0:	d1b5      	bne.n	800431e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d2:	d11b      	bne.n	800440c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	f043 0204 	orr.w	r2, r3, #4
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e000      	b.n	800440e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
	...

0800441c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e267      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d075      	beq.n	8004526 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800443a:	4b88      	ldr	r3, [pc, #544]	; (800465c <HAL_RCC_OscConfig+0x240>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f003 030c 	and.w	r3, r3, #12
 8004442:	2b04      	cmp	r3, #4
 8004444:	d00c      	beq.n	8004460 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004446:	4b85      	ldr	r3, [pc, #532]	; (800465c <HAL_RCC_OscConfig+0x240>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800444e:	2b08      	cmp	r3, #8
 8004450:	d112      	bne.n	8004478 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004452:	4b82      	ldr	r3, [pc, #520]	; (800465c <HAL_RCC_OscConfig+0x240>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800445a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800445e:	d10b      	bne.n	8004478 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004460:	4b7e      	ldr	r3, [pc, #504]	; (800465c <HAL_RCC_OscConfig+0x240>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d05b      	beq.n	8004524 <HAL_RCC_OscConfig+0x108>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d157      	bne.n	8004524 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e242      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004480:	d106      	bne.n	8004490 <HAL_RCC_OscConfig+0x74>
 8004482:	4b76      	ldr	r3, [pc, #472]	; (800465c <HAL_RCC_OscConfig+0x240>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a75      	ldr	r2, [pc, #468]	; (800465c <HAL_RCC_OscConfig+0x240>)
 8004488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	e01d      	b.n	80044cc <HAL_RCC_OscConfig+0xb0>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004498:	d10c      	bne.n	80044b4 <HAL_RCC_OscConfig+0x98>
 800449a:	4b70      	ldr	r3, [pc, #448]	; (800465c <HAL_RCC_OscConfig+0x240>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a6f      	ldr	r2, [pc, #444]	; (800465c <HAL_RCC_OscConfig+0x240>)
 80044a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	4b6d      	ldr	r3, [pc, #436]	; (800465c <HAL_RCC_OscConfig+0x240>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a6c      	ldr	r2, [pc, #432]	; (800465c <HAL_RCC_OscConfig+0x240>)
 80044ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	e00b      	b.n	80044cc <HAL_RCC_OscConfig+0xb0>
 80044b4:	4b69      	ldr	r3, [pc, #420]	; (800465c <HAL_RCC_OscConfig+0x240>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a68      	ldr	r2, [pc, #416]	; (800465c <HAL_RCC_OscConfig+0x240>)
 80044ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	4b66      	ldr	r3, [pc, #408]	; (800465c <HAL_RCC_OscConfig+0x240>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a65      	ldr	r2, [pc, #404]	; (800465c <HAL_RCC_OscConfig+0x240>)
 80044c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d013      	beq.n	80044fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d4:	f7fe fbe4 	bl	8002ca0 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044dc:	f7fe fbe0 	bl	8002ca0 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b64      	cmp	r3, #100	; 0x64
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e207      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ee:	4b5b      	ldr	r3, [pc, #364]	; (800465c <HAL_RCC_OscConfig+0x240>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f0      	beq.n	80044dc <HAL_RCC_OscConfig+0xc0>
 80044fa:	e014      	b.n	8004526 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fc:	f7fe fbd0 	bl	8002ca0 <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004504:	f7fe fbcc 	bl	8002ca0 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b64      	cmp	r3, #100	; 0x64
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e1f3      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004516:	4b51      	ldr	r3, [pc, #324]	; (800465c <HAL_RCC_OscConfig+0x240>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f0      	bne.n	8004504 <HAL_RCC_OscConfig+0xe8>
 8004522:	e000      	b.n	8004526 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d063      	beq.n	80045fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004532:	4b4a      	ldr	r3, [pc, #296]	; (800465c <HAL_RCC_OscConfig+0x240>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 030c 	and.w	r3, r3, #12
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00b      	beq.n	8004556 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800453e:	4b47      	ldr	r3, [pc, #284]	; (800465c <HAL_RCC_OscConfig+0x240>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004546:	2b08      	cmp	r3, #8
 8004548:	d11c      	bne.n	8004584 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800454a:	4b44      	ldr	r3, [pc, #272]	; (800465c <HAL_RCC_OscConfig+0x240>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d116      	bne.n	8004584 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004556:	4b41      	ldr	r3, [pc, #260]	; (800465c <HAL_RCC_OscConfig+0x240>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d005      	beq.n	800456e <HAL_RCC_OscConfig+0x152>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d001      	beq.n	800456e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e1c7      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800456e:	4b3b      	ldr	r3, [pc, #236]	; (800465c <HAL_RCC_OscConfig+0x240>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	4937      	ldr	r1, [pc, #220]	; (800465c <HAL_RCC_OscConfig+0x240>)
 800457e:	4313      	orrs	r3, r2
 8004580:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004582:	e03a      	b.n	80045fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d020      	beq.n	80045ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800458c:	4b34      	ldr	r3, [pc, #208]	; (8004660 <HAL_RCC_OscConfig+0x244>)
 800458e:	2201      	movs	r2, #1
 8004590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004592:	f7fe fb85 	bl	8002ca0 <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800459a:	f7fe fb81 	bl	8002ca0 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e1a8      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ac:	4b2b      	ldr	r3, [pc, #172]	; (800465c <HAL_RCC_OscConfig+0x240>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0f0      	beq.n	800459a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b8:	4b28      	ldr	r3, [pc, #160]	; (800465c <HAL_RCC_OscConfig+0x240>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	4925      	ldr	r1, [pc, #148]	; (800465c <HAL_RCC_OscConfig+0x240>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	600b      	str	r3, [r1, #0]
 80045cc:	e015      	b.n	80045fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ce:	4b24      	ldr	r3, [pc, #144]	; (8004660 <HAL_RCC_OscConfig+0x244>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d4:	f7fe fb64 	bl	8002ca0 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045dc:	f7fe fb60 	bl	8002ca0 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e187      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ee:	4b1b      	ldr	r3, [pc, #108]	; (800465c <HAL_RCC_OscConfig+0x240>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1f0      	bne.n	80045dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0308 	and.w	r3, r3, #8
 8004602:	2b00      	cmp	r3, #0
 8004604:	d036      	beq.n	8004674 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d016      	beq.n	800463c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800460e:	4b15      	ldr	r3, [pc, #84]	; (8004664 <HAL_RCC_OscConfig+0x248>)
 8004610:	2201      	movs	r2, #1
 8004612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004614:	f7fe fb44 	bl	8002ca0 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800461c:	f7fe fb40 	bl	8002ca0 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e167      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800462e:	4b0b      	ldr	r3, [pc, #44]	; (800465c <HAL_RCC_OscConfig+0x240>)
 8004630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0f0      	beq.n	800461c <HAL_RCC_OscConfig+0x200>
 800463a:	e01b      	b.n	8004674 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800463c:	4b09      	ldr	r3, [pc, #36]	; (8004664 <HAL_RCC_OscConfig+0x248>)
 800463e:	2200      	movs	r2, #0
 8004640:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004642:	f7fe fb2d 	bl	8002ca0 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004648:	e00e      	b.n	8004668 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800464a:	f7fe fb29 	bl	8002ca0 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d907      	bls.n	8004668 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e150      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
 800465c:	40023800 	.word	0x40023800
 8004660:	42470000 	.word	0x42470000
 8004664:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004668:	4b88      	ldr	r3, [pc, #544]	; (800488c <HAL_RCC_OscConfig+0x470>)
 800466a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1ea      	bne.n	800464a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 8097 	beq.w	80047b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004682:	2300      	movs	r3, #0
 8004684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004686:	4b81      	ldr	r3, [pc, #516]	; (800488c <HAL_RCC_OscConfig+0x470>)
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10f      	bne.n	80046b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004692:	2300      	movs	r3, #0
 8004694:	60bb      	str	r3, [r7, #8]
 8004696:	4b7d      	ldr	r3, [pc, #500]	; (800488c <HAL_RCC_OscConfig+0x470>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	4a7c      	ldr	r2, [pc, #496]	; (800488c <HAL_RCC_OscConfig+0x470>)
 800469c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a0:	6413      	str	r3, [r2, #64]	; 0x40
 80046a2:	4b7a      	ldr	r3, [pc, #488]	; (800488c <HAL_RCC_OscConfig+0x470>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046aa:	60bb      	str	r3, [r7, #8]
 80046ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ae:	2301      	movs	r3, #1
 80046b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b2:	4b77      	ldr	r3, [pc, #476]	; (8004890 <HAL_RCC_OscConfig+0x474>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d118      	bne.n	80046f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046be:	4b74      	ldr	r3, [pc, #464]	; (8004890 <HAL_RCC_OscConfig+0x474>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a73      	ldr	r2, [pc, #460]	; (8004890 <HAL_RCC_OscConfig+0x474>)
 80046c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ca:	f7fe fae9 	bl	8002ca0 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046d2:	f7fe fae5 	bl	8002ca0 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e10c      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e4:	4b6a      	ldr	r3, [pc, #424]	; (8004890 <HAL_RCC_OscConfig+0x474>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f0      	beq.n	80046d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d106      	bne.n	8004706 <HAL_RCC_OscConfig+0x2ea>
 80046f8:	4b64      	ldr	r3, [pc, #400]	; (800488c <HAL_RCC_OscConfig+0x470>)
 80046fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fc:	4a63      	ldr	r2, [pc, #396]	; (800488c <HAL_RCC_OscConfig+0x470>)
 80046fe:	f043 0301 	orr.w	r3, r3, #1
 8004702:	6713      	str	r3, [r2, #112]	; 0x70
 8004704:	e01c      	b.n	8004740 <HAL_RCC_OscConfig+0x324>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	2b05      	cmp	r3, #5
 800470c:	d10c      	bne.n	8004728 <HAL_RCC_OscConfig+0x30c>
 800470e:	4b5f      	ldr	r3, [pc, #380]	; (800488c <HAL_RCC_OscConfig+0x470>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004712:	4a5e      	ldr	r2, [pc, #376]	; (800488c <HAL_RCC_OscConfig+0x470>)
 8004714:	f043 0304 	orr.w	r3, r3, #4
 8004718:	6713      	str	r3, [r2, #112]	; 0x70
 800471a:	4b5c      	ldr	r3, [pc, #368]	; (800488c <HAL_RCC_OscConfig+0x470>)
 800471c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471e:	4a5b      	ldr	r2, [pc, #364]	; (800488c <HAL_RCC_OscConfig+0x470>)
 8004720:	f043 0301 	orr.w	r3, r3, #1
 8004724:	6713      	str	r3, [r2, #112]	; 0x70
 8004726:	e00b      	b.n	8004740 <HAL_RCC_OscConfig+0x324>
 8004728:	4b58      	ldr	r3, [pc, #352]	; (800488c <HAL_RCC_OscConfig+0x470>)
 800472a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472c:	4a57      	ldr	r2, [pc, #348]	; (800488c <HAL_RCC_OscConfig+0x470>)
 800472e:	f023 0301 	bic.w	r3, r3, #1
 8004732:	6713      	str	r3, [r2, #112]	; 0x70
 8004734:	4b55      	ldr	r3, [pc, #340]	; (800488c <HAL_RCC_OscConfig+0x470>)
 8004736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004738:	4a54      	ldr	r2, [pc, #336]	; (800488c <HAL_RCC_OscConfig+0x470>)
 800473a:	f023 0304 	bic.w	r3, r3, #4
 800473e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d015      	beq.n	8004774 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004748:	f7fe faaa 	bl	8002ca0 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800474e:	e00a      	b.n	8004766 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004750:	f7fe faa6 	bl	8002ca0 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	f241 3288 	movw	r2, #5000	; 0x1388
 800475e:	4293      	cmp	r3, r2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e0cb      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004766:	4b49      	ldr	r3, [pc, #292]	; (800488c <HAL_RCC_OscConfig+0x470>)
 8004768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0ee      	beq.n	8004750 <HAL_RCC_OscConfig+0x334>
 8004772:	e014      	b.n	800479e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004774:	f7fe fa94 	bl	8002ca0 <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800477a:	e00a      	b.n	8004792 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800477c:	f7fe fa90 	bl	8002ca0 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	f241 3288 	movw	r2, #5000	; 0x1388
 800478a:	4293      	cmp	r3, r2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e0b5      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004792:	4b3e      	ldr	r3, [pc, #248]	; (800488c <HAL_RCC_OscConfig+0x470>)
 8004794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1ee      	bne.n	800477c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800479e:	7dfb      	ldrb	r3, [r7, #23]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d105      	bne.n	80047b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047a4:	4b39      	ldr	r3, [pc, #228]	; (800488c <HAL_RCC_OscConfig+0x470>)
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	4a38      	ldr	r2, [pc, #224]	; (800488c <HAL_RCC_OscConfig+0x470>)
 80047aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 80a1 	beq.w	80048fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047ba:	4b34      	ldr	r3, [pc, #208]	; (800488c <HAL_RCC_OscConfig+0x470>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 030c 	and.w	r3, r3, #12
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d05c      	beq.n	8004880 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d141      	bne.n	8004852 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ce:	4b31      	ldr	r3, [pc, #196]	; (8004894 <HAL_RCC_OscConfig+0x478>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d4:	f7fe fa64 	bl	8002ca0 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047dc:	f7fe fa60 	bl	8002ca0 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e087      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ee:	4b27      	ldr	r3, [pc, #156]	; (800488c <HAL_RCC_OscConfig+0x470>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	69da      	ldr	r2, [r3, #28]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	019b      	lsls	r3, r3, #6
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004810:	085b      	lsrs	r3, r3, #1
 8004812:	3b01      	subs	r3, #1
 8004814:	041b      	lsls	r3, r3, #16
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481c:	061b      	lsls	r3, r3, #24
 800481e:	491b      	ldr	r1, [pc, #108]	; (800488c <HAL_RCC_OscConfig+0x470>)
 8004820:	4313      	orrs	r3, r2
 8004822:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004824:	4b1b      	ldr	r3, [pc, #108]	; (8004894 <HAL_RCC_OscConfig+0x478>)
 8004826:	2201      	movs	r2, #1
 8004828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800482a:	f7fe fa39 	bl	8002ca0 <HAL_GetTick>
 800482e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004830:	e008      	b.n	8004844 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004832:	f7fe fa35 	bl	8002ca0 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e05c      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004844:	4b11      	ldr	r3, [pc, #68]	; (800488c <HAL_RCC_OscConfig+0x470>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d0f0      	beq.n	8004832 <HAL_RCC_OscConfig+0x416>
 8004850:	e054      	b.n	80048fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004852:	4b10      	ldr	r3, [pc, #64]	; (8004894 <HAL_RCC_OscConfig+0x478>)
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004858:	f7fe fa22 	bl	8002ca0 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004860:	f7fe fa1e 	bl	8002ca0 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e045      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004872:	4b06      	ldr	r3, [pc, #24]	; (800488c <HAL_RCC_OscConfig+0x470>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f0      	bne.n	8004860 <HAL_RCC_OscConfig+0x444>
 800487e:	e03d      	b.n	80048fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d107      	bne.n	8004898 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e038      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
 800488c:	40023800 	.word	0x40023800
 8004890:	40007000 	.word	0x40007000
 8004894:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004898:	4b1b      	ldr	r3, [pc, #108]	; (8004908 <HAL_RCC_OscConfig+0x4ec>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d028      	beq.n	80048f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d121      	bne.n	80048f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048be:	429a      	cmp	r2, r3
 80048c0:	d11a      	bne.n	80048f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048c8:	4013      	ands	r3, r2
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d111      	bne.n	80048f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048de:	085b      	lsrs	r3, r3, #1
 80048e0:	3b01      	subs	r3, #1
 80048e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d107      	bne.n	80048f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d001      	beq.n	80048fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e000      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	40023800 	.word	0x40023800

0800490c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0cc      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004920:	4b68      	ldr	r3, [pc, #416]	; (8004ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d90c      	bls.n	8004948 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492e:	4b65      	ldr	r3, [pc, #404]	; (8004ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004936:	4b63      	ldr	r3, [pc, #396]	; (8004ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0307 	and.w	r3, r3, #7
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	429a      	cmp	r2, r3
 8004942:	d001      	beq.n	8004948 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e0b8      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d020      	beq.n	8004996 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	d005      	beq.n	800496c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004960:	4b59      	ldr	r3, [pc, #356]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	4a58      	ldr	r2, [pc, #352]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800496a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0308 	and.w	r3, r3, #8
 8004974:	2b00      	cmp	r3, #0
 8004976:	d005      	beq.n	8004984 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004978:	4b53      	ldr	r3, [pc, #332]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	4a52      	ldr	r2, [pc, #328]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800497e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004982:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004984:	4b50      	ldr	r3, [pc, #320]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	494d      	ldr	r1, [pc, #308]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004992:	4313      	orrs	r3, r2
 8004994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d044      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d107      	bne.n	80049ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049aa:	4b47      	ldr	r3, [pc, #284]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d119      	bne.n	80049ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e07f      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d003      	beq.n	80049ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	d107      	bne.n	80049da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ca:	4b3f      	ldr	r3, [pc, #252]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d109      	bne.n	80049ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e06f      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049da:	4b3b      	ldr	r3, [pc, #236]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e067      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ea:	4b37      	ldr	r3, [pc, #220]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f023 0203 	bic.w	r2, r3, #3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	4934      	ldr	r1, [pc, #208]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049fc:	f7fe f950 	bl	8002ca0 <HAL_GetTick>
 8004a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a02:	e00a      	b.n	8004a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a04:	f7fe f94c 	bl	8002ca0 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e04f      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a1a:	4b2b      	ldr	r3, [pc, #172]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f003 020c 	and.w	r2, r3, #12
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d1eb      	bne.n	8004a04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a2c:	4b25      	ldr	r3, [pc, #148]	; (8004ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d20c      	bcs.n	8004a54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3a:	4b22      	ldr	r3, [pc, #136]	; (8004ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a42:	4b20      	ldr	r3, [pc, #128]	; (8004ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d001      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e032      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d008      	beq.n	8004a72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a60:	4b19      	ldr	r3, [pc, #100]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	4916      	ldr	r1, [pc, #88]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0308 	and.w	r3, r3, #8
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d009      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a7e:	4b12      	ldr	r3, [pc, #72]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	490e      	ldr	r1, [pc, #56]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a92:	f000 f821 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 8004a96:	4602      	mov	r2, r0
 8004a98:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	091b      	lsrs	r3, r3, #4
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	490a      	ldr	r1, [pc, #40]	; (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004aa4:	5ccb      	ldrb	r3, [r1, r3]
 8004aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aaa:	4a09      	ldr	r2, [pc, #36]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004aae:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fe f8b0 	bl	8002c18 <HAL_InitTick>

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40023c00 	.word	0x40023c00
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	0800b4b8 	.word	0x0800b4b8
 8004ad0:	20000034 	.word	0x20000034
 8004ad4:	20000038 	.word	0x20000038

08004ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004adc:	b094      	sub	sp, #80	; 0x50
 8004ade:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ae8:	2300      	movs	r3, #0
 8004aea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004aec:	2300      	movs	r3, #0
 8004aee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004af0:	4b79      	ldr	r3, [pc, #484]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f003 030c 	and.w	r3, r3, #12
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d00d      	beq.n	8004b18 <HAL_RCC_GetSysClockFreq+0x40>
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	f200 80e1 	bhi.w	8004cc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <HAL_RCC_GetSysClockFreq+0x34>
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d003      	beq.n	8004b12 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b0a:	e0db      	b.n	8004cc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b0c:	4b73      	ldr	r3, [pc, #460]	; (8004cdc <HAL_RCC_GetSysClockFreq+0x204>)
 8004b0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004b10:	e0db      	b.n	8004cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b12:	4b73      	ldr	r3, [pc, #460]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b16:	e0d8      	b.n	8004cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b18:	4b6f      	ldr	r3, [pc, #444]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b22:	4b6d      	ldr	r3, [pc, #436]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d063      	beq.n	8004bf6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b2e:	4b6a      	ldr	r3, [pc, #424]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	099b      	lsrs	r3, r3, #6
 8004b34:	2200      	movs	r2, #0
 8004b36:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b40:	633b      	str	r3, [r7, #48]	; 0x30
 8004b42:	2300      	movs	r3, #0
 8004b44:	637b      	str	r3, [r7, #52]	; 0x34
 8004b46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004b4a:	4622      	mov	r2, r4
 8004b4c:	462b      	mov	r3, r5
 8004b4e:	f04f 0000 	mov.w	r0, #0
 8004b52:	f04f 0100 	mov.w	r1, #0
 8004b56:	0159      	lsls	r1, r3, #5
 8004b58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b5c:	0150      	lsls	r0, r2, #5
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	4621      	mov	r1, r4
 8004b64:	1a51      	subs	r1, r2, r1
 8004b66:	6139      	str	r1, [r7, #16]
 8004b68:	4629      	mov	r1, r5
 8004b6a:	eb63 0301 	sbc.w	r3, r3, r1
 8004b6e:	617b      	str	r3, [r7, #20]
 8004b70:	f04f 0200 	mov.w	r2, #0
 8004b74:	f04f 0300 	mov.w	r3, #0
 8004b78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b7c:	4659      	mov	r1, fp
 8004b7e:	018b      	lsls	r3, r1, #6
 8004b80:	4651      	mov	r1, sl
 8004b82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b86:	4651      	mov	r1, sl
 8004b88:	018a      	lsls	r2, r1, #6
 8004b8a:	4651      	mov	r1, sl
 8004b8c:	ebb2 0801 	subs.w	r8, r2, r1
 8004b90:	4659      	mov	r1, fp
 8004b92:	eb63 0901 	sbc.w	r9, r3, r1
 8004b96:	f04f 0200 	mov.w	r2, #0
 8004b9a:	f04f 0300 	mov.w	r3, #0
 8004b9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ba2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ba6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004baa:	4690      	mov	r8, r2
 8004bac:	4699      	mov	r9, r3
 8004bae:	4623      	mov	r3, r4
 8004bb0:	eb18 0303 	adds.w	r3, r8, r3
 8004bb4:	60bb      	str	r3, [r7, #8]
 8004bb6:	462b      	mov	r3, r5
 8004bb8:	eb49 0303 	adc.w	r3, r9, r3
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	f04f 0200 	mov.w	r2, #0
 8004bc2:	f04f 0300 	mov.w	r3, #0
 8004bc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004bca:	4629      	mov	r1, r5
 8004bcc:	024b      	lsls	r3, r1, #9
 8004bce:	4621      	mov	r1, r4
 8004bd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004bd4:	4621      	mov	r1, r4
 8004bd6:	024a      	lsls	r2, r1, #9
 8004bd8:	4610      	mov	r0, r2
 8004bda:	4619      	mov	r1, r3
 8004bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bde:	2200      	movs	r2, #0
 8004be0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004be2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004be4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004be8:	f7fc f856 	bl	8000c98 <__aeabi_uldivmod>
 8004bec:	4602      	mov	r2, r0
 8004bee:	460b      	mov	r3, r1
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bf4:	e058      	b.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bf6:	4b38      	ldr	r3, [pc, #224]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	099b      	lsrs	r3, r3, #6
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	4618      	mov	r0, r3
 8004c00:	4611      	mov	r1, r2
 8004c02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c06:	623b      	str	r3, [r7, #32]
 8004c08:	2300      	movs	r3, #0
 8004c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c10:	4642      	mov	r2, r8
 8004c12:	464b      	mov	r3, r9
 8004c14:	f04f 0000 	mov.w	r0, #0
 8004c18:	f04f 0100 	mov.w	r1, #0
 8004c1c:	0159      	lsls	r1, r3, #5
 8004c1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c22:	0150      	lsls	r0, r2, #5
 8004c24:	4602      	mov	r2, r0
 8004c26:	460b      	mov	r3, r1
 8004c28:	4641      	mov	r1, r8
 8004c2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c2e:	4649      	mov	r1, r9
 8004c30:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c48:	ebb2 040a 	subs.w	r4, r2, sl
 8004c4c:	eb63 050b 	sbc.w	r5, r3, fp
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	00eb      	lsls	r3, r5, #3
 8004c5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c5e:	00e2      	lsls	r2, r4, #3
 8004c60:	4614      	mov	r4, r2
 8004c62:	461d      	mov	r5, r3
 8004c64:	4643      	mov	r3, r8
 8004c66:	18e3      	adds	r3, r4, r3
 8004c68:	603b      	str	r3, [r7, #0]
 8004c6a:	464b      	mov	r3, r9
 8004c6c:	eb45 0303 	adc.w	r3, r5, r3
 8004c70:	607b      	str	r3, [r7, #4]
 8004c72:	f04f 0200 	mov.w	r2, #0
 8004c76:	f04f 0300 	mov.w	r3, #0
 8004c7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c7e:	4629      	mov	r1, r5
 8004c80:	028b      	lsls	r3, r1, #10
 8004c82:	4621      	mov	r1, r4
 8004c84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c88:	4621      	mov	r1, r4
 8004c8a:	028a      	lsls	r2, r1, #10
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	4619      	mov	r1, r3
 8004c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c92:	2200      	movs	r2, #0
 8004c94:	61bb      	str	r3, [r7, #24]
 8004c96:	61fa      	str	r2, [r7, #28]
 8004c98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c9c:	f7fb fffc 	bl	8000c98 <__aeabi_uldivmod>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ca8:	4b0b      	ldr	r3, [pc, #44]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	0c1b      	lsrs	r3, r3, #16
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	005b      	lsls	r3, r3, #1
 8004cb6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004cb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004cc2:	e002      	b.n	8004cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cc4:	4b05      	ldr	r3, [pc, #20]	; (8004cdc <HAL_RCC_GetSysClockFreq+0x204>)
 8004cc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3750      	adds	r7, #80	; 0x50
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cd6:	bf00      	nop
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	00f42400 	.word	0x00f42400
 8004ce0:	007a1200 	.word	0x007a1200

08004ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ce8:	4b03      	ldr	r3, [pc, #12]	; (8004cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cea:	681b      	ldr	r3, [r3, #0]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	20000034 	.word	0x20000034

08004cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d00:	f7ff fff0 	bl	8004ce4 <HAL_RCC_GetHCLKFreq>
 8004d04:	4602      	mov	r2, r0
 8004d06:	4b05      	ldr	r3, [pc, #20]	; (8004d1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	0a9b      	lsrs	r3, r3, #10
 8004d0c:	f003 0307 	and.w	r3, r3, #7
 8004d10:	4903      	ldr	r1, [pc, #12]	; (8004d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d12:	5ccb      	ldrb	r3, [r1, r3]
 8004d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	40023800 	.word	0x40023800
 8004d20:	0800b4c8 	.word	0x0800b4c8

08004d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d28:	f7ff ffdc 	bl	8004ce4 <HAL_RCC_GetHCLKFreq>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	0b5b      	lsrs	r3, r3, #13
 8004d34:	f003 0307 	and.w	r3, r3, #7
 8004d38:	4903      	ldr	r1, [pc, #12]	; (8004d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d3a:	5ccb      	ldrb	r3, [r1, r3]
 8004d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	40023800 	.word	0x40023800
 8004d48:	0800b4c8 	.word	0x0800b4c8

08004d4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e041      	b.n	8004de2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d106      	bne.n	8004d78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7fd fc92 	bl	800269c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	3304      	adds	r3, #4
 8004d88:	4619      	mov	r1, r3
 8004d8a:	4610      	mov	r0, r2
 8004d8c:	f000 fd88 	bl	80058a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
	...

08004dec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d001      	beq.n	8004e04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e044      	b.n	8004e8e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0201 	orr.w	r2, r2, #1
 8004e1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a1e      	ldr	r2, [pc, #120]	; (8004e9c <HAL_TIM_Base_Start_IT+0xb0>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d018      	beq.n	8004e58 <HAL_TIM_Base_Start_IT+0x6c>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e2e:	d013      	beq.n	8004e58 <HAL_TIM_Base_Start_IT+0x6c>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a1a      	ldr	r2, [pc, #104]	; (8004ea0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00e      	beq.n	8004e58 <HAL_TIM_Base_Start_IT+0x6c>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a19      	ldr	r2, [pc, #100]	; (8004ea4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d009      	beq.n	8004e58 <HAL_TIM_Base_Start_IT+0x6c>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a17      	ldr	r2, [pc, #92]	; (8004ea8 <HAL_TIM_Base_Start_IT+0xbc>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d004      	beq.n	8004e58 <HAL_TIM_Base_Start_IT+0x6c>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a16      	ldr	r2, [pc, #88]	; (8004eac <HAL_TIM_Base_Start_IT+0xc0>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d111      	bne.n	8004e7c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 0307 	and.w	r3, r3, #7
 8004e62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2b06      	cmp	r3, #6
 8004e68:	d010      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f042 0201 	orr.w	r2, r2, #1
 8004e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e7a:	e007      	b.n	8004e8c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0201 	orr.w	r2, r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	40010000 	.word	0x40010000
 8004ea0:	40000400 	.word	0x40000400
 8004ea4:	40000800 	.word	0x40000800
 8004ea8:	40000c00 	.word	0x40000c00
 8004eac:	40014000 	.word	0x40014000

08004eb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e041      	b.n	8004f46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d106      	bne.n	8004edc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f839 	bl	8004f4e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3304      	adds	r3, #4
 8004eec:	4619      	mov	r1, r3
 8004eee:	4610      	mov	r0, r2
 8004ef0:	f000 fcd6 	bl	80058a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
	...

08004f64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d109      	bne.n	8004f88 <HAL_TIM_PWM_Start+0x24>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	bf14      	ite	ne
 8004f80:	2301      	movne	r3, #1
 8004f82:	2300      	moveq	r3, #0
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	e022      	b.n	8004fce <HAL_TIM_PWM_Start+0x6a>
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2b04      	cmp	r3, #4
 8004f8c:	d109      	bne.n	8004fa2 <HAL_TIM_PWM_Start+0x3e>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	bf14      	ite	ne
 8004f9a:	2301      	movne	r3, #1
 8004f9c:	2300      	moveq	r3, #0
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	e015      	b.n	8004fce <HAL_TIM_PWM_Start+0x6a>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	d109      	bne.n	8004fbc <HAL_TIM_PWM_Start+0x58>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	bf14      	ite	ne
 8004fb4:	2301      	movne	r3, #1
 8004fb6:	2300      	moveq	r3, #0
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	e008      	b.n	8004fce <HAL_TIM_PWM_Start+0x6a>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	bf14      	ite	ne
 8004fc8:	2301      	movne	r3, #1
 8004fca:	2300      	moveq	r3, #0
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e068      	b.n	80050a8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d104      	bne.n	8004fe6 <HAL_TIM_PWM_Start+0x82>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fe4:	e013      	b.n	800500e <HAL_TIM_PWM_Start+0xaa>
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d104      	bne.n	8004ff6 <HAL_TIM_PWM_Start+0x92>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ff4:	e00b      	b.n	800500e <HAL_TIM_PWM_Start+0xaa>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b08      	cmp	r3, #8
 8004ffa:	d104      	bne.n	8005006 <HAL_TIM_PWM_Start+0xa2>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005004:	e003      	b.n	800500e <HAL_TIM_PWM_Start+0xaa>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2202      	movs	r2, #2
 800500a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2201      	movs	r2, #1
 8005014:	6839      	ldr	r1, [r7, #0]
 8005016:	4618      	mov	r0, r3
 8005018:	f000 fee8 	bl	8005dec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a23      	ldr	r2, [pc, #140]	; (80050b0 <HAL_TIM_PWM_Start+0x14c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d107      	bne.n	8005036 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005034:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a1d      	ldr	r2, [pc, #116]	; (80050b0 <HAL_TIM_PWM_Start+0x14c>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d018      	beq.n	8005072 <HAL_TIM_PWM_Start+0x10e>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005048:	d013      	beq.n	8005072 <HAL_TIM_PWM_Start+0x10e>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a19      	ldr	r2, [pc, #100]	; (80050b4 <HAL_TIM_PWM_Start+0x150>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d00e      	beq.n	8005072 <HAL_TIM_PWM_Start+0x10e>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a17      	ldr	r2, [pc, #92]	; (80050b8 <HAL_TIM_PWM_Start+0x154>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d009      	beq.n	8005072 <HAL_TIM_PWM_Start+0x10e>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a16      	ldr	r2, [pc, #88]	; (80050bc <HAL_TIM_PWM_Start+0x158>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d004      	beq.n	8005072 <HAL_TIM_PWM_Start+0x10e>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a14      	ldr	r2, [pc, #80]	; (80050c0 <HAL_TIM_PWM_Start+0x15c>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d111      	bne.n	8005096 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2b06      	cmp	r3, #6
 8005082:	d010      	beq.n	80050a6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0201 	orr.w	r2, r2, #1
 8005092:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005094:	e007      	b.n	80050a6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f042 0201 	orr.w	r2, r2, #1
 80050a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	40010000 	.word	0x40010000
 80050b4:	40000400 	.word	0x40000400
 80050b8:	40000800 	.word	0x40000800
 80050bc:	40000c00 	.word	0x40000c00
 80050c0:	40014000 	.word	0x40014000

080050c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e097      	b.n	8005208 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d106      	bne.n	80050f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7fd fb39 	bl	8002764 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2202      	movs	r2, #2
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6812      	ldr	r2, [r2, #0]
 8005104:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005108:	f023 0307 	bic.w	r3, r3, #7
 800510c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	3304      	adds	r3, #4
 8005116:	4619      	mov	r1, r3
 8005118:	4610      	mov	r0, r2
 800511a:	f000 fbc1 	bl	80058a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	4313      	orrs	r3, r2
 800513e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005146:	f023 0303 	bic.w	r3, r3, #3
 800514a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	021b      	lsls	r3, r3, #8
 8005156:	4313      	orrs	r3, r2
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005164:	f023 030c 	bic.w	r3, r3, #12
 8005168:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005170:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005174:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	021b      	lsls	r3, r3, #8
 8005180:	4313      	orrs	r3, r2
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	4313      	orrs	r3, r2
 8005186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	011a      	lsls	r2, r3, #4
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	031b      	lsls	r3, r3, #12
 8005194:	4313      	orrs	r3, r2
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	4313      	orrs	r3, r2
 800519a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80051a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80051aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	4313      	orrs	r3, r2
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005220:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005228:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005230:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005238:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d110      	bne.n	8005262 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005240:	7bfb      	ldrb	r3, [r7, #15]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d102      	bne.n	800524c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005246:	7b7b      	ldrb	r3, [r7, #13]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d001      	beq.n	8005250 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e069      	b.n	8005324 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005260:	e031      	b.n	80052c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b04      	cmp	r3, #4
 8005266:	d110      	bne.n	800528a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005268:	7bbb      	ldrb	r3, [r7, #14]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d102      	bne.n	8005274 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800526e:	7b3b      	ldrb	r3, [r7, #12]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d001      	beq.n	8005278 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e055      	b.n	8005324 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005288:	e01d      	b.n	80052c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800528a:	7bfb      	ldrb	r3, [r7, #15]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d108      	bne.n	80052a2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005290:	7bbb      	ldrb	r3, [r7, #14]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d105      	bne.n	80052a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005296:	7b7b      	ldrb	r3, [r7, #13]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d102      	bne.n	80052a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800529c:	7b3b      	ldrb	r3, [r7, #12]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d001      	beq.n	80052a6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e03e      	b.n	8005324 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2202      	movs	r2, #2
 80052aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2202      	movs	r2, #2
 80052b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2202      	movs	r2, #2
 80052ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2202      	movs	r2, #2
 80052c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <HAL_TIM_Encoder_Start+0xc4>
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2b04      	cmp	r3, #4
 80052d0:	d008      	beq.n	80052e4 <HAL_TIM_Encoder_Start+0xd4>
 80052d2:	e00f      	b.n	80052f4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2201      	movs	r2, #1
 80052da:	2100      	movs	r1, #0
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 fd85 	bl	8005dec <TIM_CCxChannelCmd>
      break;
 80052e2:	e016      	b.n	8005312 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2201      	movs	r2, #1
 80052ea:	2104      	movs	r1, #4
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 fd7d 	bl	8005dec <TIM_CCxChannelCmd>
      break;
 80052f2:	e00e      	b.n	8005312 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2201      	movs	r2, #1
 80052fa:	2100      	movs	r1, #0
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 fd75 	bl	8005dec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2201      	movs	r2, #1
 8005308:	2104      	movs	r1, #4
 800530a:	4618      	mov	r0, r3
 800530c:	f000 fd6e 	bl	8005dec <TIM_CCxChannelCmd>
      break;
 8005310:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f042 0201 	orr.w	r2, r2, #1
 8005320:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b02      	cmp	r3, #2
 8005340:	d122      	bne.n	8005388 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b02      	cmp	r3, #2
 800534e:	d11b      	bne.n	8005388 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f06f 0202 	mvn.w	r2, #2
 8005358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d003      	beq.n	8005376 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 fa77 	bl	8005862 <HAL_TIM_IC_CaptureCallback>
 8005374:	e005      	b.n	8005382 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fa69 	bl	800584e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 fa7a 	bl	8005876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f003 0304 	and.w	r3, r3, #4
 8005392:	2b04      	cmp	r3, #4
 8005394:	d122      	bne.n	80053dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d11b      	bne.n	80053dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0204 	mvn.w	r2, #4
 80053ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2202      	movs	r2, #2
 80053b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 fa4d 	bl	8005862 <HAL_TIM_IC_CaptureCallback>
 80053c8:	e005      	b.n	80053d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 fa3f 	bl	800584e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fa50 	bl	8005876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f003 0308 	and.w	r3, r3, #8
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d122      	bne.n	8005430 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f003 0308 	and.w	r3, r3, #8
 80053f4:	2b08      	cmp	r3, #8
 80053f6:	d11b      	bne.n	8005430 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f06f 0208 	mvn.w	r2, #8
 8005400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2204      	movs	r2, #4
 8005406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fa23 	bl	8005862 <HAL_TIM_IC_CaptureCallback>
 800541c:	e005      	b.n	800542a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 fa15 	bl	800584e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 fa26 	bl	8005876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	f003 0310 	and.w	r3, r3, #16
 800543a:	2b10      	cmp	r3, #16
 800543c:	d122      	bne.n	8005484 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f003 0310 	and.w	r3, r3, #16
 8005448:	2b10      	cmp	r3, #16
 800544a:	d11b      	bne.n	8005484 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f06f 0210 	mvn.w	r2, #16
 8005454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2208      	movs	r2, #8
 800545a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f9f9 	bl	8005862 <HAL_TIM_IC_CaptureCallback>
 8005470:	e005      	b.n	800547e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f9eb 	bl	800584e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f9fc 	bl	8005876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b01      	cmp	r3, #1
 8005490:	d10e      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b01      	cmp	r3, #1
 800549e:	d107      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f06f 0201 	mvn.w	r2, #1
 80054a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7fc ffd4 	bl	8002458 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ba:	2b80      	cmp	r3, #128	; 0x80
 80054bc:	d10e      	bne.n	80054dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c8:	2b80      	cmp	r3, #128	; 0x80
 80054ca:	d107      	bne.n	80054dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 fd78 	bl	8005fcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e6:	2b40      	cmp	r3, #64	; 0x40
 80054e8:	d10e      	bne.n	8005508 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f4:	2b40      	cmp	r3, #64	; 0x40
 80054f6:	d107      	bne.n	8005508 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f9c1 	bl	800588a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f003 0320 	and.w	r3, r3, #32
 8005512:	2b20      	cmp	r3, #32
 8005514:	d10e      	bne.n	8005534 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f003 0320 	and.w	r3, r3, #32
 8005520:	2b20      	cmp	r3, #32
 8005522:	d107      	bne.n	8005534 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f06f 0220 	mvn.w	r2, #32
 800552c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 fd42 	bl	8005fb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005534:	bf00      	nop
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005548:	2300      	movs	r3, #0
 800554a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005552:	2b01      	cmp	r3, #1
 8005554:	d101      	bne.n	800555a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005556:	2302      	movs	r3, #2
 8005558:	e0ae      	b.n	80056b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b0c      	cmp	r3, #12
 8005566:	f200 809f 	bhi.w	80056a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800556a:	a201      	add	r2, pc, #4	; (adr r2, 8005570 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800556c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005570:	080055a5 	.word	0x080055a5
 8005574:	080056a9 	.word	0x080056a9
 8005578:	080056a9 	.word	0x080056a9
 800557c:	080056a9 	.word	0x080056a9
 8005580:	080055e5 	.word	0x080055e5
 8005584:	080056a9 	.word	0x080056a9
 8005588:	080056a9 	.word	0x080056a9
 800558c:	080056a9 	.word	0x080056a9
 8005590:	08005627 	.word	0x08005627
 8005594:	080056a9 	.word	0x080056a9
 8005598:	080056a9 	.word	0x080056a9
 800559c:	080056a9 	.word	0x080056a9
 80055a0:	08005667 	.word	0x08005667
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68b9      	ldr	r1, [r7, #8]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 f9f8 	bl	80059a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f042 0208 	orr.w	r2, r2, #8
 80055be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699a      	ldr	r2, [r3, #24]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 0204 	bic.w	r2, r2, #4
 80055ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6999      	ldr	r1, [r3, #24]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	691a      	ldr	r2, [r3, #16]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	619a      	str	r2, [r3, #24]
      break;
 80055e2:	e064      	b.n	80056ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68b9      	ldr	r1, [r7, #8]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 fa3e 	bl	8005a6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	699a      	ldr	r2, [r3, #24]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	699a      	ldr	r2, [r3, #24]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800560e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6999      	ldr	r1, [r3, #24]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	021a      	lsls	r2, r3, #8
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	619a      	str	r2, [r3, #24]
      break;
 8005624:	e043      	b.n	80056ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68b9      	ldr	r1, [r7, #8]
 800562c:	4618      	mov	r0, r3
 800562e:	f000 fa89 	bl	8005b44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69da      	ldr	r2, [r3, #28]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f042 0208 	orr.w	r2, r2, #8
 8005640:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69da      	ldr	r2, [r3, #28]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 0204 	bic.w	r2, r2, #4
 8005650:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	69d9      	ldr	r1, [r3, #28]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	691a      	ldr	r2, [r3, #16]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	61da      	str	r2, [r3, #28]
      break;
 8005664:	e023      	b.n	80056ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68b9      	ldr	r1, [r7, #8]
 800566c:	4618      	mov	r0, r3
 800566e:	f000 fad3 	bl	8005c18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	69da      	ldr	r2, [r3, #28]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69da      	ldr	r2, [r3, #28]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	69d9      	ldr	r1, [r3, #28]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	021a      	lsls	r2, r3, #8
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	61da      	str	r2, [r3, #28]
      break;
 80056a6:	e002      	b.n	80056ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	75fb      	strb	r3, [r7, #23]
      break;
 80056ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d101      	bne.n	80056dc <HAL_TIM_ConfigClockSource+0x1c>
 80056d8:	2302      	movs	r3, #2
 80056da:	e0b4      	b.n	8005846 <HAL_TIM_ConfigClockSource+0x186>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005702:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005714:	d03e      	beq.n	8005794 <HAL_TIM_ConfigClockSource+0xd4>
 8005716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800571a:	f200 8087 	bhi.w	800582c <HAL_TIM_ConfigClockSource+0x16c>
 800571e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005722:	f000 8086 	beq.w	8005832 <HAL_TIM_ConfigClockSource+0x172>
 8005726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800572a:	d87f      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
 800572c:	2b70      	cmp	r3, #112	; 0x70
 800572e:	d01a      	beq.n	8005766 <HAL_TIM_ConfigClockSource+0xa6>
 8005730:	2b70      	cmp	r3, #112	; 0x70
 8005732:	d87b      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
 8005734:	2b60      	cmp	r3, #96	; 0x60
 8005736:	d050      	beq.n	80057da <HAL_TIM_ConfigClockSource+0x11a>
 8005738:	2b60      	cmp	r3, #96	; 0x60
 800573a:	d877      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
 800573c:	2b50      	cmp	r3, #80	; 0x50
 800573e:	d03c      	beq.n	80057ba <HAL_TIM_ConfigClockSource+0xfa>
 8005740:	2b50      	cmp	r3, #80	; 0x50
 8005742:	d873      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
 8005744:	2b40      	cmp	r3, #64	; 0x40
 8005746:	d058      	beq.n	80057fa <HAL_TIM_ConfigClockSource+0x13a>
 8005748:	2b40      	cmp	r3, #64	; 0x40
 800574a:	d86f      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
 800574c:	2b30      	cmp	r3, #48	; 0x30
 800574e:	d064      	beq.n	800581a <HAL_TIM_ConfigClockSource+0x15a>
 8005750:	2b30      	cmp	r3, #48	; 0x30
 8005752:	d86b      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
 8005754:	2b20      	cmp	r3, #32
 8005756:	d060      	beq.n	800581a <HAL_TIM_ConfigClockSource+0x15a>
 8005758:	2b20      	cmp	r3, #32
 800575a:	d867      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
 800575c:	2b00      	cmp	r3, #0
 800575e:	d05c      	beq.n	800581a <HAL_TIM_ConfigClockSource+0x15a>
 8005760:	2b10      	cmp	r3, #16
 8005762:	d05a      	beq.n	800581a <HAL_TIM_ConfigClockSource+0x15a>
 8005764:	e062      	b.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6818      	ldr	r0, [r3, #0]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	6899      	ldr	r1, [r3, #8]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f000 fb19 	bl	8005dac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005788:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	609a      	str	r2, [r3, #8]
      break;
 8005792:	e04f      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6818      	ldr	r0, [r3, #0]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	6899      	ldr	r1, [r3, #8]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f000 fb02 	bl	8005dac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689a      	ldr	r2, [r3, #8]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057b6:	609a      	str	r2, [r3, #8]
      break;
 80057b8:	e03c      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6818      	ldr	r0, [r3, #0]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	6859      	ldr	r1, [r3, #4]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	461a      	mov	r2, r3
 80057c8:	f000 fa76 	bl	8005cb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2150      	movs	r1, #80	; 0x50
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 facf 	bl	8005d76 <TIM_ITRx_SetConfig>
      break;
 80057d8:	e02c      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6818      	ldr	r0, [r3, #0]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	6859      	ldr	r1, [r3, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	461a      	mov	r2, r3
 80057e8:	f000 fa95 	bl	8005d16 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2160      	movs	r1, #96	; 0x60
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 fabf 	bl	8005d76 <TIM_ITRx_SetConfig>
      break;
 80057f8:	e01c      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6818      	ldr	r0, [r3, #0]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	6859      	ldr	r1, [r3, #4]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	461a      	mov	r2, r3
 8005808:	f000 fa56 	bl	8005cb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2140      	movs	r1, #64	; 0x40
 8005812:	4618      	mov	r0, r3
 8005814:	f000 faaf 	bl	8005d76 <TIM_ITRx_SetConfig>
      break;
 8005818:	e00c      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4619      	mov	r1, r3
 8005824:	4610      	mov	r0, r2
 8005826:	f000 faa6 	bl	8005d76 <TIM_ITRx_SetConfig>
      break;
 800582a:	e003      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	73fb      	strb	r3, [r7, #15]
      break;
 8005830:	e000      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005832:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005844:	7bfb      	ldrb	r3, [r7, #15]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800584e:	b480      	push	{r7}
 8005850:	b083      	sub	sp, #12
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005862:	b480      	push	{r7}
 8005864:	b083      	sub	sp, #12
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800586a:	bf00      	nop
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005876:	b480      	push	{r7}
 8005878:	b083      	sub	sp, #12
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800587e:	bf00      	nop
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800588a:	b480      	push	{r7}
 800588c:	b083      	sub	sp, #12
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005892:	bf00      	nop
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
	...

080058a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a34      	ldr	r2, [pc, #208]	; (8005984 <TIM_Base_SetConfig+0xe4>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d00f      	beq.n	80058d8 <TIM_Base_SetConfig+0x38>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058be:	d00b      	beq.n	80058d8 <TIM_Base_SetConfig+0x38>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a31      	ldr	r2, [pc, #196]	; (8005988 <TIM_Base_SetConfig+0xe8>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d007      	beq.n	80058d8 <TIM_Base_SetConfig+0x38>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a30      	ldr	r2, [pc, #192]	; (800598c <TIM_Base_SetConfig+0xec>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d003      	beq.n	80058d8 <TIM_Base_SetConfig+0x38>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a2f      	ldr	r2, [pc, #188]	; (8005990 <TIM_Base_SetConfig+0xf0>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d108      	bne.n	80058ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a25      	ldr	r2, [pc, #148]	; (8005984 <TIM_Base_SetConfig+0xe4>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d01b      	beq.n	800592a <TIM_Base_SetConfig+0x8a>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f8:	d017      	beq.n	800592a <TIM_Base_SetConfig+0x8a>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a22      	ldr	r2, [pc, #136]	; (8005988 <TIM_Base_SetConfig+0xe8>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d013      	beq.n	800592a <TIM_Base_SetConfig+0x8a>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a21      	ldr	r2, [pc, #132]	; (800598c <TIM_Base_SetConfig+0xec>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d00f      	beq.n	800592a <TIM_Base_SetConfig+0x8a>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a20      	ldr	r2, [pc, #128]	; (8005990 <TIM_Base_SetConfig+0xf0>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d00b      	beq.n	800592a <TIM_Base_SetConfig+0x8a>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a1f      	ldr	r2, [pc, #124]	; (8005994 <TIM_Base_SetConfig+0xf4>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d007      	beq.n	800592a <TIM_Base_SetConfig+0x8a>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a1e      	ldr	r2, [pc, #120]	; (8005998 <TIM_Base_SetConfig+0xf8>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d003      	beq.n	800592a <TIM_Base_SetConfig+0x8a>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a1d      	ldr	r2, [pc, #116]	; (800599c <TIM_Base_SetConfig+0xfc>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d108      	bne.n	800593c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	4313      	orrs	r3, r2
 800593a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	4313      	orrs	r3, r2
 8005948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a08      	ldr	r2, [pc, #32]	; (8005984 <TIM_Base_SetConfig+0xe4>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d103      	bne.n	8005970 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	691a      	ldr	r2, [r3, #16]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	615a      	str	r2, [r3, #20]
}
 8005976:	bf00      	nop
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	40010000 	.word	0x40010000
 8005988:	40000400 	.word	0x40000400
 800598c:	40000800 	.word	0x40000800
 8005990:	40000c00 	.word	0x40000c00
 8005994:	40014000 	.word	0x40014000
 8005998:	40014400 	.word	0x40014400
 800599c:	40014800 	.word	0x40014800

080059a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	f023 0201 	bic.w	r2, r3, #1
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 0303 	bic.w	r3, r3, #3
 80059d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f023 0302 	bic.w	r3, r3, #2
 80059e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a1c      	ldr	r2, [pc, #112]	; (8005a68 <TIM_OC1_SetConfig+0xc8>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d10c      	bne.n	8005a16 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	f023 0308 	bic.w	r3, r3, #8
 8005a02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f023 0304 	bic.w	r3, r3, #4
 8005a14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a13      	ldr	r2, [pc, #76]	; (8005a68 <TIM_OC1_SetConfig+0xc8>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d111      	bne.n	8005a42 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	621a      	str	r2, [r3, #32]
}
 8005a5c:	bf00      	nop
 8005a5e:	371c      	adds	r7, #28
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	40010000 	.word	0x40010000

08005a6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b087      	sub	sp, #28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	f023 0210 	bic.w	r2, r3, #16
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	021b      	lsls	r3, r3, #8
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f023 0320 	bic.w	r3, r3, #32
 8005ab6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	011b      	lsls	r3, r3, #4
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a1e      	ldr	r2, [pc, #120]	; (8005b40 <TIM_OC2_SetConfig+0xd4>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d10d      	bne.n	8005ae8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	011b      	lsls	r3, r3, #4
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ae6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a15      	ldr	r2, [pc, #84]	; (8005b40 <TIM_OC2_SetConfig+0xd4>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d113      	bne.n	8005b18 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005af6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005afe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	621a      	str	r2, [r3, #32]
}
 8005b32:	bf00      	nop
 8005b34:	371c      	adds	r7, #28
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	40010000 	.word	0x40010000

08005b44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f023 0303 	bic.w	r3, r3, #3
 8005b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	021b      	lsls	r3, r3, #8
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a1d      	ldr	r2, [pc, #116]	; (8005c14 <TIM_OC3_SetConfig+0xd0>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d10d      	bne.n	8005bbe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ba8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	021b      	lsls	r3, r3, #8
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a14      	ldr	r2, [pc, #80]	; (8005c14 <TIM_OC3_SetConfig+0xd0>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d113      	bne.n	8005bee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	011b      	lsls	r3, r3, #4
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	011b      	lsls	r3, r3, #4
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	621a      	str	r2, [r3, #32]
}
 8005c08:	bf00      	nop
 8005c0a:	371c      	adds	r7, #28
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	40010000 	.word	0x40010000

08005c18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	021b      	lsls	r3, r3, #8
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	031b      	lsls	r3, r3, #12
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a10      	ldr	r2, [pc, #64]	; (8005cb4 <TIM_OC4_SetConfig+0x9c>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d109      	bne.n	8005c8c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	019b      	lsls	r3, r3, #6
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	621a      	str	r2, [r3, #32]
}
 8005ca6:	bf00      	nop
 8005ca8:	371c      	adds	r7, #28
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	40010000 	.word	0x40010000

08005cb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	f023 0201 	bic.w	r2, r3, #1
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ce2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f023 030a 	bic.w	r3, r3, #10
 8005cf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	621a      	str	r2, [r3, #32]
}
 8005d0a:	bf00      	nop
 8005d0c:	371c      	adds	r7, #28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b087      	sub	sp, #28
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	60f8      	str	r0, [r7, #12]
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	f023 0210 	bic.w	r2, r3, #16
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	031b      	lsls	r3, r3, #12
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	011b      	lsls	r3, r3, #4
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	621a      	str	r2, [r3, #32]
}
 8005d6a:	bf00      	nop
 8005d6c:	371c      	adds	r7, #28
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b085      	sub	sp, #20
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
 8005d7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	f043 0307 	orr.w	r3, r3, #7
 8005d98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	609a      	str	r2, [r3, #8]
}
 8005da0:	bf00      	nop
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
 8005db8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	021a      	lsls	r2, r3, #8
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	609a      	str	r2, [r3, #8]
}
 8005de0:	bf00      	nop
 8005de2:	371c      	adds	r7, #28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	f003 031f 	and.w	r3, r3, #31
 8005dfe:	2201      	movs	r2, #1
 8005e00:	fa02 f303 	lsl.w	r3, r2, r3
 8005e04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6a1a      	ldr	r2, [r3, #32]
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	43db      	mvns	r3, r3
 8005e0e:	401a      	ands	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6a1a      	ldr	r2, [r3, #32]
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	f003 031f 	and.w	r3, r3, #31
 8005e1e:	6879      	ldr	r1, [r7, #4]
 8005e20:	fa01 f303 	lsl.w	r3, r1, r3
 8005e24:	431a      	orrs	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	621a      	str	r2, [r3, #32]
}
 8005e2a:	bf00      	nop
 8005e2c:	371c      	adds	r7, #28
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
	...

08005e38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d101      	bne.n	8005e50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	e050      	b.n	8005ef2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a1c      	ldr	r2, [pc, #112]	; (8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d018      	beq.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e9c:	d013      	beq.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a18      	ldr	r2, [pc, #96]	; (8005f04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d00e      	beq.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a16      	ldr	r2, [pc, #88]	; (8005f08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d009      	beq.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a15      	ldr	r2, [pc, #84]	; (8005f0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d004      	beq.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a13      	ldr	r2, [pc, #76]	; (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d10c      	bne.n	8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ecc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	40010000 	.word	0x40010000
 8005f04:	40000400 	.word	0x40000400
 8005f08:	40000800 	.word	0x40000800
 8005f0c:	40000c00 	.word	0x40000c00
 8005f10:	40014000 	.word	0x40014000

08005f14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d101      	bne.n	8005f30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	e03d      	b.n	8005fac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e03f      	b.n	8006072 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d106      	bne.n	800600c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7fc fc56 	bl	80028b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2224      	movs	r2, #36	; 0x24
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68da      	ldr	r2, [r3, #12]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006022:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f929 	bl	800627c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	691a      	ldr	r2, [r3, #16]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006038:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	695a      	ldr	r2, [r3, #20]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006048:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006058:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2220      	movs	r2, #32
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2220      	movs	r2, #32
 800606c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b08a      	sub	sp, #40	; 0x28
 800607e:	af02      	add	r7, sp, #8
 8006080:	60f8      	str	r0, [r7, #12]
 8006082:	60b9      	str	r1, [r7, #8]
 8006084:	603b      	str	r3, [r7, #0]
 8006086:	4613      	mov	r3, r2
 8006088:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800608a:	2300      	movs	r3, #0
 800608c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b20      	cmp	r3, #32
 8006098:	d17c      	bne.n	8006194 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d002      	beq.n	80060a6 <HAL_UART_Transmit+0x2c>
 80060a0:	88fb      	ldrh	r3, [r7, #6]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d101      	bne.n	80060aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e075      	b.n	8006196 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d101      	bne.n	80060b8 <HAL_UART_Transmit+0x3e>
 80060b4:	2302      	movs	r3, #2
 80060b6:	e06e      	b.n	8006196 <HAL_UART_Transmit+0x11c>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2221      	movs	r2, #33	; 0x21
 80060ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060ce:	f7fc fde7 	bl	8002ca0 <HAL_GetTick>
 80060d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	88fa      	ldrh	r2, [r7, #6]
 80060d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	88fa      	ldrh	r2, [r7, #6]
 80060de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060e8:	d108      	bne.n	80060fc <HAL_UART_Transmit+0x82>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d104      	bne.n	80060fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80060f2:	2300      	movs	r3, #0
 80060f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	61bb      	str	r3, [r7, #24]
 80060fa:	e003      	b.n	8006104 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006100:	2300      	movs	r3, #0
 8006102:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800610c:	e02a      	b.n	8006164 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2200      	movs	r2, #0
 8006116:	2180      	movs	r1, #128	; 0x80
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 f840 	bl	800619e <UART_WaitOnFlagUntilTimeout>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d001      	beq.n	8006128 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e036      	b.n	8006196 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10b      	bne.n	8006146 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	881b      	ldrh	r3, [r3, #0]
 8006132:	461a      	mov	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800613c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	3302      	adds	r3, #2
 8006142:	61bb      	str	r3, [r7, #24]
 8006144:	e007      	b.n	8006156 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	781a      	ldrb	r2, [r3, #0]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	3301      	adds	r3, #1
 8006154:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800615a:	b29b      	uxth	r3, r3
 800615c:	3b01      	subs	r3, #1
 800615e:	b29a      	uxth	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006168:	b29b      	uxth	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1cf      	bne.n	800610e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	2200      	movs	r2, #0
 8006176:	2140      	movs	r1, #64	; 0x40
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f000 f810 	bl	800619e <UART_WaitOnFlagUntilTimeout>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d001      	beq.n	8006188 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e006      	b.n	8006196 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2220      	movs	r2, #32
 800618c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006190:	2300      	movs	r3, #0
 8006192:	e000      	b.n	8006196 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006194:	2302      	movs	r3, #2
  }
}
 8006196:	4618      	mov	r0, r3
 8006198:	3720      	adds	r7, #32
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b090      	sub	sp, #64	; 0x40
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	60f8      	str	r0, [r7, #12]
 80061a6:	60b9      	str	r1, [r7, #8]
 80061a8:	603b      	str	r3, [r7, #0]
 80061aa:	4613      	mov	r3, r2
 80061ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ae:	e050      	b.n	8006252 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b6:	d04c      	beq.n	8006252 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80061b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d007      	beq.n	80061ce <UART_WaitOnFlagUntilTimeout+0x30>
 80061be:	f7fc fd6f 	bl	8002ca0 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d241      	bcs.n	8006252 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	330c      	adds	r3, #12
 80061d4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d8:	e853 3f00 	ldrex	r3, [r3]
 80061dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	330c      	adds	r3, #12
 80061ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061ee:	637a      	str	r2, [r7, #52]	; 0x34
 80061f0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061f6:	e841 2300 	strex	r3, r2, [r1]
 80061fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1e5      	bne.n	80061ce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	3314      	adds	r3, #20
 8006208:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	e853 3f00 	ldrex	r3, [r3]
 8006210:	613b      	str	r3, [r7, #16]
   return(result);
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f023 0301 	bic.w	r3, r3, #1
 8006218:	63bb      	str	r3, [r7, #56]	; 0x38
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3314      	adds	r3, #20
 8006220:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006222:	623a      	str	r2, [r7, #32]
 8006224:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006226:	69f9      	ldr	r1, [r7, #28]
 8006228:	6a3a      	ldr	r2, [r7, #32]
 800622a:	e841 2300 	strex	r3, r2, [r1]
 800622e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1e5      	bne.n	8006202 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2220      	movs	r2, #32
 800623a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2220      	movs	r2, #32
 8006242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e00f      	b.n	8006272 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	4013      	ands	r3, r2
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	429a      	cmp	r2, r3
 8006260:	bf0c      	ite	eq
 8006262:	2301      	moveq	r3, #1
 8006264:	2300      	movne	r3, #0
 8006266:	b2db      	uxtb	r3, r3
 8006268:	461a      	mov	r2, r3
 800626a:	79fb      	ldrb	r3, [r7, #7]
 800626c:	429a      	cmp	r2, r3
 800626e:	d09f      	beq.n	80061b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3740      	adds	r7, #64	; 0x40
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800627c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006280:	b0c0      	sub	sp, #256	; 0x100
 8006282:	af00      	add	r7, sp, #0
 8006284:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006298:	68d9      	ldr	r1, [r3, #12]
 800629a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	ea40 0301 	orr.w	r3, r0, r1
 80062a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	431a      	orrs	r2, r3
 80062b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	431a      	orrs	r2, r3
 80062bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c0:	69db      	ldr	r3, [r3, #28]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80062c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80062d4:	f021 010c 	bic.w	r1, r1, #12
 80062d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062e2:	430b      	orrs	r3, r1
 80062e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80062f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f6:	6999      	ldr	r1, [r3, #24]
 80062f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	ea40 0301 	orr.w	r3, r0, r1
 8006302:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	4b8f      	ldr	r3, [pc, #572]	; (8006548 <UART_SetConfig+0x2cc>)
 800630c:	429a      	cmp	r2, r3
 800630e:	d005      	beq.n	800631c <UART_SetConfig+0xa0>
 8006310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	4b8d      	ldr	r3, [pc, #564]	; (800654c <UART_SetConfig+0x2d0>)
 8006318:	429a      	cmp	r2, r3
 800631a:	d104      	bne.n	8006326 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800631c:	f7fe fd02 	bl	8004d24 <HAL_RCC_GetPCLK2Freq>
 8006320:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006324:	e003      	b.n	800632e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006326:	f7fe fce9 	bl	8004cfc <HAL_RCC_GetPCLK1Freq>
 800632a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800632e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006332:	69db      	ldr	r3, [r3, #28]
 8006334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006338:	f040 810c 	bne.w	8006554 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800633c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006340:	2200      	movs	r2, #0
 8006342:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006346:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800634a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800634e:	4622      	mov	r2, r4
 8006350:	462b      	mov	r3, r5
 8006352:	1891      	adds	r1, r2, r2
 8006354:	65b9      	str	r1, [r7, #88]	; 0x58
 8006356:	415b      	adcs	r3, r3
 8006358:	65fb      	str	r3, [r7, #92]	; 0x5c
 800635a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800635e:	4621      	mov	r1, r4
 8006360:	eb12 0801 	adds.w	r8, r2, r1
 8006364:	4629      	mov	r1, r5
 8006366:	eb43 0901 	adc.w	r9, r3, r1
 800636a:	f04f 0200 	mov.w	r2, #0
 800636e:	f04f 0300 	mov.w	r3, #0
 8006372:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006376:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800637a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800637e:	4690      	mov	r8, r2
 8006380:	4699      	mov	r9, r3
 8006382:	4623      	mov	r3, r4
 8006384:	eb18 0303 	adds.w	r3, r8, r3
 8006388:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800638c:	462b      	mov	r3, r5
 800638e:	eb49 0303 	adc.w	r3, r9, r3
 8006392:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80063a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80063aa:	460b      	mov	r3, r1
 80063ac:	18db      	adds	r3, r3, r3
 80063ae:	653b      	str	r3, [r7, #80]	; 0x50
 80063b0:	4613      	mov	r3, r2
 80063b2:	eb42 0303 	adc.w	r3, r2, r3
 80063b6:	657b      	str	r3, [r7, #84]	; 0x54
 80063b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80063bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80063c0:	f7fa fc6a 	bl	8000c98 <__aeabi_uldivmod>
 80063c4:	4602      	mov	r2, r0
 80063c6:	460b      	mov	r3, r1
 80063c8:	4b61      	ldr	r3, [pc, #388]	; (8006550 <UART_SetConfig+0x2d4>)
 80063ca:	fba3 2302 	umull	r2, r3, r3, r2
 80063ce:	095b      	lsrs	r3, r3, #5
 80063d0:	011c      	lsls	r4, r3, #4
 80063d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063d6:	2200      	movs	r2, #0
 80063d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80063e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80063e4:	4642      	mov	r2, r8
 80063e6:	464b      	mov	r3, r9
 80063e8:	1891      	adds	r1, r2, r2
 80063ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80063ec:	415b      	adcs	r3, r3
 80063ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80063f4:	4641      	mov	r1, r8
 80063f6:	eb12 0a01 	adds.w	sl, r2, r1
 80063fa:	4649      	mov	r1, r9
 80063fc:	eb43 0b01 	adc.w	fp, r3, r1
 8006400:	f04f 0200 	mov.w	r2, #0
 8006404:	f04f 0300 	mov.w	r3, #0
 8006408:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800640c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006410:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006414:	4692      	mov	sl, r2
 8006416:	469b      	mov	fp, r3
 8006418:	4643      	mov	r3, r8
 800641a:	eb1a 0303 	adds.w	r3, sl, r3
 800641e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006422:	464b      	mov	r3, r9
 8006424:	eb4b 0303 	adc.w	r3, fp, r3
 8006428:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800642c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006438:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800643c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006440:	460b      	mov	r3, r1
 8006442:	18db      	adds	r3, r3, r3
 8006444:	643b      	str	r3, [r7, #64]	; 0x40
 8006446:	4613      	mov	r3, r2
 8006448:	eb42 0303 	adc.w	r3, r2, r3
 800644c:	647b      	str	r3, [r7, #68]	; 0x44
 800644e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006452:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006456:	f7fa fc1f 	bl	8000c98 <__aeabi_uldivmod>
 800645a:	4602      	mov	r2, r0
 800645c:	460b      	mov	r3, r1
 800645e:	4611      	mov	r1, r2
 8006460:	4b3b      	ldr	r3, [pc, #236]	; (8006550 <UART_SetConfig+0x2d4>)
 8006462:	fba3 2301 	umull	r2, r3, r3, r1
 8006466:	095b      	lsrs	r3, r3, #5
 8006468:	2264      	movs	r2, #100	; 0x64
 800646a:	fb02 f303 	mul.w	r3, r2, r3
 800646e:	1acb      	subs	r3, r1, r3
 8006470:	00db      	lsls	r3, r3, #3
 8006472:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006476:	4b36      	ldr	r3, [pc, #216]	; (8006550 <UART_SetConfig+0x2d4>)
 8006478:	fba3 2302 	umull	r2, r3, r3, r2
 800647c:	095b      	lsrs	r3, r3, #5
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006484:	441c      	add	r4, r3
 8006486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800648a:	2200      	movs	r2, #0
 800648c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006490:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006494:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006498:	4642      	mov	r2, r8
 800649a:	464b      	mov	r3, r9
 800649c:	1891      	adds	r1, r2, r2
 800649e:	63b9      	str	r1, [r7, #56]	; 0x38
 80064a0:	415b      	adcs	r3, r3
 80064a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80064a8:	4641      	mov	r1, r8
 80064aa:	1851      	adds	r1, r2, r1
 80064ac:	6339      	str	r1, [r7, #48]	; 0x30
 80064ae:	4649      	mov	r1, r9
 80064b0:	414b      	adcs	r3, r1
 80064b2:	637b      	str	r3, [r7, #52]	; 0x34
 80064b4:	f04f 0200 	mov.w	r2, #0
 80064b8:	f04f 0300 	mov.w	r3, #0
 80064bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80064c0:	4659      	mov	r1, fp
 80064c2:	00cb      	lsls	r3, r1, #3
 80064c4:	4651      	mov	r1, sl
 80064c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064ca:	4651      	mov	r1, sl
 80064cc:	00ca      	lsls	r2, r1, #3
 80064ce:	4610      	mov	r0, r2
 80064d0:	4619      	mov	r1, r3
 80064d2:	4603      	mov	r3, r0
 80064d4:	4642      	mov	r2, r8
 80064d6:	189b      	adds	r3, r3, r2
 80064d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064dc:	464b      	mov	r3, r9
 80064de:	460a      	mov	r2, r1
 80064e0:	eb42 0303 	adc.w	r3, r2, r3
 80064e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80064f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80064f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80064fc:	460b      	mov	r3, r1
 80064fe:	18db      	adds	r3, r3, r3
 8006500:	62bb      	str	r3, [r7, #40]	; 0x28
 8006502:	4613      	mov	r3, r2
 8006504:	eb42 0303 	adc.w	r3, r2, r3
 8006508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800650a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800650e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006512:	f7fa fbc1 	bl	8000c98 <__aeabi_uldivmod>
 8006516:	4602      	mov	r2, r0
 8006518:	460b      	mov	r3, r1
 800651a:	4b0d      	ldr	r3, [pc, #52]	; (8006550 <UART_SetConfig+0x2d4>)
 800651c:	fba3 1302 	umull	r1, r3, r3, r2
 8006520:	095b      	lsrs	r3, r3, #5
 8006522:	2164      	movs	r1, #100	; 0x64
 8006524:	fb01 f303 	mul.w	r3, r1, r3
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	00db      	lsls	r3, r3, #3
 800652c:	3332      	adds	r3, #50	; 0x32
 800652e:	4a08      	ldr	r2, [pc, #32]	; (8006550 <UART_SetConfig+0x2d4>)
 8006530:	fba2 2303 	umull	r2, r3, r2, r3
 8006534:	095b      	lsrs	r3, r3, #5
 8006536:	f003 0207 	and.w	r2, r3, #7
 800653a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4422      	add	r2, r4
 8006542:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006544:	e105      	b.n	8006752 <UART_SetConfig+0x4d6>
 8006546:	bf00      	nop
 8006548:	40011000 	.word	0x40011000
 800654c:	40011400 	.word	0x40011400
 8006550:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006558:	2200      	movs	r2, #0
 800655a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800655e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006562:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006566:	4642      	mov	r2, r8
 8006568:	464b      	mov	r3, r9
 800656a:	1891      	adds	r1, r2, r2
 800656c:	6239      	str	r1, [r7, #32]
 800656e:	415b      	adcs	r3, r3
 8006570:	627b      	str	r3, [r7, #36]	; 0x24
 8006572:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006576:	4641      	mov	r1, r8
 8006578:	1854      	adds	r4, r2, r1
 800657a:	4649      	mov	r1, r9
 800657c:	eb43 0501 	adc.w	r5, r3, r1
 8006580:	f04f 0200 	mov.w	r2, #0
 8006584:	f04f 0300 	mov.w	r3, #0
 8006588:	00eb      	lsls	r3, r5, #3
 800658a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800658e:	00e2      	lsls	r2, r4, #3
 8006590:	4614      	mov	r4, r2
 8006592:	461d      	mov	r5, r3
 8006594:	4643      	mov	r3, r8
 8006596:	18e3      	adds	r3, r4, r3
 8006598:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800659c:	464b      	mov	r3, r9
 800659e:	eb45 0303 	adc.w	r3, r5, r3
 80065a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065b6:	f04f 0200 	mov.w	r2, #0
 80065ba:	f04f 0300 	mov.w	r3, #0
 80065be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80065c2:	4629      	mov	r1, r5
 80065c4:	008b      	lsls	r3, r1, #2
 80065c6:	4621      	mov	r1, r4
 80065c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065cc:	4621      	mov	r1, r4
 80065ce:	008a      	lsls	r2, r1, #2
 80065d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80065d4:	f7fa fb60 	bl	8000c98 <__aeabi_uldivmod>
 80065d8:	4602      	mov	r2, r0
 80065da:	460b      	mov	r3, r1
 80065dc:	4b60      	ldr	r3, [pc, #384]	; (8006760 <UART_SetConfig+0x4e4>)
 80065de:	fba3 2302 	umull	r2, r3, r3, r2
 80065e2:	095b      	lsrs	r3, r3, #5
 80065e4:	011c      	lsls	r4, r3, #4
 80065e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065ea:	2200      	movs	r2, #0
 80065ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80065f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80065f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80065f8:	4642      	mov	r2, r8
 80065fa:	464b      	mov	r3, r9
 80065fc:	1891      	adds	r1, r2, r2
 80065fe:	61b9      	str	r1, [r7, #24]
 8006600:	415b      	adcs	r3, r3
 8006602:	61fb      	str	r3, [r7, #28]
 8006604:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006608:	4641      	mov	r1, r8
 800660a:	1851      	adds	r1, r2, r1
 800660c:	6139      	str	r1, [r7, #16]
 800660e:	4649      	mov	r1, r9
 8006610:	414b      	adcs	r3, r1
 8006612:	617b      	str	r3, [r7, #20]
 8006614:	f04f 0200 	mov.w	r2, #0
 8006618:	f04f 0300 	mov.w	r3, #0
 800661c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006620:	4659      	mov	r1, fp
 8006622:	00cb      	lsls	r3, r1, #3
 8006624:	4651      	mov	r1, sl
 8006626:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800662a:	4651      	mov	r1, sl
 800662c:	00ca      	lsls	r2, r1, #3
 800662e:	4610      	mov	r0, r2
 8006630:	4619      	mov	r1, r3
 8006632:	4603      	mov	r3, r0
 8006634:	4642      	mov	r2, r8
 8006636:	189b      	adds	r3, r3, r2
 8006638:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800663c:	464b      	mov	r3, r9
 800663e:	460a      	mov	r2, r1
 8006640:	eb42 0303 	adc.w	r3, r2, r3
 8006644:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	67bb      	str	r3, [r7, #120]	; 0x78
 8006652:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006654:	f04f 0200 	mov.w	r2, #0
 8006658:	f04f 0300 	mov.w	r3, #0
 800665c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006660:	4649      	mov	r1, r9
 8006662:	008b      	lsls	r3, r1, #2
 8006664:	4641      	mov	r1, r8
 8006666:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800666a:	4641      	mov	r1, r8
 800666c:	008a      	lsls	r2, r1, #2
 800666e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006672:	f7fa fb11 	bl	8000c98 <__aeabi_uldivmod>
 8006676:	4602      	mov	r2, r0
 8006678:	460b      	mov	r3, r1
 800667a:	4b39      	ldr	r3, [pc, #228]	; (8006760 <UART_SetConfig+0x4e4>)
 800667c:	fba3 1302 	umull	r1, r3, r3, r2
 8006680:	095b      	lsrs	r3, r3, #5
 8006682:	2164      	movs	r1, #100	; 0x64
 8006684:	fb01 f303 	mul.w	r3, r1, r3
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	011b      	lsls	r3, r3, #4
 800668c:	3332      	adds	r3, #50	; 0x32
 800668e:	4a34      	ldr	r2, [pc, #208]	; (8006760 <UART_SetConfig+0x4e4>)
 8006690:	fba2 2303 	umull	r2, r3, r2, r3
 8006694:	095b      	lsrs	r3, r3, #5
 8006696:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800669a:	441c      	add	r4, r3
 800669c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066a0:	2200      	movs	r2, #0
 80066a2:	673b      	str	r3, [r7, #112]	; 0x70
 80066a4:	677a      	str	r2, [r7, #116]	; 0x74
 80066a6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80066aa:	4642      	mov	r2, r8
 80066ac:	464b      	mov	r3, r9
 80066ae:	1891      	adds	r1, r2, r2
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	415b      	adcs	r3, r3
 80066b4:	60fb      	str	r3, [r7, #12]
 80066b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066ba:	4641      	mov	r1, r8
 80066bc:	1851      	adds	r1, r2, r1
 80066be:	6039      	str	r1, [r7, #0]
 80066c0:	4649      	mov	r1, r9
 80066c2:	414b      	adcs	r3, r1
 80066c4:	607b      	str	r3, [r7, #4]
 80066c6:	f04f 0200 	mov.w	r2, #0
 80066ca:	f04f 0300 	mov.w	r3, #0
 80066ce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80066d2:	4659      	mov	r1, fp
 80066d4:	00cb      	lsls	r3, r1, #3
 80066d6:	4651      	mov	r1, sl
 80066d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066dc:	4651      	mov	r1, sl
 80066de:	00ca      	lsls	r2, r1, #3
 80066e0:	4610      	mov	r0, r2
 80066e2:	4619      	mov	r1, r3
 80066e4:	4603      	mov	r3, r0
 80066e6:	4642      	mov	r2, r8
 80066e8:	189b      	adds	r3, r3, r2
 80066ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80066ec:	464b      	mov	r3, r9
 80066ee:	460a      	mov	r2, r1
 80066f0:	eb42 0303 	adc.w	r3, r2, r3
 80066f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	663b      	str	r3, [r7, #96]	; 0x60
 8006700:	667a      	str	r2, [r7, #100]	; 0x64
 8006702:	f04f 0200 	mov.w	r2, #0
 8006706:	f04f 0300 	mov.w	r3, #0
 800670a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800670e:	4649      	mov	r1, r9
 8006710:	008b      	lsls	r3, r1, #2
 8006712:	4641      	mov	r1, r8
 8006714:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006718:	4641      	mov	r1, r8
 800671a:	008a      	lsls	r2, r1, #2
 800671c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006720:	f7fa faba 	bl	8000c98 <__aeabi_uldivmod>
 8006724:	4602      	mov	r2, r0
 8006726:	460b      	mov	r3, r1
 8006728:	4b0d      	ldr	r3, [pc, #52]	; (8006760 <UART_SetConfig+0x4e4>)
 800672a:	fba3 1302 	umull	r1, r3, r3, r2
 800672e:	095b      	lsrs	r3, r3, #5
 8006730:	2164      	movs	r1, #100	; 0x64
 8006732:	fb01 f303 	mul.w	r3, r1, r3
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	011b      	lsls	r3, r3, #4
 800673a:	3332      	adds	r3, #50	; 0x32
 800673c:	4a08      	ldr	r2, [pc, #32]	; (8006760 <UART_SetConfig+0x4e4>)
 800673e:	fba2 2303 	umull	r2, r3, r2, r3
 8006742:	095b      	lsrs	r3, r3, #5
 8006744:	f003 020f 	and.w	r2, r3, #15
 8006748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4422      	add	r2, r4
 8006750:	609a      	str	r2, [r3, #8]
}
 8006752:	bf00      	nop
 8006754:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006758:	46bd      	mov	sp, r7
 800675a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800675e:	bf00      	nop
 8006760:	51eb851f 	.word	0x51eb851f

08006764 <__errno>:
 8006764:	4b01      	ldr	r3, [pc, #4]	; (800676c <__errno+0x8>)
 8006766:	6818      	ldr	r0, [r3, #0]
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	20000040 	.word	0x20000040

08006770 <__libc_init_array>:
 8006770:	b570      	push	{r4, r5, r6, lr}
 8006772:	4d0d      	ldr	r5, [pc, #52]	; (80067a8 <__libc_init_array+0x38>)
 8006774:	4c0d      	ldr	r4, [pc, #52]	; (80067ac <__libc_init_array+0x3c>)
 8006776:	1b64      	subs	r4, r4, r5
 8006778:	10a4      	asrs	r4, r4, #2
 800677a:	2600      	movs	r6, #0
 800677c:	42a6      	cmp	r6, r4
 800677e:	d109      	bne.n	8006794 <__libc_init_array+0x24>
 8006780:	4d0b      	ldr	r5, [pc, #44]	; (80067b0 <__libc_init_array+0x40>)
 8006782:	4c0c      	ldr	r4, [pc, #48]	; (80067b4 <__libc_init_array+0x44>)
 8006784:	f004 fd1a 	bl	800b1bc <_init>
 8006788:	1b64      	subs	r4, r4, r5
 800678a:	10a4      	asrs	r4, r4, #2
 800678c:	2600      	movs	r6, #0
 800678e:	42a6      	cmp	r6, r4
 8006790:	d105      	bne.n	800679e <__libc_init_array+0x2e>
 8006792:	bd70      	pop	{r4, r5, r6, pc}
 8006794:	f855 3b04 	ldr.w	r3, [r5], #4
 8006798:	4798      	blx	r3
 800679a:	3601      	adds	r6, #1
 800679c:	e7ee      	b.n	800677c <__libc_init_array+0xc>
 800679e:	f855 3b04 	ldr.w	r3, [r5], #4
 80067a2:	4798      	blx	r3
 80067a4:	3601      	adds	r6, #1
 80067a6:	e7f2      	b.n	800678e <__libc_init_array+0x1e>
 80067a8:	0800b984 	.word	0x0800b984
 80067ac:	0800b984 	.word	0x0800b984
 80067b0:	0800b984 	.word	0x0800b984
 80067b4:	0800b988 	.word	0x0800b988

080067b8 <memcpy>:
 80067b8:	440a      	add	r2, r1
 80067ba:	4291      	cmp	r1, r2
 80067bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80067c0:	d100      	bne.n	80067c4 <memcpy+0xc>
 80067c2:	4770      	bx	lr
 80067c4:	b510      	push	{r4, lr}
 80067c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067ce:	4291      	cmp	r1, r2
 80067d0:	d1f9      	bne.n	80067c6 <memcpy+0xe>
 80067d2:	bd10      	pop	{r4, pc}

080067d4 <memset>:
 80067d4:	4402      	add	r2, r0
 80067d6:	4603      	mov	r3, r0
 80067d8:	4293      	cmp	r3, r2
 80067da:	d100      	bne.n	80067de <memset+0xa>
 80067dc:	4770      	bx	lr
 80067de:	f803 1b01 	strb.w	r1, [r3], #1
 80067e2:	e7f9      	b.n	80067d8 <memset+0x4>

080067e4 <__cvt>:
 80067e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067e8:	ec55 4b10 	vmov	r4, r5, d0
 80067ec:	2d00      	cmp	r5, #0
 80067ee:	460e      	mov	r6, r1
 80067f0:	4619      	mov	r1, r3
 80067f2:	462b      	mov	r3, r5
 80067f4:	bfbb      	ittet	lt
 80067f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80067fa:	461d      	movlt	r5, r3
 80067fc:	2300      	movge	r3, #0
 80067fe:	232d      	movlt	r3, #45	; 0x2d
 8006800:	700b      	strb	r3, [r1, #0]
 8006802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006804:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006808:	4691      	mov	r9, r2
 800680a:	f023 0820 	bic.w	r8, r3, #32
 800680e:	bfbc      	itt	lt
 8006810:	4622      	movlt	r2, r4
 8006812:	4614      	movlt	r4, r2
 8006814:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006818:	d005      	beq.n	8006826 <__cvt+0x42>
 800681a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800681e:	d100      	bne.n	8006822 <__cvt+0x3e>
 8006820:	3601      	adds	r6, #1
 8006822:	2102      	movs	r1, #2
 8006824:	e000      	b.n	8006828 <__cvt+0x44>
 8006826:	2103      	movs	r1, #3
 8006828:	ab03      	add	r3, sp, #12
 800682a:	9301      	str	r3, [sp, #4]
 800682c:	ab02      	add	r3, sp, #8
 800682e:	9300      	str	r3, [sp, #0]
 8006830:	ec45 4b10 	vmov	d0, r4, r5
 8006834:	4653      	mov	r3, sl
 8006836:	4632      	mov	r2, r6
 8006838:	f001 fefa 	bl	8008630 <_dtoa_r>
 800683c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006840:	4607      	mov	r7, r0
 8006842:	d102      	bne.n	800684a <__cvt+0x66>
 8006844:	f019 0f01 	tst.w	r9, #1
 8006848:	d022      	beq.n	8006890 <__cvt+0xac>
 800684a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800684e:	eb07 0906 	add.w	r9, r7, r6
 8006852:	d110      	bne.n	8006876 <__cvt+0x92>
 8006854:	783b      	ldrb	r3, [r7, #0]
 8006856:	2b30      	cmp	r3, #48	; 0x30
 8006858:	d10a      	bne.n	8006870 <__cvt+0x8c>
 800685a:	2200      	movs	r2, #0
 800685c:	2300      	movs	r3, #0
 800685e:	4620      	mov	r0, r4
 8006860:	4629      	mov	r1, r5
 8006862:	f7fa f939 	bl	8000ad8 <__aeabi_dcmpeq>
 8006866:	b918      	cbnz	r0, 8006870 <__cvt+0x8c>
 8006868:	f1c6 0601 	rsb	r6, r6, #1
 800686c:	f8ca 6000 	str.w	r6, [sl]
 8006870:	f8da 3000 	ldr.w	r3, [sl]
 8006874:	4499      	add	r9, r3
 8006876:	2200      	movs	r2, #0
 8006878:	2300      	movs	r3, #0
 800687a:	4620      	mov	r0, r4
 800687c:	4629      	mov	r1, r5
 800687e:	f7fa f92b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006882:	b108      	cbz	r0, 8006888 <__cvt+0xa4>
 8006884:	f8cd 900c 	str.w	r9, [sp, #12]
 8006888:	2230      	movs	r2, #48	; 0x30
 800688a:	9b03      	ldr	r3, [sp, #12]
 800688c:	454b      	cmp	r3, r9
 800688e:	d307      	bcc.n	80068a0 <__cvt+0xbc>
 8006890:	9b03      	ldr	r3, [sp, #12]
 8006892:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006894:	1bdb      	subs	r3, r3, r7
 8006896:	4638      	mov	r0, r7
 8006898:	6013      	str	r3, [r2, #0]
 800689a:	b004      	add	sp, #16
 800689c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068a0:	1c59      	adds	r1, r3, #1
 80068a2:	9103      	str	r1, [sp, #12]
 80068a4:	701a      	strb	r2, [r3, #0]
 80068a6:	e7f0      	b.n	800688a <__cvt+0xa6>

080068a8 <__exponent>:
 80068a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068aa:	4603      	mov	r3, r0
 80068ac:	2900      	cmp	r1, #0
 80068ae:	bfb8      	it	lt
 80068b0:	4249      	neglt	r1, r1
 80068b2:	f803 2b02 	strb.w	r2, [r3], #2
 80068b6:	bfb4      	ite	lt
 80068b8:	222d      	movlt	r2, #45	; 0x2d
 80068ba:	222b      	movge	r2, #43	; 0x2b
 80068bc:	2909      	cmp	r1, #9
 80068be:	7042      	strb	r2, [r0, #1]
 80068c0:	dd2a      	ble.n	8006918 <__exponent+0x70>
 80068c2:	f10d 0407 	add.w	r4, sp, #7
 80068c6:	46a4      	mov	ip, r4
 80068c8:	270a      	movs	r7, #10
 80068ca:	46a6      	mov	lr, r4
 80068cc:	460a      	mov	r2, r1
 80068ce:	fb91 f6f7 	sdiv	r6, r1, r7
 80068d2:	fb07 1516 	mls	r5, r7, r6, r1
 80068d6:	3530      	adds	r5, #48	; 0x30
 80068d8:	2a63      	cmp	r2, #99	; 0x63
 80068da:	f104 34ff 	add.w	r4, r4, #4294967295
 80068de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80068e2:	4631      	mov	r1, r6
 80068e4:	dcf1      	bgt.n	80068ca <__exponent+0x22>
 80068e6:	3130      	adds	r1, #48	; 0x30
 80068e8:	f1ae 0502 	sub.w	r5, lr, #2
 80068ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 80068f0:	1c44      	adds	r4, r0, #1
 80068f2:	4629      	mov	r1, r5
 80068f4:	4561      	cmp	r1, ip
 80068f6:	d30a      	bcc.n	800690e <__exponent+0x66>
 80068f8:	f10d 0209 	add.w	r2, sp, #9
 80068fc:	eba2 020e 	sub.w	r2, r2, lr
 8006900:	4565      	cmp	r5, ip
 8006902:	bf88      	it	hi
 8006904:	2200      	movhi	r2, #0
 8006906:	4413      	add	r3, r2
 8006908:	1a18      	subs	r0, r3, r0
 800690a:	b003      	add	sp, #12
 800690c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800690e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006912:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006916:	e7ed      	b.n	80068f4 <__exponent+0x4c>
 8006918:	2330      	movs	r3, #48	; 0x30
 800691a:	3130      	adds	r1, #48	; 0x30
 800691c:	7083      	strb	r3, [r0, #2]
 800691e:	70c1      	strb	r1, [r0, #3]
 8006920:	1d03      	adds	r3, r0, #4
 8006922:	e7f1      	b.n	8006908 <__exponent+0x60>

08006924 <_printf_float>:
 8006924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006928:	ed2d 8b02 	vpush	{d8}
 800692c:	b08d      	sub	sp, #52	; 0x34
 800692e:	460c      	mov	r4, r1
 8006930:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006934:	4616      	mov	r6, r2
 8006936:	461f      	mov	r7, r3
 8006938:	4605      	mov	r5, r0
 800693a:	f003 f98d 	bl	8009c58 <_localeconv_r>
 800693e:	f8d0 a000 	ldr.w	sl, [r0]
 8006942:	4650      	mov	r0, sl
 8006944:	f7f9 fc4c 	bl	80001e0 <strlen>
 8006948:	2300      	movs	r3, #0
 800694a:	930a      	str	r3, [sp, #40]	; 0x28
 800694c:	6823      	ldr	r3, [r4, #0]
 800694e:	9305      	str	r3, [sp, #20]
 8006950:	f8d8 3000 	ldr.w	r3, [r8]
 8006954:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006958:	3307      	adds	r3, #7
 800695a:	f023 0307 	bic.w	r3, r3, #7
 800695e:	f103 0208 	add.w	r2, r3, #8
 8006962:	f8c8 2000 	str.w	r2, [r8]
 8006966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800696e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006972:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006976:	9307      	str	r3, [sp, #28]
 8006978:	f8cd 8018 	str.w	r8, [sp, #24]
 800697c:	ee08 0a10 	vmov	s16, r0
 8006980:	4b9f      	ldr	r3, [pc, #636]	; (8006c00 <_printf_float+0x2dc>)
 8006982:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006986:	f04f 32ff 	mov.w	r2, #4294967295
 800698a:	f7fa f8d7 	bl	8000b3c <__aeabi_dcmpun>
 800698e:	bb88      	cbnz	r0, 80069f4 <_printf_float+0xd0>
 8006990:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006994:	4b9a      	ldr	r3, [pc, #616]	; (8006c00 <_printf_float+0x2dc>)
 8006996:	f04f 32ff 	mov.w	r2, #4294967295
 800699a:	f7fa f8b1 	bl	8000b00 <__aeabi_dcmple>
 800699e:	bb48      	cbnz	r0, 80069f4 <_printf_float+0xd0>
 80069a0:	2200      	movs	r2, #0
 80069a2:	2300      	movs	r3, #0
 80069a4:	4640      	mov	r0, r8
 80069a6:	4649      	mov	r1, r9
 80069a8:	f7fa f8a0 	bl	8000aec <__aeabi_dcmplt>
 80069ac:	b110      	cbz	r0, 80069b4 <_printf_float+0x90>
 80069ae:	232d      	movs	r3, #45	; 0x2d
 80069b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069b4:	4b93      	ldr	r3, [pc, #588]	; (8006c04 <_printf_float+0x2e0>)
 80069b6:	4894      	ldr	r0, [pc, #592]	; (8006c08 <_printf_float+0x2e4>)
 80069b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80069bc:	bf94      	ite	ls
 80069be:	4698      	movls	r8, r3
 80069c0:	4680      	movhi	r8, r0
 80069c2:	2303      	movs	r3, #3
 80069c4:	6123      	str	r3, [r4, #16]
 80069c6:	9b05      	ldr	r3, [sp, #20]
 80069c8:	f023 0204 	bic.w	r2, r3, #4
 80069cc:	6022      	str	r2, [r4, #0]
 80069ce:	f04f 0900 	mov.w	r9, #0
 80069d2:	9700      	str	r7, [sp, #0]
 80069d4:	4633      	mov	r3, r6
 80069d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80069d8:	4621      	mov	r1, r4
 80069da:	4628      	mov	r0, r5
 80069dc:	f000 f9d8 	bl	8006d90 <_printf_common>
 80069e0:	3001      	adds	r0, #1
 80069e2:	f040 8090 	bne.w	8006b06 <_printf_float+0x1e2>
 80069e6:	f04f 30ff 	mov.w	r0, #4294967295
 80069ea:	b00d      	add	sp, #52	; 0x34
 80069ec:	ecbd 8b02 	vpop	{d8}
 80069f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f4:	4642      	mov	r2, r8
 80069f6:	464b      	mov	r3, r9
 80069f8:	4640      	mov	r0, r8
 80069fa:	4649      	mov	r1, r9
 80069fc:	f7fa f89e 	bl	8000b3c <__aeabi_dcmpun>
 8006a00:	b140      	cbz	r0, 8006a14 <_printf_float+0xf0>
 8006a02:	464b      	mov	r3, r9
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	bfbc      	itt	lt
 8006a08:	232d      	movlt	r3, #45	; 0x2d
 8006a0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006a0e:	487f      	ldr	r0, [pc, #508]	; (8006c0c <_printf_float+0x2e8>)
 8006a10:	4b7f      	ldr	r3, [pc, #508]	; (8006c10 <_printf_float+0x2ec>)
 8006a12:	e7d1      	b.n	80069b8 <_printf_float+0x94>
 8006a14:	6863      	ldr	r3, [r4, #4]
 8006a16:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006a1a:	9206      	str	r2, [sp, #24]
 8006a1c:	1c5a      	adds	r2, r3, #1
 8006a1e:	d13f      	bne.n	8006aa0 <_printf_float+0x17c>
 8006a20:	2306      	movs	r3, #6
 8006a22:	6063      	str	r3, [r4, #4]
 8006a24:	9b05      	ldr	r3, [sp, #20]
 8006a26:	6861      	ldr	r1, [r4, #4]
 8006a28:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	9303      	str	r3, [sp, #12]
 8006a30:	ab0a      	add	r3, sp, #40	; 0x28
 8006a32:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006a36:	ab09      	add	r3, sp, #36	; 0x24
 8006a38:	ec49 8b10 	vmov	d0, r8, r9
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	6022      	str	r2, [r4, #0]
 8006a40:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006a44:	4628      	mov	r0, r5
 8006a46:	f7ff fecd 	bl	80067e4 <__cvt>
 8006a4a:	9b06      	ldr	r3, [sp, #24]
 8006a4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a4e:	2b47      	cmp	r3, #71	; 0x47
 8006a50:	4680      	mov	r8, r0
 8006a52:	d108      	bne.n	8006a66 <_printf_float+0x142>
 8006a54:	1cc8      	adds	r0, r1, #3
 8006a56:	db02      	blt.n	8006a5e <_printf_float+0x13a>
 8006a58:	6863      	ldr	r3, [r4, #4]
 8006a5a:	4299      	cmp	r1, r3
 8006a5c:	dd41      	ble.n	8006ae2 <_printf_float+0x1be>
 8006a5e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006a62:	fa5f fb8b 	uxtb.w	fp, fp
 8006a66:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a6a:	d820      	bhi.n	8006aae <_printf_float+0x18a>
 8006a6c:	3901      	subs	r1, #1
 8006a6e:	465a      	mov	r2, fp
 8006a70:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006a74:	9109      	str	r1, [sp, #36]	; 0x24
 8006a76:	f7ff ff17 	bl	80068a8 <__exponent>
 8006a7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a7c:	1813      	adds	r3, r2, r0
 8006a7e:	2a01      	cmp	r2, #1
 8006a80:	4681      	mov	r9, r0
 8006a82:	6123      	str	r3, [r4, #16]
 8006a84:	dc02      	bgt.n	8006a8c <_printf_float+0x168>
 8006a86:	6822      	ldr	r2, [r4, #0]
 8006a88:	07d2      	lsls	r2, r2, #31
 8006a8a:	d501      	bpl.n	8006a90 <_printf_float+0x16c>
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	6123      	str	r3, [r4, #16]
 8006a90:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d09c      	beq.n	80069d2 <_printf_float+0xae>
 8006a98:	232d      	movs	r3, #45	; 0x2d
 8006a9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a9e:	e798      	b.n	80069d2 <_printf_float+0xae>
 8006aa0:	9a06      	ldr	r2, [sp, #24]
 8006aa2:	2a47      	cmp	r2, #71	; 0x47
 8006aa4:	d1be      	bne.n	8006a24 <_printf_float+0x100>
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1bc      	bne.n	8006a24 <_printf_float+0x100>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e7b9      	b.n	8006a22 <_printf_float+0xfe>
 8006aae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006ab2:	d118      	bne.n	8006ae6 <_printf_float+0x1c2>
 8006ab4:	2900      	cmp	r1, #0
 8006ab6:	6863      	ldr	r3, [r4, #4]
 8006ab8:	dd0b      	ble.n	8006ad2 <_printf_float+0x1ae>
 8006aba:	6121      	str	r1, [r4, #16]
 8006abc:	b913      	cbnz	r3, 8006ac4 <_printf_float+0x1a0>
 8006abe:	6822      	ldr	r2, [r4, #0]
 8006ac0:	07d0      	lsls	r0, r2, #31
 8006ac2:	d502      	bpl.n	8006aca <_printf_float+0x1a6>
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	440b      	add	r3, r1
 8006ac8:	6123      	str	r3, [r4, #16]
 8006aca:	65a1      	str	r1, [r4, #88]	; 0x58
 8006acc:	f04f 0900 	mov.w	r9, #0
 8006ad0:	e7de      	b.n	8006a90 <_printf_float+0x16c>
 8006ad2:	b913      	cbnz	r3, 8006ada <_printf_float+0x1b6>
 8006ad4:	6822      	ldr	r2, [r4, #0]
 8006ad6:	07d2      	lsls	r2, r2, #31
 8006ad8:	d501      	bpl.n	8006ade <_printf_float+0x1ba>
 8006ada:	3302      	adds	r3, #2
 8006adc:	e7f4      	b.n	8006ac8 <_printf_float+0x1a4>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e7f2      	b.n	8006ac8 <_printf_float+0x1a4>
 8006ae2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ae8:	4299      	cmp	r1, r3
 8006aea:	db05      	blt.n	8006af8 <_printf_float+0x1d4>
 8006aec:	6823      	ldr	r3, [r4, #0]
 8006aee:	6121      	str	r1, [r4, #16]
 8006af0:	07d8      	lsls	r0, r3, #31
 8006af2:	d5ea      	bpl.n	8006aca <_printf_float+0x1a6>
 8006af4:	1c4b      	adds	r3, r1, #1
 8006af6:	e7e7      	b.n	8006ac8 <_printf_float+0x1a4>
 8006af8:	2900      	cmp	r1, #0
 8006afa:	bfd4      	ite	le
 8006afc:	f1c1 0202 	rsble	r2, r1, #2
 8006b00:	2201      	movgt	r2, #1
 8006b02:	4413      	add	r3, r2
 8006b04:	e7e0      	b.n	8006ac8 <_printf_float+0x1a4>
 8006b06:	6823      	ldr	r3, [r4, #0]
 8006b08:	055a      	lsls	r2, r3, #21
 8006b0a:	d407      	bmi.n	8006b1c <_printf_float+0x1f8>
 8006b0c:	6923      	ldr	r3, [r4, #16]
 8006b0e:	4642      	mov	r2, r8
 8006b10:	4631      	mov	r1, r6
 8006b12:	4628      	mov	r0, r5
 8006b14:	47b8      	blx	r7
 8006b16:	3001      	adds	r0, #1
 8006b18:	d12c      	bne.n	8006b74 <_printf_float+0x250>
 8006b1a:	e764      	b.n	80069e6 <_printf_float+0xc2>
 8006b1c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006b20:	f240 80e0 	bls.w	8006ce4 <_printf_float+0x3c0>
 8006b24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b28:	2200      	movs	r2, #0
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	f7f9 ffd4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b30:	2800      	cmp	r0, #0
 8006b32:	d034      	beq.n	8006b9e <_printf_float+0x27a>
 8006b34:	4a37      	ldr	r2, [pc, #220]	; (8006c14 <_printf_float+0x2f0>)
 8006b36:	2301      	movs	r3, #1
 8006b38:	4631      	mov	r1, r6
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	47b8      	blx	r7
 8006b3e:	3001      	adds	r0, #1
 8006b40:	f43f af51 	beq.w	80069e6 <_printf_float+0xc2>
 8006b44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	db02      	blt.n	8006b52 <_printf_float+0x22e>
 8006b4c:	6823      	ldr	r3, [r4, #0]
 8006b4e:	07d8      	lsls	r0, r3, #31
 8006b50:	d510      	bpl.n	8006b74 <_printf_float+0x250>
 8006b52:	ee18 3a10 	vmov	r3, s16
 8006b56:	4652      	mov	r2, sl
 8006b58:	4631      	mov	r1, r6
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	47b8      	blx	r7
 8006b5e:	3001      	adds	r0, #1
 8006b60:	f43f af41 	beq.w	80069e6 <_printf_float+0xc2>
 8006b64:	f04f 0800 	mov.w	r8, #0
 8006b68:	f104 091a 	add.w	r9, r4, #26
 8006b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	4543      	cmp	r3, r8
 8006b72:	dc09      	bgt.n	8006b88 <_printf_float+0x264>
 8006b74:	6823      	ldr	r3, [r4, #0]
 8006b76:	079b      	lsls	r3, r3, #30
 8006b78:	f100 8105 	bmi.w	8006d86 <_printf_float+0x462>
 8006b7c:	68e0      	ldr	r0, [r4, #12]
 8006b7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b80:	4298      	cmp	r0, r3
 8006b82:	bfb8      	it	lt
 8006b84:	4618      	movlt	r0, r3
 8006b86:	e730      	b.n	80069ea <_printf_float+0xc6>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	464a      	mov	r2, r9
 8006b8c:	4631      	mov	r1, r6
 8006b8e:	4628      	mov	r0, r5
 8006b90:	47b8      	blx	r7
 8006b92:	3001      	adds	r0, #1
 8006b94:	f43f af27 	beq.w	80069e6 <_printf_float+0xc2>
 8006b98:	f108 0801 	add.w	r8, r8, #1
 8006b9c:	e7e6      	b.n	8006b6c <_printf_float+0x248>
 8006b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	dc39      	bgt.n	8006c18 <_printf_float+0x2f4>
 8006ba4:	4a1b      	ldr	r2, [pc, #108]	; (8006c14 <_printf_float+0x2f0>)
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	4631      	mov	r1, r6
 8006baa:	4628      	mov	r0, r5
 8006bac:	47b8      	blx	r7
 8006bae:	3001      	adds	r0, #1
 8006bb0:	f43f af19 	beq.w	80069e6 <_printf_float+0xc2>
 8006bb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	d102      	bne.n	8006bc2 <_printf_float+0x29e>
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	07d9      	lsls	r1, r3, #31
 8006bc0:	d5d8      	bpl.n	8006b74 <_printf_float+0x250>
 8006bc2:	ee18 3a10 	vmov	r3, s16
 8006bc6:	4652      	mov	r2, sl
 8006bc8:	4631      	mov	r1, r6
 8006bca:	4628      	mov	r0, r5
 8006bcc:	47b8      	blx	r7
 8006bce:	3001      	adds	r0, #1
 8006bd0:	f43f af09 	beq.w	80069e6 <_printf_float+0xc2>
 8006bd4:	f04f 0900 	mov.w	r9, #0
 8006bd8:	f104 0a1a 	add.w	sl, r4, #26
 8006bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bde:	425b      	negs	r3, r3
 8006be0:	454b      	cmp	r3, r9
 8006be2:	dc01      	bgt.n	8006be8 <_printf_float+0x2c4>
 8006be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006be6:	e792      	b.n	8006b0e <_printf_float+0x1ea>
 8006be8:	2301      	movs	r3, #1
 8006bea:	4652      	mov	r2, sl
 8006bec:	4631      	mov	r1, r6
 8006bee:	4628      	mov	r0, r5
 8006bf0:	47b8      	blx	r7
 8006bf2:	3001      	adds	r0, #1
 8006bf4:	f43f aef7 	beq.w	80069e6 <_printf_float+0xc2>
 8006bf8:	f109 0901 	add.w	r9, r9, #1
 8006bfc:	e7ee      	b.n	8006bdc <_printf_float+0x2b8>
 8006bfe:	bf00      	nop
 8006c00:	7fefffff 	.word	0x7fefffff
 8006c04:	0800b4d4 	.word	0x0800b4d4
 8006c08:	0800b4d8 	.word	0x0800b4d8
 8006c0c:	0800b4e0 	.word	0x0800b4e0
 8006c10:	0800b4dc 	.word	0x0800b4dc
 8006c14:	0800b4e4 	.word	0x0800b4e4
 8006c18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	bfa8      	it	ge
 8006c20:	461a      	movge	r2, r3
 8006c22:	2a00      	cmp	r2, #0
 8006c24:	4691      	mov	r9, r2
 8006c26:	dc37      	bgt.n	8006c98 <_printf_float+0x374>
 8006c28:	f04f 0b00 	mov.w	fp, #0
 8006c2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c30:	f104 021a 	add.w	r2, r4, #26
 8006c34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c36:	9305      	str	r3, [sp, #20]
 8006c38:	eba3 0309 	sub.w	r3, r3, r9
 8006c3c:	455b      	cmp	r3, fp
 8006c3e:	dc33      	bgt.n	8006ca8 <_printf_float+0x384>
 8006c40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c44:	429a      	cmp	r2, r3
 8006c46:	db3b      	blt.n	8006cc0 <_printf_float+0x39c>
 8006c48:	6823      	ldr	r3, [r4, #0]
 8006c4a:	07da      	lsls	r2, r3, #31
 8006c4c:	d438      	bmi.n	8006cc0 <_printf_float+0x39c>
 8006c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c50:	9a05      	ldr	r2, [sp, #20]
 8006c52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c54:	1a9a      	subs	r2, r3, r2
 8006c56:	eba3 0901 	sub.w	r9, r3, r1
 8006c5a:	4591      	cmp	r9, r2
 8006c5c:	bfa8      	it	ge
 8006c5e:	4691      	movge	r9, r2
 8006c60:	f1b9 0f00 	cmp.w	r9, #0
 8006c64:	dc35      	bgt.n	8006cd2 <_printf_float+0x3ae>
 8006c66:	f04f 0800 	mov.w	r8, #0
 8006c6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c6e:	f104 0a1a 	add.w	sl, r4, #26
 8006c72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c76:	1a9b      	subs	r3, r3, r2
 8006c78:	eba3 0309 	sub.w	r3, r3, r9
 8006c7c:	4543      	cmp	r3, r8
 8006c7e:	f77f af79 	ble.w	8006b74 <_printf_float+0x250>
 8006c82:	2301      	movs	r3, #1
 8006c84:	4652      	mov	r2, sl
 8006c86:	4631      	mov	r1, r6
 8006c88:	4628      	mov	r0, r5
 8006c8a:	47b8      	blx	r7
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	f43f aeaa 	beq.w	80069e6 <_printf_float+0xc2>
 8006c92:	f108 0801 	add.w	r8, r8, #1
 8006c96:	e7ec      	b.n	8006c72 <_printf_float+0x34e>
 8006c98:	4613      	mov	r3, r2
 8006c9a:	4631      	mov	r1, r6
 8006c9c:	4642      	mov	r2, r8
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	47b8      	blx	r7
 8006ca2:	3001      	adds	r0, #1
 8006ca4:	d1c0      	bne.n	8006c28 <_printf_float+0x304>
 8006ca6:	e69e      	b.n	80069e6 <_printf_float+0xc2>
 8006ca8:	2301      	movs	r3, #1
 8006caa:	4631      	mov	r1, r6
 8006cac:	4628      	mov	r0, r5
 8006cae:	9205      	str	r2, [sp, #20]
 8006cb0:	47b8      	blx	r7
 8006cb2:	3001      	adds	r0, #1
 8006cb4:	f43f ae97 	beq.w	80069e6 <_printf_float+0xc2>
 8006cb8:	9a05      	ldr	r2, [sp, #20]
 8006cba:	f10b 0b01 	add.w	fp, fp, #1
 8006cbe:	e7b9      	b.n	8006c34 <_printf_float+0x310>
 8006cc0:	ee18 3a10 	vmov	r3, s16
 8006cc4:	4652      	mov	r2, sl
 8006cc6:	4631      	mov	r1, r6
 8006cc8:	4628      	mov	r0, r5
 8006cca:	47b8      	blx	r7
 8006ccc:	3001      	adds	r0, #1
 8006cce:	d1be      	bne.n	8006c4e <_printf_float+0x32a>
 8006cd0:	e689      	b.n	80069e6 <_printf_float+0xc2>
 8006cd2:	9a05      	ldr	r2, [sp, #20]
 8006cd4:	464b      	mov	r3, r9
 8006cd6:	4442      	add	r2, r8
 8006cd8:	4631      	mov	r1, r6
 8006cda:	4628      	mov	r0, r5
 8006cdc:	47b8      	blx	r7
 8006cde:	3001      	adds	r0, #1
 8006ce0:	d1c1      	bne.n	8006c66 <_printf_float+0x342>
 8006ce2:	e680      	b.n	80069e6 <_printf_float+0xc2>
 8006ce4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ce6:	2a01      	cmp	r2, #1
 8006ce8:	dc01      	bgt.n	8006cee <_printf_float+0x3ca>
 8006cea:	07db      	lsls	r3, r3, #31
 8006cec:	d538      	bpl.n	8006d60 <_printf_float+0x43c>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	4642      	mov	r2, r8
 8006cf2:	4631      	mov	r1, r6
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	47b8      	blx	r7
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	f43f ae74 	beq.w	80069e6 <_printf_float+0xc2>
 8006cfe:	ee18 3a10 	vmov	r3, s16
 8006d02:	4652      	mov	r2, sl
 8006d04:	4631      	mov	r1, r6
 8006d06:	4628      	mov	r0, r5
 8006d08:	47b8      	blx	r7
 8006d0a:	3001      	adds	r0, #1
 8006d0c:	f43f ae6b 	beq.w	80069e6 <_printf_float+0xc2>
 8006d10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d14:	2200      	movs	r2, #0
 8006d16:	2300      	movs	r3, #0
 8006d18:	f7f9 fede 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d1c:	b9d8      	cbnz	r0, 8006d56 <_printf_float+0x432>
 8006d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d20:	f108 0201 	add.w	r2, r8, #1
 8006d24:	3b01      	subs	r3, #1
 8006d26:	4631      	mov	r1, r6
 8006d28:	4628      	mov	r0, r5
 8006d2a:	47b8      	blx	r7
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	d10e      	bne.n	8006d4e <_printf_float+0x42a>
 8006d30:	e659      	b.n	80069e6 <_printf_float+0xc2>
 8006d32:	2301      	movs	r3, #1
 8006d34:	4652      	mov	r2, sl
 8006d36:	4631      	mov	r1, r6
 8006d38:	4628      	mov	r0, r5
 8006d3a:	47b8      	blx	r7
 8006d3c:	3001      	adds	r0, #1
 8006d3e:	f43f ae52 	beq.w	80069e6 <_printf_float+0xc2>
 8006d42:	f108 0801 	add.w	r8, r8, #1
 8006d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	4543      	cmp	r3, r8
 8006d4c:	dcf1      	bgt.n	8006d32 <_printf_float+0x40e>
 8006d4e:	464b      	mov	r3, r9
 8006d50:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006d54:	e6dc      	b.n	8006b10 <_printf_float+0x1ec>
 8006d56:	f04f 0800 	mov.w	r8, #0
 8006d5a:	f104 0a1a 	add.w	sl, r4, #26
 8006d5e:	e7f2      	b.n	8006d46 <_printf_float+0x422>
 8006d60:	2301      	movs	r3, #1
 8006d62:	4642      	mov	r2, r8
 8006d64:	e7df      	b.n	8006d26 <_printf_float+0x402>
 8006d66:	2301      	movs	r3, #1
 8006d68:	464a      	mov	r2, r9
 8006d6a:	4631      	mov	r1, r6
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	47b8      	blx	r7
 8006d70:	3001      	adds	r0, #1
 8006d72:	f43f ae38 	beq.w	80069e6 <_printf_float+0xc2>
 8006d76:	f108 0801 	add.w	r8, r8, #1
 8006d7a:	68e3      	ldr	r3, [r4, #12]
 8006d7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d7e:	1a5b      	subs	r3, r3, r1
 8006d80:	4543      	cmp	r3, r8
 8006d82:	dcf0      	bgt.n	8006d66 <_printf_float+0x442>
 8006d84:	e6fa      	b.n	8006b7c <_printf_float+0x258>
 8006d86:	f04f 0800 	mov.w	r8, #0
 8006d8a:	f104 0919 	add.w	r9, r4, #25
 8006d8e:	e7f4      	b.n	8006d7a <_printf_float+0x456>

08006d90 <_printf_common>:
 8006d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d94:	4616      	mov	r6, r2
 8006d96:	4699      	mov	r9, r3
 8006d98:	688a      	ldr	r2, [r1, #8]
 8006d9a:	690b      	ldr	r3, [r1, #16]
 8006d9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006da0:	4293      	cmp	r3, r2
 8006da2:	bfb8      	it	lt
 8006da4:	4613      	movlt	r3, r2
 8006da6:	6033      	str	r3, [r6, #0]
 8006da8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006dac:	4607      	mov	r7, r0
 8006dae:	460c      	mov	r4, r1
 8006db0:	b10a      	cbz	r2, 8006db6 <_printf_common+0x26>
 8006db2:	3301      	adds	r3, #1
 8006db4:	6033      	str	r3, [r6, #0]
 8006db6:	6823      	ldr	r3, [r4, #0]
 8006db8:	0699      	lsls	r1, r3, #26
 8006dba:	bf42      	ittt	mi
 8006dbc:	6833      	ldrmi	r3, [r6, #0]
 8006dbe:	3302      	addmi	r3, #2
 8006dc0:	6033      	strmi	r3, [r6, #0]
 8006dc2:	6825      	ldr	r5, [r4, #0]
 8006dc4:	f015 0506 	ands.w	r5, r5, #6
 8006dc8:	d106      	bne.n	8006dd8 <_printf_common+0x48>
 8006dca:	f104 0a19 	add.w	sl, r4, #25
 8006dce:	68e3      	ldr	r3, [r4, #12]
 8006dd0:	6832      	ldr	r2, [r6, #0]
 8006dd2:	1a9b      	subs	r3, r3, r2
 8006dd4:	42ab      	cmp	r3, r5
 8006dd6:	dc26      	bgt.n	8006e26 <_printf_common+0x96>
 8006dd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ddc:	1e13      	subs	r3, r2, #0
 8006dde:	6822      	ldr	r2, [r4, #0]
 8006de0:	bf18      	it	ne
 8006de2:	2301      	movne	r3, #1
 8006de4:	0692      	lsls	r2, r2, #26
 8006de6:	d42b      	bmi.n	8006e40 <_printf_common+0xb0>
 8006de8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006dec:	4649      	mov	r1, r9
 8006dee:	4638      	mov	r0, r7
 8006df0:	47c0      	blx	r8
 8006df2:	3001      	adds	r0, #1
 8006df4:	d01e      	beq.n	8006e34 <_printf_common+0xa4>
 8006df6:	6823      	ldr	r3, [r4, #0]
 8006df8:	68e5      	ldr	r5, [r4, #12]
 8006dfa:	6832      	ldr	r2, [r6, #0]
 8006dfc:	f003 0306 	and.w	r3, r3, #6
 8006e00:	2b04      	cmp	r3, #4
 8006e02:	bf08      	it	eq
 8006e04:	1aad      	subeq	r5, r5, r2
 8006e06:	68a3      	ldr	r3, [r4, #8]
 8006e08:	6922      	ldr	r2, [r4, #16]
 8006e0a:	bf0c      	ite	eq
 8006e0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e10:	2500      	movne	r5, #0
 8006e12:	4293      	cmp	r3, r2
 8006e14:	bfc4      	itt	gt
 8006e16:	1a9b      	subgt	r3, r3, r2
 8006e18:	18ed      	addgt	r5, r5, r3
 8006e1a:	2600      	movs	r6, #0
 8006e1c:	341a      	adds	r4, #26
 8006e1e:	42b5      	cmp	r5, r6
 8006e20:	d11a      	bne.n	8006e58 <_printf_common+0xc8>
 8006e22:	2000      	movs	r0, #0
 8006e24:	e008      	b.n	8006e38 <_printf_common+0xa8>
 8006e26:	2301      	movs	r3, #1
 8006e28:	4652      	mov	r2, sl
 8006e2a:	4649      	mov	r1, r9
 8006e2c:	4638      	mov	r0, r7
 8006e2e:	47c0      	blx	r8
 8006e30:	3001      	adds	r0, #1
 8006e32:	d103      	bne.n	8006e3c <_printf_common+0xac>
 8006e34:	f04f 30ff 	mov.w	r0, #4294967295
 8006e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e3c:	3501      	adds	r5, #1
 8006e3e:	e7c6      	b.n	8006dce <_printf_common+0x3e>
 8006e40:	18e1      	adds	r1, r4, r3
 8006e42:	1c5a      	adds	r2, r3, #1
 8006e44:	2030      	movs	r0, #48	; 0x30
 8006e46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e4a:	4422      	add	r2, r4
 8006e4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e54:	3302      	adds	r3, #2
 8006e56:	e7c7      	b.n	8006de8 <_printf_common+0x58>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	4622      	mov	r2, r4
 8006e5c:	4649      	mov	r1, r9
 8006e5e:	4638      	mov	r0, r7
 8006e60:	47c0      	blx	r8
 8006e62:	3001      	adds	r0, #1
 8006e64:	d0e6      	beq.n	8006e34 <_printf_common+0xa4>
 8006e66:	3601      	adds	r6, #1
 8006e68:	e7d9      	b.n	8006e1e <_printf_common+0x8e>
	...

08006e6c <_printf_i>:
 8006e6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e70:	7e0f      	ldrb	r7, [r1, #24]
 8006e72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e74:	2f78      	cmp	r7, #120	; 0x78
 8006e76:	4691      	mov	r9, r2
 8006e78:	4680      	mov	r8, r0
 8006e7a:	460c      	mov	r4, r1
 8006e7c:	469a      	mov	sl, r3
 8006e7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e82:	d807      	bhi.n	8006e94 <_printf_i+0x28>
 8006e84:	2f62      	cmp	r7, #98	; 0x62
 8006e86:	d80a      	bhi.n	8006e9e <_printf_i+0x32>
 8006e88:	2f00      	cmp	r7, #0
 8006e8a:	f000 80d8 	beq.w	800703e <_printf_i+0x1d2>
 8006e8e:	2f58      	cmp	r7, #88	; 0x58
 8006e90:	f000 80a3 	beq.w	8006fda <_printf_i+0x16e>
 8006e94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e9c:	e03a      	b.n	8006f14 <_printf_i+0xa8>
 8006e9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ea2:	2b15      	cmp	r3, #21
 8006ea4:	d8f6      	bhi.n	8006e94 <_printf_i+0x28>
 8006ea6:	a101      	add	r1, pc, #4	; (adr r1, 8006eac <_printf_i+0x40>)
 8006ea8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006eac:	08006f05 	.word	0x08006f05
 8006eb0:	08006f19 	.word	0x08006f19
 8006eb4:	08006e95 	.word	0x08006e95
 8006eb8:	08006e95 	.word	0x08006e95
 8006ebc:	08006e95 	.word	0x08006e95
 8006ec0:	08006e95 	.word	0x08006e95
 8006ec4:	08006f19 	.word	0x08006f19
 8006ec8:	08006e95 	.word	0x08006e95
 8006ecc:	08006e95 	.word	0x08006e95
 8006ed0:	08006e95 	.word	0x08006e95
 8006ed4:	08006e95 	.word	0x08006e95
 8006ed8:	08007025 	.word	0x08007025
 8006edc:	08006f49 	.word	0x08006f49
 8006ee0:	08007007 	.word	0x08007007
 8006ee4:	08006e95 	.word	0x08006e95
 8006ee8:	08006e95 	.word	0x08006e95
 8006eec:	08007047 	.word	0x08007047
 8006ef0:	08006e95 	.word	0x08006e95
 8006ef4:	08006f49 	.word	0x08006f49
 8006ef8:	08006e95 	.word	0x08006e95
 8006efc:	08006e95 	.word	0x08006e95
 8006f00:	0800700f 	.word	0x0800700f
 8006f04:	682b      	ldr	r3, [r5, #0]
 8006f06:	1d1a      	adds	r2, r3, #4
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	602a      	str	r2, [r5, #0]
 8006f0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f14:	2301      	movs	r3, #1
 8006f16:	e0a3      	b.n	8007060 <_printf_i+0x1f4>
 8006f18:	6820      	ldr	r0, [r4, #0]
 8006f1a:	6829      	ldr	r1, [r5, #0]
 8006f1c:	0606      	lsls	r6, r0, #24
 8006f1e:	f101 0304 	add.w	r3, r1, #4
 8006f22:	d50a      	bpl.n	8006f3a <_printf_i+0xce>
 8006f24:	680e      	ldr	r6, [r1, #0]
 8006f26:	602b      	str	r3, [r5, #0]
 8006f28:	2e00      	cmp	r6, #0
 8006f2a:	da03      	bge.n	8006f34 <_printf_i+0xc8>
 8006f2c:	232d      	movs	r3, #45	; 0x2d
 8006f2e:	4276      	negs	r6, r6
 8006f30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f34:	485e      	ldr	r0, [pc, #376]	; (80070b0 <_printf_i+0x244>)
 8006f36:	230a      	movs	r3, #10
 8006f38:	e019      	b.n	8006f6e <_printf_i+0x102>
 8006f3a:	680e      	ldr	r6, [r1, #0]
 8006f3c:	602b      	str	r3, [r5, #0]
 8006f3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f42:	bf18      	it	ne
 8006f44:	b236      	sxthne	r6, r6
 8006f46:	e7ef      	b.n	8006f28 <_printf_i+0xbc>
 8006f48:	682b      	ldr	r3, [r5, #0]
 8006f4a:	6820      	ldr	r0, [r4, #0]
 8006f4c:	1d19      	adds	r1, r3, #4
 8006f4e:	6029      	str	r1, [r5, #0]
 8006f50:	0601      	lsls	r1, r0, #24
 8006f52:	d501      	bpl.n	8006f58 <_printf_i+0xec>
 8006f54:	681e      	ldr	r6, [r3, #0]
 8006f56:	e002      	b.n	8006f5e <_printf_i+0xf2>
 8006f58:	0646      	lsls	r6, r0, #25
 8006f5a:	d5fb      	bpl.n	8006f54 <_printf_i+0xe8>
 8006f5c:	881e      	ldrh	r6, [r3, #0]
 8006f5e:	4854      	ldr	r0, [pc, #336]	; (80070b0 <_printf_i+0x244>)
 8006f60:	2f6f      	cmp	r7, #111	; 0x6f
 8006f62:	bf0c      	ite	eq
 8006f64:	2308      	moveq	r3, #8
 8006f66:	230a      	movne	r3, #10
 8006f68:	2100      	movs	r1, #0
 8006f6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f6e:	6865      	ldr	r5, [r4, #4]
 8006f70:	60a5      	str	r5, [r4, #8]
 8006f72:	2d00      	cmp	r5, #0
 8006f74:	bfa2      	ittt	ge
 8006f76:	6821      	ldrge	r1, [r4, #0]
 8006f78:	f021 0104 	bicge.w	r1, r1, #4
 8006f7c:	6021      	strge	r1, [r4, #0]
 8006f7e:	b90e      	cbnz	r6, 8006f84 <_printf_i+0x118>
 8006f80:	2d00      	cmp	r5, #0
 8006f82:	d04d      	beq.n	8007020 <_printf_i+0x1b4>
 8006f84:	4615      	mov	r5, r2
 8006f86:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f8a:	fb03 6711 	mls	r7, r3, r1, r6
 8006f8e:	5dc7      	ldrb	r7, [r0, r7]
 8006f90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f94:	4637      	mov	r7, r6
 8006f96:	42bb      	cmp	r3, r7
 8006f98:	460e      	mov	r6, r1
 8006f9a:	d9f4      	bls.n	8006f86 <_printf_i+0x11a>
 8006f9c:	2b08      	cmp	r3, #8
 8006f9e:	d10b      	bne.n	8006fb8 <_printf_i+0x14c>
 8006fa0:	6823      	ldr	r3, [r4, #0]
 8006fa2:	07de      	lsls	r6, r3, #31
 8006fa4:	d508      	bpl.n	8006fb8 <_printf_i+0x14c>
 8006fa6:	6923      	ldr	r3, [r4, #16]
 8006fa8:	6861      	ldr	r1, [r4, #4]
 8006faa:	4299      	cmp	r1, r3
 8006fac:	bfde      	ittt	le
 8006fae:	2330      	movle	r3, #48	; 0x30
 8006fb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006fb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006fb8:	1b52      	subs	r2, r2, r5
 8006fba:	6122      	str	r2, [r4, #16]
 8006fbc:	f8cd a000 	str.w	sl, [sp]
 8006fc0:	464b      	mov	r3, r9
 8006fc2:	aa03      	add	r2, sp, #12
 8006fc4:	4621      	mov	r1, r4
 8006fc6:	4640      	mov	r0, r8
 8006fc8:	f7ff fee2 	bl	8006d90 <_printf_common>
 8006fcc:	3001      	adds	r0, #1
 8006fce:	d14c      	bne.n	800706a <_printf_i+0x1fe>
 8006fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd4:	b004      	add	sp, #16
 8006fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fda:	4835      	ldr	r0, [pc, #212]	; (80070b0 <_printf_i+0x244>)
 8006fdc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006fe0:	6829      	ldr	r1, [r5, #0]
 8006fe2:	6823      	ldr	r3, [r4, #0]
 8006fe4:	f851 6b04 	ldr.w	r6, [r1], #4
 8006fe8:	6029      	str	r1, [r5, #0]
 8006fea:	061d      	lsls	r5, r3, #24
 8006fec:	d514      	bpl.n	8007018 <_printf_i+0x1ac>
 8006fee:	07df      	lsls	r7, r3, #31
 8006ff0:	bf44      	itt	mi
 8006ff2:	f043 0320 	orrmi.w	r3, r3, #32
 8006ff6:	6023      	strmi	r3, [r4, #0]
 8006ff8:	b91e      	cbnz	r6, 8007002 <_printf_i+0x196>
 8006ffa:	6823      	ldr	r3, [r4, #0]
 8006ffc:	f023 0320 	bic.w	r3, r3, #32
 8007000:	6023      	str	r3, [r4, #0]
 8007002:	2310      	movs	r3, #16
 8007004:	e7b0      	b.n	8006f68 <_printf_i+0xfc>
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	f043 0320 	orr.w	r3, r3, #32
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	2378      	movs	r3, #120	; 0x78
 8007010:	4828      	ldr	r0, [pc, #160]	; (80070b4 <_printf_i+0x248>)
 8007012:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007016:	e7e3      	b.n	8006fe0 <_printf_i+0x174>
 8007018:	0659      	lsls	r1, r3, #25
 800701a:	bf48      	it	mi
 800701c:	b2b6      	uxthmi	r6, r6
 800701e:	e7e6      	b.n	8006fee <_printf_i+0x182>
 8007020:	4615      	mov	r5, r2
 8007022:	e7bb      	b.n	8006f9c <_printf_i+0x130>
 8007024:	682b      	ldr	r3, [r5, #0]
 8007026:	6826      	ldr	r6, [r4, #0]
 8007028:	6961      	ldr	r1, [r4, #20]
 800702a:	1d18      	adds	r0, r3, #4
 800702c:	6028      	str	r0, [r5, #0]
 800702e:	0635      	lsls	r5, r6, #24
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	d501      	bpl.n	8007038 <_printf_i+0x1cc>
 8007034:	6019      	str	r1, [r3, #0]
 8007036:	e002      	b.n	800703e <_printf_i+0x1d2>
 8007038:	0670      	lsls	r0, r6, #25
 800703a:	d5fb      	bpl.n	8007034 <_printf_i+0x1c8>
 800703c:	8019      	strh	r1, [r3, #0]
 800703e:	2300      	movs	r3, #0
 8007040:	6123      	str	r3, [r4, #16]
 8007042:	4615      	mov	r5, r2
 8007044:	e7ba      	b.n	8006fbc <_printf_i+0x150>
 8007046:	682b      	ldr	r3, [r5, #0]
 8007048:	1d1a      	adds	r2, r3, #4
 800704a:	602a      	str	r2, [r5, #0]
 800704c:	681d      	ldr	r5, [r3, #0]
 800704e:	6862      	ldr	r2, [r4, #4]
 8007050:	2100      	movs	r1, #0
 8007052:	4628      	mov	r0, r5
 8007054:	f7f9 f8cc 	bl	80001f0 <memchr>
 8007058:	b108      	cbz	r0, 800705e <_printf_i+0x1f2>
 800705a:	1b40      	subs	r0, r0, r5
 800705c:	6060      	str	r0, [r4, #4]
 800705e:	6863      	ldr	r3, [r4, #4]
 8007060:	6123      	str	r3, [r4, #16]
 8007062:	2300      	movs	r3, #0
 8007064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007068:	e7a8      	b.n	8006fbc <_printf_i+0x150>
 800706a:	6923      	ldr	r3, [r4, #16]
 800706c:	462a      	mov	r2, r5
 800706e:	4649      	mov	r1, r9
 8007070:	4640      	mov	r0, r8
 8007072:	47d0      	blx	sl
 8007074:	3001      	adds	r0, #1
 8007076:	d0ab      	beq.n	8006fd0 <_printf_i+0x164>
 8007078:	6823      	ldr	r3, [r4, #0]
 800707a:	079b      	lsls	r3, r3, #30
 800707c:	d413      	bmi.n	80070a6 <_printf_i+0x23a>
 800707e:	68e0      	ldr	r0, [r4, #12]
 8007080:	9b03      	ldr	r3, [sp, #12]
 8007082:	4298      	cmp	r0, r3
 8007084:	bfb8      	it	lt
 8007086:	4618      	movlt	r0, r3
 8007088:	e7a4      	b.n	8006fd4 <_printf_i+0x168>
 800708a:	2301      	movs	r3, #1
 800708c:	4632      	mov	r2, r6
 800708e:	4649      	mov	r1, r9
 8007090:	4640      	mov	r0, r8
 8007092:	47d0      	blx	sl
 8007094:	3001      	adds	r0, #1
 8007096:	d09b      	beq.n	8006fd0 <_printf_i+0x164>
 8007098:	3501      	adds	r5, #1
 800709a:	68e3      	ldr	r3, [r4, #12]
 800709c:	9903      	ldr	r1, [sp, #12]
 800709e:	1a5b      	subs	r3, r3, r1
 80070a0:	42ab      	cmp	r3, r5
 80070a2:	dcf2      	bgt.n	800708a <_printf_i+0x21e>
 80070a4:	e7eb      	b.n	800707e <_printf_i+0x212>
 80070a6:	2500      	movs	r5, #0
 80070a8:	f104 0619 	add.w	r6, r4, #25
 80070ac:	e7f5      	b.n	800709a <_printf_i+0x22e>
 80070ae:	bf00      	nop
 80070b0:	0800b4e6 	.word	0x0800b4e6
 80070b4:	0800b4f7 	.word	0x0800b4f7

080070b8 <_scanf_float>:
 80070b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070bc:	b087      	sub	sp, #28
 80070be:	4617      	mov	r7, r2
 80070c0:	9303      	str	r3, [sp, #12]
 80070c2:	688b      	ldr	r3, [r1, #8]
 80070c4:	1e5a      	subs	r2, r3, #1
 80070c6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80070ca:	bf83      	ittte	hi
 80070cc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80070d0:	195b      	addhi	r3, r3, r5
 80070d2:	9302      	strhi	r3, [sp, #8]
 80070d4:	2300      	movls	r3, #0
 80070d6:	bf86      	itte	hi
 80070d8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80070dc:	608b      	strhi	r3, [r1, #8]
 80070de:	9302      	strls	r3, [sp, #8]
 80070e0:	680b      	ldr	r3, [r1, #0]
 80070e2:	468b      	mov	fp, r1
 80070e4:	2500      	movs	r5, #0
 80070e6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80070ea:	f84b 3b1c 	str.w	r3, [fp], #28
 80070ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80070f2:	4680      	mov	r8, r0
 80070f4:	460c      	mov	r4, r1
 80070f6:	465e      	mov	r6, fp
 80070f8:	46aa      	mov	sl, r5
 80070fa:	46a9      	mov	r9, r5
 80070fc:	9501      	str	r5, [sp, #4]
 80070fe:	68a2      	ldr	r2, [r4, #8]
 8007100:	b152      	cbz	r2, 8007118 <_scanf_float+0x60>
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	2b4e      	cmp	r3, #78	; 0x4e
 8007108:	d864      	bhi.n	80071d4 <_scanf_float+0x11c>
 800710a:	2b40      	cmp	r3, #64	; 0x40
 800710c:	d83c      	bhi.n	8007188 <_scanf_float+0xd0>
 800710e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007112:	b2c8      	uxtb	r0, r1
 8007114:	280e      	cmp	r0, #14
 8007116:	d93a      	bls.n	800718e <_scanf_float+0xd6>
 8007118:	f1b9 0f00 	cmp.w	r9, #0
 800711c:	d003      	beq.n	8007126 <_scanf_float+0x6e>
 800711e:	6823      	ldr	r3, [r4, #0]
 8007120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007124:	6023      	str	r3, [r4, #0]
 8007126:	f10a 3aff 	add.w	sl, sl, #4294967295
 800712a:	f1ba 0f01 	cmp.w	sl, #1
 800712e:	f200 8113 	bhi.w	8007358 <_scanf_float+0x2a0>
 8007132:	455e      	cmp	r6, fp
 8007134:	f200 8105 	bhi.w	8007342 <_scanf_float+0x28a>
 8007138:	2501      	movs	r5, #1
 800713a:	4628      	mov	r0, r5
 800713c:	b007      	add	sp, #28
 800713e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007142:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007146:	2a0d      	cmp	r2, #13
 8007148:	d8e6      	bhi.n	8007118 <_scanf_float+0x60>
 800714a:	a101      	add	r1, pc, #4	; (adr r1, 8007150 <_scanf_float+0x98>)
 800714c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007150:	0800728f 	.word	0x0800728f
 8007154:	08007119 	.word	0x08007119
 8007158:	08007119 	.word	0x08007119
 800715c:	08007119 	.word	0x08007119
 8007160:	080072ef 	.word	0x080072ef
 8007164:	080072c7 	.word	0x080072c7
 8007168:	08007119 	.word	0x08007119
 800716c:	08007119 	.word	0x08007119
 8007170:	0800729d 	.word	0x0800729d
 8007174:	08007119 	.word	0x08007119
 8007178:	08007119 	.word	0x08007119
 800717c:	08007119 	.word	0x08007119
 8007180:	08007119 	.word	0x08007119
 8007184:	08007255 	.word	0x08007255
 8007188:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800718c:	e7db      	b.n	8007146 <_scanf_float+0x8e>
 800718e:	290e      	cmp	r1, #14
 8007190:	d8c2      	bhi.n	8007118 <_scanf_float+0x60>
 8007192:	a001      	add	r0, pc, #4	; (adr r0, 8007198 <_scanf_float+0xe0>)
 8007194:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007198:	08007247 	.word	0x08007247
 800719c:	08007119 	.word	0x08007119
 80071a0:	08007247 	.word	0x08007247
 80071a4:	080072db 	.word	0x080072db
 80071a8:	08007119 	.word	0x08007119
 80071ac:	080071f5 	.word	0x080071f5
 80071b0:	08007231 	.word	0x08007231
 80071b4:	08007231 	.word	0x08007231
 80071b8:	08007231 	.word	0x08007231
 80071bc:	08007231 	.word	0x08007231
 80071c0:	08007231 	.word	0x08007231
 80071c4:	08007231 	.word	0x08007231
 80071c8:	08007231 	.word	0x08007231
 80071cc:	08007231 	.word	0x08007231
 80071d0:	08007231 	.word	0x08007231
 80071d4:	2b6e      	cmp	r3, #110	; 0x6e
 80071d6:	d809      	bhi.n	80071ec <_scanf_float+0x134>
 80071d8:	2b60      	cmp	r3, #96	; 0x60
 80071da:	d8b2      	bhi.n	8007142 <_scanf_float+0x8a>
 80071dc:	2b54      	cmp	r3, #84	; 0x54
 80071de:	d077      	beq.n	80072d0 <_scanf_float+0x218>
 80071e0:	2b59      	cmp	r3, #89	; 0x59
 80071e2:	d199      	bne.n	8007118 <_scanf_float+0x60>
 80071e4:	2d07      	cmp	r5, #7
 80071e6:	d197      	bne.n	8007118 <_scanf_float+0x60>
 80071e8:	2508      	movs	r5, #8
 80071ea:	e029      	b.n	8007240 <_scanf_float+0x188>
 80071ec:	2b74      	cmp	r3, #116	; 0x74
 80071ee:	d06f      	beq.n	80072d0 <_scanf_float+0x218>
 80071f0:	2b79      	cmp	r3, #121	; 0x79
 80071f2:	e7f6      	b.n	80071e2 <_scanf_float+0x12a>
 80071f4:	6821      	ldr	r1, [r4, #0]
 80071f6:	05c8      	lsls	r0, r1, #23
 80071f8:	d51a      	bpl.n	8007230 <_scanf_float+0x178>
 80071fa:	9b02      	ldr	r3, [sp, #8]
 80071fc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007200:	6021      	str	r1, [r4, #0]
 8007202:	f109 0901 	add.w	r9, r9, #1
 8007206:	b11b      	cbz	r3, 8007210 <_scanf_float+0x158>
 8007208:	3b01      	subs	r3, #1
 800720a:	3201      	adds	r2, #1
 800720c:	9302      	str	r3, [sp, #8]
 800720e:	60a2      	str	r2, [r4, #8]
 8007210:	68a3      	ldr	r3, [r4, #8]
 8007212:	3b01      	subs	r3, #1
 8007214:	60a3      	str	r3, [r4, #8]
 8007216:	6923      	ldr	r3, [r4, #16]
 8007218:	3301      	adds	r3, #1
 800721a:	6123      	str	r3, [r4, #16]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	3b01      	subs	r3, #1
 8007220:	2b00      	cmp	r3, #0
 8007222:	607b      	str	r3, [r7, #4]
 8007224:	f340 8084 	ble.w	8007330 <_scanf_float+0x278>
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	3301      	adds	r3, #1
 800722c:	603b      	str	r3, [r7, #0]
 800722e:	e766      	b.n	80070fe <_scanf_float+0x46>
 8007230:	eb1a 0f05 	cmn.w	sl, r5
 8007234:	f47f af70 	bne.w	8007118 <_scanf_float+0x60>
 8007238:	6822      	ldr	r2, [r4, #0]
 800723a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800723e:	6022      	str	r2, [r4, #0]
 8007240:	f806 3b01 	strb.w	r3, [r6], #1
 8007244:	e7e4      	b.n	8007210 <_scanf_float+0x158>
 8007246:	6822      	ldr	r2, [r4, #0]
 8007248:	0610      	lsls	r0, r2, #24
 800724a:	f57f af65 	bpl.w	8007118 <_scanf_float+0x60>
 800724e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007252:	e7f4      	b.n	800723e <_scanf_float+0x186>
 8007254:	f1ba 0f00 	cmp.w	sl, #0
 8007258:	d10e      	bne.n	8007278 <_scanf_float+0x1c0>
 800725a:	f1b9 0f00 	cmp.w	r9, #0
 800725e:	d10e      	bne.n	800727e <_scanf_float+0x1c6>
 8007260:	6822      	ldr	r2, [r4, #0]
 8007262:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007266:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800726a:	d108      	bne.n	800727e <_scanf_float+0x1c6>
 800726c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007270:	6022      	str	r2, [r4, #0]
 8007272:	f04f 0a01 	mov.w	sl, #1
 8007276:	e7e3      	b.n	8007240 <_scanf_float+0x188>
 8007278:	f1ba 0f02 	cmp.w	sl, #2
 800727c:	d055      	beq.n	800732a <_scanf_float+0x272>
 800727e:	2d01      	cmp	r5, #1
 8007280:	d002      	beq.n	8007288 <_scanf_float+0x1d0>
 8007282:	2d04      	cmp	r5, #4
 8007284:	f47f af48 	bne.w	8007118 <_scanf_float+0x60>
 8007288:	3501      	adds	r5, #1
 800728a:	b2ed      	uxtb	r5, r5
 800728c:	e7d8      	b.n	8007240 <_scanf_float+0x188>
 800728e:	f1ba 0f01 	cmp.w	sl, #1
 8007292:	f47f af41 	bne.w	8007118 <_scanf_float+0x60>
 8007296:	f04f 0a02 	mov.w	sl, #2
 800729a:	e7d1      	b.n	8007240 <_scanf_float+0x188>
 800729c:	b97d      	cbnz	r5, 80072be <_scanf_float+0x206>
 800729e:	f1b9 0f00 	cmp.w	r9, #0
 80072a2:	f47f af3c 	bne.w	800711e <_scanf_float+0x66>
 80072a6:	6822      	ldr	r2, [r4, #0]
 80072a8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80072ac:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80072b0:	f47f af39 	bne.w	8007126 <_scanf_float+0x6e>
 80072b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80072b8:	6022      	str	r2, [r4, #0]
 80072ba:	2501      	movs	r5, #1
 80072bc:	e7c0      	b.n	8007240 <_scanf_float+0x188>
 80072be:	2d03      	cmp	r5, #3
 80072c0:	d0e2      	beq.n	8007288 <_scanf_float+0x1d0>
 80072c2:	2d05      	cmp	r5, #5
 80072c4:	e7de      	b.n	8007284 <_scanf_float+0x1cc>
 80072c6:	2d02      	cmp	r5, #2
 80072c8:	f47f af26 	bne.w	8007118 <_scanf_float+0x60>
 80072cc:	2503      	movs	r5, #3
 80072ce:	e7b7      	b.n	8007240 <_scanf_float+0x188>
 80072d0:	2d06      	cmp	r5, #6
 80072d2:	f47f af21 	bne.w	8007118 <_scanf_float+0x60>
 80072d6:	2507      	movs	r5, #7
 80072d8:	e7b2      	b.n	8007240 <_scanf_float+0x188>
 80072da:	6822      	ldr	r2, [r4, #0]
 80072dc:	0591      	lsls	r1, r2, #22
 80072de:	f57f af1b 	bpl.w	8007118 <_scanf_float+0x60>
 80072e2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80072e6:	6022      	str	r2, [r4, #0]
 80072e8:	f8cd 9004 	str.w	r9, [sp, #4]
 80072ec:	e7a8      	b.n	8007240 <_scanf_float+0x188>
 80072ee:	6822      	ldr	r2, [r4, #0]
 80072f0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80072f4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80072f8:	d006      	beq.n	8007308 <_scanf_float+0x250>
 80072fa:	0550      	lsls	r0, r2, #21
 80072fc:	f57f af0c 	bpl.w	8007118 <_scanf_float+0x60>
 8007300:	f1b9 0f00 	cmp.w	r9, #0
 8007304:	f43f af0f 	beq.w	8007126 <_scanf_float+0x6e>
 8007308:	0591      	lsls	r1, r2, #22
 800730a:	bf58      	it	pl
 800730c:	9901      	ldrpl	r1, [sp, #4]
 800730e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007312:	bf58      	it	pl
 8007314:	eba9 0101 	subpl.w	r1, r9, r1
 8007318:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800731c:	bf58      	it	pl
 800731e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007322:	6022      	str	r2, [r4, #0]
 8007324:	f04f 0900 	mov.w	r9, #0
 8007328:	e78a      	b.n	8007240 <_scanf_float+0x188>
 800732a:	f04f 0a03 	mov.w	sl, #3
 800732e:	e787      	b.n	8007240 <_scanf_float+0x188>
 8007330:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007334:	4639      	mov	r1, r7
 8007336:	4640      	mov	r0, r8
 8007338:	4798      	blx	r3
 800733a:	2800      	cmp	r0, #0
 800733c:	f43f aedf 	beq.w	80070fe <_scanf_float+0x46>
 8007340:	e6ea      	b.n	8007118 <_scanf_float+0x60>
 8007342:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007346:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800734a:	463a      	mov	r2, r7
 800734c:	4640      	mov	r0, r8
 800734e:	4798      	blx	r3
 8007350:	6923      	ldr	r3, [r4, #16]
 8007352:	3b01      	subs	r3, #1
 8007354:	6123      	str	r3, [r4, #16]
 8007356:	e6ec      	b.n	8007132 <_scanf_float+0x7a>
 8007358:	1e6b      	subs	r3, r5, #1
 800735a:	2b06      	cmp	r3, #6
 800735c:	d825      	bhi.n	80073aa <_scanf_float+0x2f2>
 800735e:	2d02      	cmp	r5, #2
 8007360:	d836      	bhi.n	80073d0 <_scanf_float+0x318>
 8007362:	455e      	cmp	r6, fp
 8007364:	f67f aee8 	bls.w	8007138 <_scanf_float+0x80>
 8007368:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800736c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007370:	463a      	mov	r2, r7
 8007372:	4640      	mov	r0, r8
 8007374:	4798      	blx	r3
 8007376:	6923      	ldr	r3, [r4, #16]
 8007378:	3b01      	subs	r3, #1
 800737a:	6123      	str	r3, [r4, #16]
 800737c:	e7f1      	b.n	8007362 <_scanf_float+0x2aa>
 800737e:	9802      	ldr	r0, [sp, #8]
 8007380:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007384:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007388:	9002      	str	r0, [sp, #8]
 800738a:	463a      	mov	r2, r7
 800738c:	4640      	mov	r0, r8
 800738e:	4798      	blx	r3
 8007390:	6923      	ldr	r3, [r4, #16]
 8007392:	3b01      	subs	r3, #1
 8007394:	6123      	str	r3, [r4, #16]
 8007396:	f10a 3aff 	add.w	sl, sl, #4294967295
 800739a:	fa5f fa8a 	uxtb.w	sl, sl
 800739e:	f1ba 0f02 	cmp.w	sl, #2
 80073a2:	d1ec      	bne.n	800737e <_scanf_float+0x2c6>
 80073a4:	3d03      	subs	r5, #3
 80073a6:	b2ed      	uxtb	r5, r5
 80073a8:	1b76      	subs	r6, r6, r5
 80073aa:	6823      	ldr	r3, [r4, #0]
 80073ac:	05da      	lsls	r2, r3, #23
 80073ae:	d52f      	bpl.n	8007410 <_scanf_float+0x358>
 80073b0:	055b      	lsls	r3, r3, #21
 80073b2:	d510      	bpl.n	80073d6 <_scanf_float+0x31e>
 80073b4:	455e      	cmp	r6, fp
 80073b6:	f67f aebf 	bls.w	8007138 <_scanf_float+0x80>
 80073ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80073be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80073c2:	463a      	mov	r2, r7
 80073c4:	4640      	mov	r0, r8
 80073c6:	4798      	blx	r3
 80073c8:	6923      	ldr	r3, [r4, #16]
 80073ca:	3b01      	subs	r3, #1
 80073cc:	6123      	str	r3, [r4, #16]
 80073ce:	e7f1      	b.n	80073b4 <_scanf_float+0x2fc>
 80073d0:	46aa      	mov	sl, r5
 80073d2:	9602      	str	r6, [sp, #8]
 80073d4:	e7df      	b.n	8007396 <_scanf_float+0x2de>
 80073d6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80073da:	6923      	ldr	r3, [r4, #16]
 80073dc:	2965      	cmp	r1, #101	; 0x65
 80073de:	f103 33ff 	add.w	r3, r3, #4294967295
 80073e2:	f106 35ff 	add.w	r5, r6, #4294967295
 80073e6:	6123      	str	r3, [r4, #16]
 80073e8:	d00c      	beq.n	8007404 <_scanf_float+0x34c>
 80073ea:	2945      	cmp	r1, #69	; 0x45
 80073ec:	d00a      	beq.n	8007404 <_scanf_float+0x34c>
 80073ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80073f2:	463a      	mov	r2, r7
 80073f4:	4640      	mov	r0, r8
 80073f6:	4798      	blx	r3
 80073f8:	6923      	ldr	r3, [r4, #16]
 80073fa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80073fe:	3b01      	subs	r3, #1
 8007400:	1eb5      	subs	r5, r6, #2
 8007402:	6123      	str	r3, [r4, #16]
 8007404:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007408:	463a      	mov	r2, r7
 800740a:	4640      	mov	r0, r8
 800740c:	4798      	blx	r3
 800740e:	462e      	mov	r6, r5
 8007410:	6825      	ldr	r5, [r4, #0]
 8007412:	f015 0510 	ands.w	r5, r5, #16
 8007416:	d159      	bne.n	80074cc <_scanf_float+0x414>
 8007418:	7035      	strb	r5, [r6, #0]
 800741a:	6823      	ldr	r3, [r4, #0]
 800741c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007424:	d11b      	bne.n	800745e <_scanf_float+0x3a6>
 8007426:	9b01      	ldr	r3, [sp, #4]
 8007428:	454b      	cmp	r3, r9
 800742a:	eba3 0209 	sub.w	r2, r3, r9
 800742e:	d123      	bne.n	8007478 <_scanf_float+0x3c0>
 8007430:	2200      	movs	r2, #0
 8007432:	4659      	mov	r1, fp
 8007434:	4640      	mov	r0, r8
 8007436:	f000 ff25 	bl	8008284 <_strtod_r>
 800743a:	6822      	ldr	r2, [r4, #0]
 800743c:	9b03      	ldr	r3, [sp, #12]
 800743e:	f012 0f02 	tst.w	r2, #2
 8007442:	ec57 6b10 	vmov	r6, r7, d0
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	d021      	beq.n	800748e <_scanf_float+0x3d6>
 800744a:	9903      	ldr	r1, [sp, #12]
 800744c:	1d1a      	adds	r2, r3, #4
 800744e:	600a      	str	r2, [r1, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	e9c3 6700 	strd	r6, r7, [r3]
 8007456:	68e3      	ldr	r3, [r4, #12]
 8007458:	3301      	adds	r3, #1
 800745a:	60e3      	str	r3, [r4, #12]
 800745c:	e66d      	b.n	800713a <_scanf_float+0x82>
 800745e:	9b04      	ldr	r3, [sp, #16]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d0e5      	beq.n	8007430 <_scanf_float+0x378>
 8007464:	9905      	ldr	r1, [sp, #20]
 8007466:	230a      	movs	r3, #10
 8007468:	462a      	mov	r2, r5
 800746a:	3101      	adds	r1, #1
 800746c:	4640      	mov	r0, r8
 800746e:	f000 ff91 	bl	8008394 <_strtol_r>
 8007472:	9b04      	ldr	r3, [sp, #16]
 8007474:	9e05      	ldr	r6, [sp, #20]
 8007476:	1ac2      	subs	r2, r0, r3
 8007478:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800747c:	429e      	cmp	r6, r3
 800747e:	bf28      	it	cs
 8007480:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007484:	4912      	ldr	r1, [pc, #72]	; (80074d0 <_scanf_float+0x418>)
 8007486:	4630      	mov	r0, r6
 8007488:	f000 f8ba 	bl	8007600 <siprintf>
 800748c:	e7d0      	b.n	8007430 <_scanf_float+0x378>
 800748e:	9903      	ldr	r1, [sp, #12]
 8007490:	f012 0f04 	tst.w	r2, #4
 8007494:	f103 0204 	add.w	r2, r3, #4
 8007498:	600a      	str	r2, [r1, #0]
 800749a:	d1d9      	bne.n	8007450 <_scanf_float+0x398>
 800749c:	f8d3 8000 	ldr.w	r8, [r3]
 80074a0:	ee10 2a10 	vmov	r2, s0
 80074a4:	ee10 0a10 	vmov	r0, s0
 80074a8:	463b      	mov	r3, r7
 80074aa:	4639      	mov	r1, r7
 80074ac:	f7f9 fb46 	bl	8000b3c <__aeabi_dcmpun>
 80074b0:	b128      	cbz	r0, 80074be <_scanf_float+0x406>
 80074b2:	4808      	ldr	r0, [pc, #32]	; (80074d4 <_scanf_float+0x41c>)
 80074b4:	f000 f89e 	bl	80075f4 <nanf>
 80074b8:	ed88 0a00 	vstr	s0, [r8]
 80074bc:	e7cb      	b.n	8007456 <_scanf_float+0x39e>
 80074be:	4630      	mov	r0, r6
 80074c0:	4639      	mov	r1, r7
 80074c2:	f7f9 fb99 	bl	8000bf8 <__aeabi_d2f>
 80074c6:	f8c8 0000 	str.w	r0, [r8]
 80074ca:	e7c4      	b.n	8007456 <_scanf_float+0x39e>
 80074cc:	2500      	movs	r5, #0
 80074ce:	e634      	b.n	800713a <_scanf_float+0x82>
 80074d0:	0800b508 	.word	0x0800b508
 80074d4:	0800b978 	.word	0x0800b978

080074d8 <iprintf>:
 80074d8:	b40f      	push	{r0, r1, r2, r3}
 80074da:	4b0a      	ldr	r3, [pc, #40]	; (8007504 <iprintf+0x2c>)
 80074dc:	b513      	push	{r0, r1, r4, lr}
 80074de:	681c      	ldr	r4, [r3, #0]
 80074e0:	b124      	cbz	r4, 80074ec <iprintf+0x14>
 80074e2:	69a3      	ldr	r3, [r4, #24]
 80074e4:	b913      	cbnz	r3, 80074ec <iprintf+0x14>
 80074e6:	4620      	mov	r0, r4
 80074e8:	f001 ffaa 	bl	8009440 <__sinit>
 80074ec:	ab05      	add	r3, sp, #20
 80074ee:	9a04      	ldr	r2, [sp, #16]
 80074f0:	68a1      	ldr	r1, [r4, #8]
 80074f2:	9301      	str	r3, [sp, #4]
 80074f4:	4620      	mov	r0, r4
 80074f6:	f003 fb73 	bl	800abe0 <_vfiprintf_r>
 80074fa:	b002      	add	sp, #8
 80074fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007500:	b004      	add	sp, #16
 8007502:	4770      	bx	lr
 8007504:	20000040 	.word	0x20000040

08007508 <_puts_r>:
 8007508:	b570      	push	{r4, r5, r6, lr}
 800750a:	460e      	mov	r6, r1
 800750c:	4605      	mov	r5, r0
 800750e:	b118      	cbz	r0, 8007518 <_puts_r+0x10>
 8007510:	6983      	ldr	r3, [r0, #24]
 8007512:	b90b      	cbnz	r3, 8007518 <_puts_r+0x10>
 8007514:	f001 ff94 	bl	8009440 <__sinit>
 8007518:	69ab      	ldr	r3, [r5, #24]
 800751a:	68ac      	ldr	r4, [r5, #8]
 800751c:	b913      	cbnz	r3, 8007524 <_puts_r+0x1c>
 800751e:	4628      	mov	r0, r5
 8007520:	f001 ff8e 	bl	8009440 <__sinit>
 8007524:	4b2c      	ldr	r3, [pc, #176]	; (80075d8 <_puts_r+0xd0>)
 8007526:	429c      	cmp	r4, r3
 8007528:	d120      	bne.n	800756c <_puts_r+0x64>
 800752a:	686c      	ldr	r4, [r5, #4]
 800752c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800752e:	07db      	lsls	r3, r3, #31
 8007530:	d405      	bmi.n	800753e <_puts_r+0x36>
 8007532:	89a3      	ldrh	r3, [r4, #12]
 8007534:	0598      	lsls	r0, r3, #22
 8007536:	d402      	bmi.n	800753e <_puts_r+0x36>
 8007538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800753a:	f002 fb92 	bl	8009c62 <__retarget_lock_acquire_recursive>
 800753e:	89a3      	ldrh	r3, [r4, #12]
 8007540:	0719      	lsls	r1, r3, #28
 8007542:	d51d      	bpl.n	8007580 <_puts_r+0x78>
 8007544:	6923      	ldr	r3, [r4, #16]
 8007546:	b1db      	cbz	r3, 8007580 <_puts_r+0x78>
 8007548:	3e01      	subs	r6, #1
 800754a:	68a3      	ldr	r3, [r4, #8]
 800754c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007550:	3b01      	subs	r3, #1
 8007552:	60a3      	str	r3, [r4, #8]
 8007554:	bb39      	cbnz	r1, 80075a6 <_puts_r+0x9e>
 8007556:	2b00      	cmp	r3, #0
 8007558:	da38      	bge.n	80075cc <_puts_r+0xc4>
 800755a:	4622      	mov	r2, r4
 800755c:	210a      	movs	r1, #10
 800755e:	4628      	mov	r0, r5
 8007560:	f000 ff1a 	bl	8008398 <__swbuf_r>
 8007564:	3001      	adds	r0, #1
 8007566:	d011      	beq.n	800758c <_puts_r+0x84>
 8007568:	250a      	movs	r5, #10
 800756a:	e011      	b.n	8007590 <_puts_r+0x88>
 800756c:	4b1b      	ldr	r3, [pc, #108]	; (80075dc <_puts_r+0xd4>)
 800756e:	429c      	cmp	r4, r3
 8007570:	d101      	bne.n	8007576 <_puts_r+0x6e>
 8007572:	68ac      	ldr	r4, [r5, #8]
 8007574:	e7da      	b.n	800752c <_puts_r+0x24>
 8007576:	4b1a      	ldr	r3, [pc, #104]	; (80075e0 <_puts_r+0xd8>)
 8007578:	429c      	cmp	r4, r3
 800757a:	bf08      	it	eq
 800757c:	68ec      	ldreq	r4, [r5, #12]
 800757e:	e7d5      	b.n	800752c <_puts_r+0x24>
 8007580:	4621      	mov	r1, r4
 8007582:	4628      	mov	r0, r5
 8007584:	f000 ff5a 	bl	800843c <__swsetup_r>
 8007588:	2800      	cmp	r0, #0
 800758a:	d0dd      	beq.n	8007548 <_puts_r+0x40>
 800758c:	f04f 35ff 	mov.w	r5, #4294967295
 8007590:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007592:	07da      	lsls	r2, r3, #31
 8007594:	d405      	bmi.n	80075a2 <_puts_r+0x9a>
 8007596:	89a3      	ldrh	r3, [r4, #12]
 8007598:	059b      	lsls	r3, r3, #22
 800759a:	d402      	bmi.n	80075a2 <_puts_r+0x9a>
 800759c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800759e:	f002 fb61 	bl	8009c64 <__retarget_lock_release_recursive>
 80075a2:	4628      	mov	r0, r5
 80075a4:	bd70      	pop	{r4, r5, r6, pc}
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	da04      	bge.n	80075b4 <_puts_r+0xac>
 80075aa:	69a2      	ldr	r2, [r4, #24]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	dc06      	bgt.n	80075be <_puts_r+0xb6>
 80075b0:	290a      	cmp	r1, #10
 80075b2:	d004      	beq.n	80075be <_puts_r+0xb6>
 80075b4:	6823      	ldr	r3, [r4, #0]
 80075b6:	1c5a      	adds	r2, r3, #1
 80075b8:	6022      	str	r2, [r4, #0]
 80075ba:	7019      	strb	r1, [r3, #0]
 80075bc:	e7c5      	b.n	800754a <_puts_r+0x42>
 80075be:	4622      	mov	r2, r4
 80075c0:	4628      	mov	r0, r5
 80075c2:	f000 fee9 	bl	8008398 <__swbuf_r>
 80075c6:	3001      	adds	r0, #1
 80075c8:	d1bf      	bne.n	800754a <_puts_r+0x42>
 80075ca:	e7df      	b.n	800758c <_puts_r+0x84>
 80075cc:	6823      	ldr	r3, [r4, #0]
 80075ce:	250a      	movs	r5, #10
 80075d0:	1c5a      	adds	r2, r3, #1
 80075d2:	6022      	str	r2, [r4, #0]
 80075d4:	701d      	strb	r5, [r3, #0]
 80075d6:	e7db      	b.n	8007590 <_puts_r+0x88>
 80075d8:	0800b714 	.word	0x0800b714
 80075dc:	0800b734 	.word	0x0800b734
 80075e0:	0800b6f4 	.word	0x0800b6f4

080075e4 <puts>:
 80075e4:	4b02      	ldr	r3, [pc, #8]	; (80075f0 <puts+0xc>)
 80075e6:	4601      	mov	r1, r0
 80075e8:	6818      	ldr	r0, [r3, #0]
 80075ea:	f7ff bf8d 	b.w	8007508 <_puts_r>
 80075ee:	bf00      	nop
 80075f0:	20000040 	.word	0x20000040

080075f4 <nanf>:
 80075f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80075fc <nanf+0x8>
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	7fc00000 	.word	0x7fc00000

08007600 <siprintf>:
 8007600:	b40e      	push	{r1, r2, r3}
 8007602:	b500      	push	{lr}
 8007604:	b09c      	sub	sp, #112	; 0x70
 8007606:	ab1d      	add	r3, sp, #116	; 0x74
 8007608:	9002      	str	r0, [sp, #8]
 800760a:	9006      	str	r0, [sp, #24]
 800760c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007610:	4809      	ldr	r0, [pc, #36]	; (8007638 <siprintf+0x38>)
 8007612:	9107      	str	r1, [sp, #28]
 8007614:	9104      	str	r1, [sp, #16]
 8007616:	4909      	ldr	r1, [pc, #36]	; (800763c <siprintf+0x3c>)
 8007618:	f853 2b04 	ldr.w	r2, [r3], #4
 800761c:	9105      	str	r1, [sp, #20]
 800761e:	6800      	ldr	r0, [r0, #0]
 8007620:	9301      	str	r3, [sp, #4]
 8007622:	a902      	add	r1, sp, #8
 8007624:	f003 f9b2 	bl	800a98c <_svfiprintf_r>
 8007628:	9b02      	ldr	r3, [sp, #8]
 800762a:	2200      	movs	r2, #0
 800762c:	701a      	strb	r2, [r3, #0]
 800762e:	b01c      	add	sp, #112	; 0x70
 8007630:	f85d eb04 	ldr.w	lr, [sp], #4
 8007634:	b003      	add	sp, #12
 8007636:	4770      	bx	lr
 8007638:	20000040 	.word	0x20000040
 800763c:	ffff0208 	.word	0xffff0208

08007640 <sulp>:
 8007640:	b570      	push	{r4, r5, r6, lr}
 8007642:	4604      	mov	r4, r0
 8007644:	460d      	mov	r5, r1
 8007646:	ec45 4b10 	vmov	d0, r4, r5
 800764a:	4616      	mov	r6, r2
 800764c:	f002 fefc 	bl	800a448 <__ulp>
 8007650:	ec51 0b10 	vmov	r0, r1, d0
 8007654:	b17e      	cbz	r6, 8007676 <sulp+0x36>
 8007656:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800765a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800765e:	2b00      	cmp	r3, #0
 8007660:	dd09      	ble.n	8007676 <sulp+0x36>
 8007662:	051b      	lsls	r3, r3, #20
 8007664:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007668:	2400      	movs	r4, #0
 800766a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800766e:	4622      	mov	r2, r4
 8007670:	462b      	mov	r3, r5
 8007672:	f7f8 ffc9 	bl	8000608 <__aeabi_dmul>
 8007676:	bd70      	pop	{r4, r5, r6, pc}

08007678 <_strtod_l>:
 8007678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800767c:	ed2d 8b02 	vpush	{d8}
 8007680:	b09d      	sub	sp, #116	; 0x74
 8007682:	461f      	mov	r7, r3
 8007684:	2300      	movs	r3, #0
 8007686:	9318      	str	r3, [sp, #96]	; 0x60
 8007688:	4ba2      	ldr	r3, [pc, #648]	; (8007914 <_strtod_l+0x29c>)
 800768a:	9213      	str	r2, [sp, #76]	; 0x4c
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	9305      	str	r3, [sp, #20]
 8007690:	4604      	mov	r4, r0
 8007692:	4618      	mov	r0, r3
 8007694:	4688      	mov	r8, r1
 8007696:	f7f8 fda3 	bl	80001e0 <strlen>
 800769a:	f04f 0a00 	mov.w	sl, #0
 800769e:	4605      	mov	r5, r0
 80076a0:	f04f 0b00 	mov.w	fp, #0
 80076a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80076a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076aa:	781a      	ldrb	r2, [r3, #0]
 80076ac:	2a2b      	cmp	r2, #43	; 0x2b
 80076ae:	d04e      	beq.n	800774e <_strtod_l+0xd6>
 80076b0:	d83b      	bhi.n	800772a <_strtod_l+0xb2>
 80076b2:	2a0d      	cmp	r2, #13
 80076b4:	d834      	bhi.n	8007720 <_strtod_l+0xa8>
 80076b6:	2a08      	cmp	r2, #8
 80076b8:	d834      	bhi.n	8007724 <_strtod_l+0xac>
 80076ba:	2a00      	cmp	r2, #0
 80076bc:	d03e      	beq.n	800773c <_strtod_l+0xc4>
 80076be:	2300      	movs	r3, #0
 80076c0:	930a      	str	r3, [sp, #40]	; 0x28
 80076c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80076c4:	7833      	ldrb	r3, [r6, #0]
 80076c6:	2b30      	cmp	r3, #48	; 0x30
 80076c8:	f040 80b0 	bne.w	800782c <_strtod_l+0x1b4>
 80076cc:	7873      	ldrb	r3, [r6, #1]
 80076ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80076d2:	2b58      	cmp	r3, #88	; 0x58
 80076d4:	d168      	bne.n	80077a8 <_strtod_l+0x130>
 80076d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076d8:	9301      	str	r3, [sp, #4]
 80076da:	ab18      	add	r3, sp, #96	; 0x60
 80076dc:	9702      	str	r7, [sp, #8]
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	4a8d      	ldr	r2, [pc, #564]	; (8007918 <_strtod_l+0x2a0>)
 80076e2:	ab19      	add	r3, sp, #100	; 0x64
 80076e4:	a917      	add	r1, sp, #92	; 0x5c
 80076e6:	4620      	mov	r0, r4
 80076e8:	f001 ffae 	bl	8009648 <__gethex>
 80076ec:	f010 0707 	ands.w	r7, r0, #7
 80076f0:	4605      	mov	r5, r0
 80076f2:	d005      	beq.n	8007700 <_strtod_l+0x88>
 80076f4:	2f06      	cmp	r7, #6
 80076f6:	d12c      	bne.n	8007752 <_strtod_l+0xda>
 80076f8:	3601      	adds	r6, #1
 80076fa:	2300      	movs	r3, #0
 80076fc:	9617      	str	r6, [sp, #92]	; 0x5c
 80076fe:	930a      	str	r3, [sp, #40]	; 0x28
 8007700:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007702:	2b00      	cmp	r3, #0
 8007704:	f040 8590 	bne.w	8008228 <_strtod_l+0xbb0>
 8007708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800770a:	b1eb      	cbz	r3, 8007748 <_strtod_l+0xd0>
 800770c:	4652      	mov	r2, sl
 800770e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007712:	ec43 2b10 	vmov	d0, r2, r3
 8007716:	b01d      	add	sp, #116	; 0x74
 8007718:	ecbd 8b02 	vpop	{d8}
 800771c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007720:	2a20      	cmp	r2, #32
 8007722:	d1cc      	bne.n	80076be <_strtod_l+0x46>
 8007724:	3301      	adds	r3, #1
 8007726:	9317      	str	r3, [sp, #92]	; 0x5c
 8007728:	e7be      	b.n	80076a8 <_strtod_l+0x30>
 800772a:	2a2d      	cmp	r2, #45	; 0x2d
 800772c:	d1c7      	bne.n	80076be <_strtod_l+0x46>
 800772e:	2201      	movs	r2, #1
 8007730:	920a      	str	r2, [sp, #40]	; 0x28
 8007732:	1c5a      	adds	r2, r3, #1
 8007734:	9217      	str	r2, [sp, #92]	; 0x5c
 8007736:	785b      	ldrb	r3, [r3, #1]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1c2      	bne.n	80076c2 <_strtod_l+0x4a>
 800773c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800773e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007742:	2b00      	cmp	r3, #0
 8007744:	f040 856e 	bne.w	8008224 <_strtod_l+0xbac>
 8007748:	4652      	mov	r2, sl
 800774a:	465b      	mov	r3, fp
 800774c:	e7e1      	b.n	8007712 <_strtod_l+0x9a>
 800774e:	2200      	movs	r2, #0
 8007750:	e7ee      	b.n	8007730 <_strtod_l+0xb8>
 8007752:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007754:	b13a      	cbz	r2, 8007766 <_strtod_l+0xee>
 8007756:	2135      	movs	r1, #53	; 0x35
 8007758:	a81a      	add	r0, sp, #104	; 0x68
 800775a:	f002 ff80 	bl	800a65e <__copybits>
 800775e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007760:	4620      	mov	r0, r4
 8007762:	f002 fb3f 	bl	8009de4 <_Bfree>
 8007766:	3f01      	subs	r7, #1
 8007768:	2f04      	cmp	r7, #4
 800776a:	d806      	bhi.n	800777a <_strtod_l+0x102>
 800776c:	e8df f007 	tbb	[pc, r7]
 8007770:	1714030a 	.word	0x1714030a
 8007774:	0a          	.byte	0x0a
 8007775:	00          	.byte	0x00
 8007776:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800777a:	0728      	lsls	r0, r5, #28
 800777c:	d5c0      	bpl.n	8007700 <_strtod_l+0x88>
 800777e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007782:	e7bd      	b.n	8007700 <_strtod_l+0x88>
 8007784:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007788:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800778a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800778e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007792:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007796:	e7f0      	b.n	800777a <_strtod_l+0x102>
 8007798:	f8df b180 	ldr.w	fp, [pc, #384]	; 800791c <_strtod_l+0x2a4>
 800779c:	e7ed      	b.n	800777a <_strtod_l+0x102>
 800779e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80077a2:	f04f 3aff 	mov.w	sl, #4294967295
 80077a6:	e7e8      	b.n	800777a <_strtod_l+0x102>
 80077a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077aa:	1c5a      	adds	r2, r3, #1
 80077ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80077ae:	785b      	ldrb	r3, [r3, #1]
 80077b0:	2b30      	cmp	r3, #48	; 0x30
 80077b2:	d0f9      	beq.n	80077a8 <_strtod_l+0x130>
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d0a3      	beq.n	8007700 <_strtod_l+0x88>
 80077b8:	2301      	movs	r3, #1
 80077ba:	f04f 0900 	mov.w	r9, #0
 80077be:	9304      	str	r3, [sp, #16]
 80077c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077c2:	9308      	str	r3, [sp, #32]
 80077c4:	f8cd 901c 	str.w	r9, [sp, #28]
 80077c8:	464f      	mov	r7, r9
 80077ca:	220a      	movs	r2, #10
 80077cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80077ce:	7806      	ldrb	r6, [r0, #0]
 80077d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80077d4:	b2d9      	uxtb	r1, r3
 80077d6:	2909      	cmp	r1, #9
 80077d8:	d92a      	bls.n	8007830 <_strtod_l+0x1b8>
 80077da:	9905      	ldr	r1, [sp, #20]
 80077dc:	462a      	mov	r2, r5
 80077de:	f003 fb8a 	bl	800aef6 <strncmp>
 80077e2:	b398      	cbz	r0, 800784c <_strtod_l+0x1d4>
 80077e4:	2000      	movs	r0, #0
 80077e6:	4632      	mov	r2, r6
 80077e8:	463d      	mov	r5, r7
 80077ea:	9005      	str	r0, [sp, #20]
 80077ec:	4603      	mov	r3, r0
 80077ee:	2a65      	cmp	r2, #101	; 0x65
 80077f0:	d001      	beq.n	80077f6 <_strtod_l+0x17e>
 80077f2:	2a45      	cmp	r2, #69	; 0x45
 80077f4:	d118      	bne.n	8007828 <_strtod_l+0x1b0>
 80077f6:	b91d      	cbnz	r5, 8007800 <_strtod_l+0x188>
 80077f8:	9a04      	ldr	r2, [sp, #16]
 80077fa:	4302      	orrs	r2, r0
 80077fc:	d09e      	beq.n	800773c <_strtod_l+0xc4>
 80077fe:	2500      	movs	r5, #0
 8007800:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007804:	f108 0201 	add.w	r2, r8, #1
 8007808:	9217      	str	r2, [sp, #92]	; 0x5c
 800780a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800780e:	2a2b      	cmp	r2, #43	; 0x2b
 8007810:	d075      	beq.n	80078fe <_strtod_l+0x286>
 8007812:	2a2d      	cmp	r2, #45	; 0x2d
 8007814:	d07b      	beq.n	800790e <_strtod_l+0x296>
 8007816:	f04f 0c00 	mov.w	ip, #0
 800781a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800781e:	2909      	cmp	r1, #9
 8007820:	f240 8082 	bls.w	8007928 <_strtod_l+0x2b0>
 8007824:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007828:	2600      	movs	r6, #0
 800782a:	e09d      	b.n	8007968 <_strtod_l+0x2f0>
 800782c:	2300      	movs	r3, #0
 800782e:	e7c4      	b.n	80077ba <_strtod_l+0x142>
 8007830:	2f08      	cmp	r7, #8
 8007832:	bfd8      	it	le
 8007834:	9907      	ldrle	r1, [sp, #28]
 8007836:	f100 0001 	add.w	r0, r0, #1
 800783a:	bfda      	itte	le
 800783c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007840:	9307      	strle	r3, [sp, #28]
 8007842:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007846:	3701      	adds	r7, #1
 8007848:	9017      	str	r0, [sp, #92]	; 0x5c
 800784a:	e7bf      	b.n	80077cc <_strtod_l+0x154>
 800784c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800784e:	195a      	adds	r2, r3, r5
 8007850:	9217      	str	r2, [sp, #92]	; 0x5c
 8007852:	5d5a      	ldrb	r2, [r3, r5]
 8007854:	2f00      	cmp	r7, #0
 8007856:	d037      	beq.n	80078c8 <_strtod_l+0x250>
 8007858:	9005      	str	r0, [sp, #20]
 800785a:	463d      	mov	r5, r7
 800785c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007860:	2b09      	cmp	r3, #9
 8007862:	d912      	bls.n	800788a <_strtod_l+0x212>
 8007864:	2301      	movs	r3, #1
 8007866:	e7c2      	b.n	80077ee <_strtod_l+0x176>
 8007868:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800786a:	1c5a      	adds	r2, r3, #1
 800786c:	9217      	str	r2, [sp, #92]	; 0x5c
 800786e:	785a      	ldrb	r2, [r3, #1]
 8007870:	3001      	adds	r0, #1
 8007872:	2a30      	cmp	r2, #48	; 0x30
 8007874:	d0f8      	beq.n	8007868 <_strtod_l+0x1f0>
 8007876:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800787a:	2b08      	cmp	r3, #8
 800787c:	f200 84d9 	bhi.w	8008232 <_strtod_l+0xbba>
 8007880:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007882:	9005      	str	r0, [sp, #20]
 8007884:	2000      	movs	r0, #0
 8007886:	9308      	str	r3, [sp, #32]
 8007888:	4605      	mov	r5, r0
 800788a:	3a30      	subs	r2, #48	; 0x30
 800788c:	f100 0301 	add.w	r3, r0, #1
 8007890:	d014      	beq.n	80078bc <_strtod_l+0x244>
 8007892:	9905      	ldr	r1, [sp, #20]
 8007894:	4419      	add	r1, r3
 8007896:	9105      	str	r1, [sp, #20]
 8007898:	462b      	mov	r3, r5
 800789a:	eb00 0e05 	add.w	lr, r0, r5
 800789e:	210a      	movs	r1, #10
 80078a0:	4573      	cmp	r3, lr
 80078a2:	d113      	bne.n	80078cc <_strtod_l+0x254>
 80078a4:	182b      	adds	r3, r5, r0
 80078a6:	2b08      	cmp	r3, #8
 80078a8:	f105 0501 	add.w	r5, r5, #1
 80078ac:	4405      	add	r5, r0
 80078ae:	dc1c      	bgt.n	80078ea <_strtod_l+0x272>
 80078b0:	9907      	ldr	r1, [sp, #28]
 80078b2:	230a      	movs	r3, #10
 80078b4:	fb03 2301 	mla	r3, r3, r1, r2
 80078b8:	9307      	str	r3, [sp, #28]
 80078ba:	2300      	movs	r3, #0
 80078bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80078be:	1c51      	adds	r1, r2, #1
 80078c0:	9117      	str	r1, [sp, #92]	; 0x5c
 80078c2:	7852      	ldrb	r2, [r2, #1]
 80078c4:	4618      	mov	r0, r3
 80078c6:	e7c9      	b.n	800785c <_strtod_l+0x1e4>
 80078c8:	4638      	mov	r0, r7
 80078ca:	e7d2      	b.n	8007872 <_strtod_l+0x1fa>
 80078cc:	2b08      	cmp	r3, #8
 80078ce:	dc04      	bgt.n	80078da <_strtod_l+0x262>
 80078d0:	9e07      	ldr	r6, [sp, #28]
 80078d2:	434e      	muls	r6, r1
 80078d4:	9607      	str	r6, [sp, #28]
 80078d6:	3301      	adds	r3, #1
 80078d8:	e7e2      	b.n	80078a0 <_strtod_l+0x228>
 80078da:	f103 0c01 	add.w	ip, r3, #1
 80078de:	f1bc 0f10 	cmp.w	ip, #16
 80078e2:	bfd8      	it	le
 80078e4:	fb01 f909 	mulle.w	r9, r1, r9
 80078e8:	e7f5      	b.n	80078d6 <_strtod_l+0x25e>
 80078ea:	2d10      	cmp	r5, #16
 80078ec:	bfdc      	itt	le
 80078ee:	230a      	movle	r3, #10
 80078f0:	fb03 2909 	mlale	r9, r3, r9, r2
 80078f4:	e7e1      	b.n	80078ba <_strtod_l+0x242>
 80078f6:	2300      	movs	r3, #0
 80078f8:	9305      	str	r3, [sp, #20]
 80078fa:	2301      	movs	r3, #1
 80078fc:	e77c      	b.n	80077f8 <_strtod_l+0x180>
 80078fe:	f04f 0c00 	mov.w	ip, #0
 8007902:	f108 0202 	add.w	r2, r8, #2
 8007906:	9217      	str	r2, [sp, #92]	; 0x5c
 8007908:	f898 2002 	ldrb.w	r2, [r8, #2]
 800790c:	e785      	b.n	800781a <_strtod_l+0x1a2>
 800790e:	f04f 0c01 	mov.w	ip, #1
 8007912:	e7f6      	b.n	8007902 <_strtod_l+0x28a>
 8007914:	0800b7bc 	.word	0x0800b7bc
 8007918:	0800b510 	.word	0x0800b510
 800791c:	7ff00000 	.word	0x7ff00000
 8007920:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007922:	1c51      	adds	r1, r2, #1
 8007924:	9117      	str	r1, [sp, #92]	; 0x5c
 8007926:	7852      	ldrb	r2, [r2, #1]
 8007928:	2a30      	cmp	r2, #48	; 0x30
 800792a:	d0f9      	beq.n	8007920 <_strtod_l+0x2a8>
 800792c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007930:	2908      	cmp	r1, #8
 8007932:	f63f af79 	bhi.w	8007828 <_strtod_l+0x1b0>
 8007936:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800793a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800793c:	9206      	str	r2, [sp, #24]
 800793e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007940:	1c51      	adds	r1, r2, #1
 8007942:	9117      	str	r1, [sp, #92]	; 0x5c
 8007944:	7852      	ldrb	r2, [r2, #1]
 8007946:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800794a:	2e09      	cmp	r6, #9
 800794c:	d937      	bls.n	80079be <_strtod_l+0x346>
 800794e:	9e06      	ldr	r6, [sp, #24]
 8007950:	1b89      	subs	r1, r1, r6
 8007952:	2908      	cmp	r1, #8
 8007954:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007958:	dc02      	bgt.n	8007960 <_strtod_l+0x2e8>
 800795a:	4576      	cmp	r6, lr
 800795c:	bfa8      	it	ge
 800795e:	4676      	movge	r6, lr
 8007960:	f1bc 0f00 	cmp.w	ip, #0
 8007964:	d000      	beq.n	8007968 <_strtod_l+0x2f0>
 8007966:	4276      	negs	r6, r6
 8007968:	2d00      	cmp	r5, #0
 800796a:	d14d      	bne.n	8007a08 <_strtod_l+0x390>
 800796c:	9904      	ldr	r1, [sp, #16]
 800796e:	4301      	orrs	r1, r0
 8007970:	f47f aec6 	bne.w	8007700 <_strtod_l+0x88>
 8007974:	2b00      	cmp	r3, #0
 8007976:	f47f aee1 	bne.w	800773c <_strtod_l+0xc4>
 800797a:	2a69      	cmp	r2, #105	; 0x69
 800797c:	d027      	beq.n	80079ce <_strtod_l+0x356>
 800797e:	dc24      	bgt.n	80079ca <_strtod_l+0x352>
 8007980:	2a49      	cmp	r2, #73	; 0x49
 8007982:	d024      	beq.n	80079ce <_strtod_l+0x356>
 8007984:	2a4e      	cmp	r2, #78	; 0x4e
 8007986:	f47f aed9 	bne.w	800773c <_strtod_l+0xc4>
 800798a:	499f      	ldr	r1, [pc, #636]	; (8007c08 <_strtod_l+0x590>)
 800798c:	a817      	add	r0, sp, #92	; 0x5c
 800798e:	f002 f8b3 	bl	8009af8 <__match>
 8007992:	2800      	cmp	r0, #0
 8007994:	f43f aed2 	beq.w	800773c <_strtod_l+0xc4>
 8007998:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	2b28      	cmp	r3, #40	; 0x28
 800799e:	d12d      	bne.n	80079fc <_strtod_l+0x384>
 80079a0:	499a      	ldr	r1, [pc, #616]	; (8007c0c <_strtod_l+0x594>)
 80079a2:	aa1a      	add	r2, sp, #104	; 0x68
 80079a4:	a817      	add	r0, sp, #92	; 0x5c
 80079a6:	f002 f8bb 	bl	8009b20 <__hexnan>
 80079aa:	2805      	cmp	r0, #5
 80079ac:	d126      	bne.n	80079fc <_strtod_l+0x384>
 80079ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80079b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80079b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80079b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80079bc:	e6a0      	b.n	8007700 <_strtod_l+0x88>
 80079be:	210a      	movs	r1, #10
 80079c0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80079c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80079c8:	e7b9      	b.n	800793e <_strtod_l+0x2c6>
 80079ca:	2a6e      	cmp	r2, #110	; 0x6e
 80079cc:	e7db      	b.n	8007986 <_strtod_l+0x30e>
 80079ce:	4990      	ldr	r1, [pc, #576]	; (8007c10 <_strtod_l+0x598>)
 80079d0:	a817      	add	r0, sp, #92	; 0x5c
 80079d2:	f002 f891 	bl	8009af8 <__match>
 80079d6:	2800      	cmp	r0, #0
 80079d8:	f43f aeb0 	beq.w	800773c <_strtod_l+0xc4>
 80079dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079de:	498d      	ldr	r1, [pc, #564]	; (8007c14 <_strtod_l+0x59c>)
 80079e0:	3b01      	subs	r3, #1
 80079e2:	a817      	add	r0, sp, #92	; 0x5c
 80079e4:	9317      	str	r3, [sp, #92]	; 0x5c
 80079e6:	f002 f887 	bl	8009af8 <__match>
 80079ea:	b910      	cbnz	r0, 80079f2 <_strtod_l+0x37a>
 80079ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079ee:	3301      	adds	r3, #1
 80079f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80079f2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007c24 <_strtod_l+0x5ac>
 80079f6:	f04f 0a00 	mov.w	sl, #0
 80079fa:	e681      	b.n	8007700 <_strtod_l+0x88>
 80079fc:	4886      	ldr	r0, [pc, #536]	; (8007c18 <_strtod_l+0x5a0>)
 80079fe:	f003 fa1f 	bl	800ae40 <nan>
 8007a02:	ec5b ab10 	vmov	sl, fp, d0
 8007a06:	e67b      	b.n	8007700 <_strtod_l+0x88>
 8007a08:	9b05      	ldr	r3, [sp, #20]
 8007a0a:	9807      	ldr	r0, [sp, #28]
 8007a0c:	1af3      	subs	r3, r6, r3
 8007a0e:	2f00      	cmp	r7, #0
 8007a10:	bf08      	it	eq
 8007a12:	462f      	moveq	r7, r5
 8007a14:	2d10      	cmp	r5, #16
 8007a16:	9306      	str	r3, [sp, #24]
 8007a18:	46a8      	mov	r8, r5
 8007a1a:	bfa8      	it	ge
 8007a1c:	f04f 0810 	movge.w	r8, #16
 8007a20:	f7f8 fd78 	bl	8000514 <__aeabi_ui2d>
 8007a24:	2d09      	cmp	r5, #9
 8007a26:	4682      	mov	sl, r0
 8007a28:	468b      	mov	fp, r1
 8007a2a:	dd13      	ble.n	8007a54 <_strtod_l+0x3dc>
 8007a2c:	4b7b      	ldr	r3, [pc, #492]	; (8007c1c <_strtod_l+0x5a4>)
 8007a2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007a32:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007a36:	f7f8 fde7 	bl	8000608 <__aeabi_dmul>
 8007a3a:	4682      	mov	sl, r0
 8007a3c:	4648      	mov	r0, r9
 8007a3e:	468b      	mov	fp, r1
 8007a40:	f7f8 fd68 	bl	8000514 <__aeabi_ui2d>
 8007a44:	4602      	mov	r2, r0
 8007a46:	460b      	mov	r3, r1
 8007a48:	4650      	mov	r0, sl
 8007a4a:	4659      	mov	r1, fp
 8007a4c:	f7f8 fc26 	bl	800029c <__adddf3>
 8007a50:	4682      	mov	sl, r0
 8007a52:	468b      	mov	fp, r1
 8007a54:	2d0f      	cmp	r5, #15
 8007a56:	dc38      	bgt.n	8007aca <_strtod_l+0x452>
 8007a58:	9b06      	ldr	r3, [sp, #24]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f43f ae50 	beq.w	8007700 <_strtod_l+0x88>
 8007a60:	dd24      	ble.n	8007aac <_strtod_l+0x434>
 8007a62:	2b16      	cmp	r3, #22
 8007a64:	dc0b      	bgt.n	8007a7e <_strtod_l+0x406>
 8007a66:	496d      	ldr	r1, [pc, #436]	; (8007c1c <_strtod_l+0x5a4>)
 8007a68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a70:	4652      	mov	r2, sl
 8007a72:	465b      	mov	r3, fp
 8007a74:	f7f8 fdc8 	bl	8000608 <__aeabi_dmul>
 8007a78:	4682      	mov	sl, r0
 8007a7a:	468b      	mov	fp, r1
 8007a7c:	e640      	b.n	8007700 <_strtod_l+0x88>
 8007a7e:	9a06      	ldr	r2, [sp, #24]
 8007a80:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007a84:	4293      	cmp	r3, r2
 8007a86:	db20      	blt.n	8007aca <_strtod_l+0x452>
 8007a88:	4c64      	ldr	r4, [pc, #400]	; (8007c1c <_strtod_l+0x5a4>)
 8007a8a:	f1c5 050f 	rsb	r5, r5, #15
 8007a8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007a92:	4652      	mov	r2, sl
 8007a94:	465b      	mov	r3, fp
 8007a96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a9a:	f7f8 fdb5 	bl	8000608 <__aeabi_dmul>
 8007a9e:	9b06      	ldr	r3, [sp, #24]
 8007aa0:	1b5d      	subs	r5, r3, r5
 8007aa2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007aa6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007aaa:	e7e3      	b.n	8007a74 <_strtod_l+0x3fc>
 8007aac:	9b06      	ldr	r3, [sp, #24]
 8007aae:	3316      	adds	r3, #22
 8007ab0:	db0b      	blt.n	8007aca <_strtod_l+0x452>
 8007ab2:	9b05      	ldr	r3, [sp, #20]
 8007ab4:	1b9e      	subs	r6, r3, r6
 8007ab6:	4b59      	ldr	r3, [pc, #356]	; (8007c1c <_strtod_l+0x5a4>)
 8007ab8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007abc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ac0:	4650      	mov	r0, sl
 8007ac2:	4659      	mov	r1, fp
 8007ac4:	f7f8 feca 	bl	800085c <__aeabi_ddiv>
 8007ac8:	e7d6      	b.n	8007a78 <_strtod_l+0x400>
 8007aca:	9b06      	ldr	r3, [sp, #24]
 8007acc:	eba5 0808 	sub.w	r8, r5, r8
 8007ad0:	4498      	add	r8, r3
 8007ad2:	f1b8 0f00 	cmp.w	r8, #0
 8007ad6:	dd74      	ble.n	8007bc2 <_strtod_l+0x54a>
 8007ad8:	f018 030f 	ands.w	r3, r8, #15
 8007adc:	d00a      	beq.n	8007af4 <_strtod_l+0x47c>
 8007ade:	494f      	ldr	r1, [pc, #316]	; (8007c1c <_strtod_l+0x5a4>)
 8007ae0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ae4:	4652      	mov	r2, sl
 8007ae6:	465b      	mov	r3, fp
 8007ae8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007aec:	f7f8 fd8c 	bl	8000608 <__aeabi_dmul>
 8007af0:	4682      	mov	sl, r0
 8007af2:	468b      	mov	fp, r1
 8007af4:	f038 080f 	bics.w	r8, r8, #15
 8007af8:	d04f      	beq.n	8007b9a <_strtod_l+0x522>
 8007afa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007afe:	dd22      	ble.n	8007b46 <_strtod_l+0x4ce>
 8007b00:	2500      	movs	r5, #0
 8007b02:	462e      	mov	r6, r5
 8007b04:	9507      	str	r5, [sp, #28]
 8007b06:	9505      	str	r5, [sp, #20]
 8007b08:	2322      	movs	r3, #34	; 0x22
 8007b0a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007c24 <_strtod_l+0x5ac>
 8007b0e:	6023      	str	r3, [r4, #0]
 8007b10:	f04f 0a00 	mov.w	sl, #0
 8007b14:	9b07      	ldr	r3, [sp, #28]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f43f adf2 	beq.w	8007700 <_strtod_l+0x88>
 8007b1c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f002 f960 	bl	8009de4 <_Bfree>
 8007b24:	9905      	ldr	r1, [sp, #20]
 8007b26:	4620      	mov	r0, r4
 8007b28:	f002 f95c 	bl	8009de4 <_Bfree>
 8007b2c:	4631      	mov	r1, r6
 8007b2e:	4620      	mov	r0, r4
 8007b30:	f002 f958 	bl	8009de4 <_Bfree>
 8007b34:	9907      	ldr	r1, [sp, #28]
 8007b36:	4620      	mov	r0, r4
 8007b38:	f002 f954 	bl	8009de4 <_Bfree>
 8007b3c:	4629      	mov	r1, r5
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f002 f950 	bl	8009de4 <_Bfree>
 8007b44:	e5dc      	b.n	8007700 <_strtod_l+0x88>
 8007b46:	4b36      	ldr	r3, [pc, #216]	; (8007c20 <_strtod_l+0x5a8>)
 8007b48:	9304      	str	r3, [sp, #16]
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007b50:	4650      	mov	r0, sl
 8007b52:	4659      	mov	r1, fp
 8007b54:	4699      	mov	r9, r3
 8007b56:	f1b8 0f01 	cmp.w	r8, #1
 8007b5a:	dc21      	bgt.n	8007ba0 <_strtod_l+0x528>
 8007b5c:	b10b      	cbz	r3, 8007b62 <_strtod_l+0x4ea>
 8007b5e:	4682      	mov	sl, r0
 8007b60:	468b      	mov	fp, r1
 8007b62:	4b2f      	ldr	r3, [pc, #188]	; (8007c20 <_strtod_l+0x5a8>)
 8007b64:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007b68:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007b6c:	4652      	mov	r2, sl
 8007b6e:	465b      	mov	r3, fp
 8007b70:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007b74:	f7f8 fd48 	bl	8000608 <__aeabi_dmul>
 8007b78:	4b2a      	ldr	r3, [pc, #168]	; (8007c24 <_strtod_l+0x5ac>)
 8007b7a:	460a      	mov	r2, r1
 8007b7c:	400b      	ands	r3, r1
 8007b7e:	492a      	ldr	r1, [pc, #168]	; (8007c28 <_strtod_l+0x5b0>)
 8007b80:	428b      	cmp	r3, r1
 8007b82:	4682      	mov	sl, r0
 8007b84:	d8bc      	bhi.n	8007b00 <_strtod_l+0x488>
 8007b86:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007b8a:	428b      	cmp	r3, r1
 8007b8c:	bf86      	itte	hi
 8007b8e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007c2c <_strtod_l+0x5b4>
 8007b92:	f04f 3aff 	movhi.w	sl, #4294967295
 8007b96:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	9304      	str	r3, [sp, #16]
 8007b9e:	e084      	b.n	8007caa <_strtod_l+0x632>
 8007ba0:	f018 0f01 	tst.w	r8, #1
 8007ba4:	d005      	beq.n	8007bb2 <_strtod_l+0x53a>
 8007ba6:	9b04      	ldr	r3, [sp, #16]
 8007ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bac:	f7f8 fd2c 	bl	8000608 <__aeabi_dmul>
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	9a04      	ldr	r2, [sp, #16]
 8007bb4:	3208      	adds	r2, #8
 8007bb6:	f109 0901 	add.w	r9, r9, #1
 8007bba:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007bbe:	9204      	str	r2, [sp, #16]
 8007bc0:	e7c9      	b.n	8007b56 <_strtod_l+0x4de>
 8007bc2:	d0ea      	beq.n	8007b9a <_strtod_l+0x522>
 8007bc4:	f1c8 0800 	rsb	r8, r8, #0
 8007bc8:	f018 020f 	ands.w	r2, r8, #15
 8007bcc:	d00a      	beq.n	8007be4 <_strtod_l+0x56c>
 8007bce:	4b13      	ldr	r3, [pc, #76]	; (8007c1c <_strtod_l+0x5a4>)
 8007bd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bd4:	4650      	mov	r0, sl
 8007bd6:	4659      	mov	r1, fp
 8007bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bdc:	f7f8 fe3e 	bl	800085c <__aeabi_ddiv>
 8007be0:	4682      	mov	sl, r0
 8007be2:	468b      	mov	fp, r1
 8007be4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007be8:	d0d7      	beq.n	8007b9a <_strtod_l+0x522>
 8007bea:	f1b8 0f1f 	cmp.w	r8, #31
 8007bee:	dd1f      	ble.n	8007c30 <_strtod_l+0x5b8>
 8007bf0:	2500      	movs	r5, #0
 8007bf2:	462e      	mov	r6, r5
 8007bf4:	9507      	str	r5, [sp, #28]
 8007bf6:	9505      	str	r5, [sp, #20]
 8007bf8:	2322      	movs	r3, #34	; 0x22
 8007bfa:	f04f 0a00 	mov.w	sl, #0
 8007bfe:	f04f 0b00 	mov.w	fp, #0
 8007c02:	6023      	str	r3, [r4, #0]
 8007c04:	e786      	b.n	8007b14 <_strtod_l+0x49c>
 8007c06:	bf00      	nop
 8007c08:	0800b4e1 	.word	0x0800b4e1
 8007c0c:	0800b524 	.word	0x0800b524
 8007c10:	0800b4d9 	.word	0x0800b4d9
 8007c14:	0800b664 	.word	0x0800b664
 8007c18:	0800b978 	.word	0x0800b978
 8007c1c:	0800b858 	.word	0x0800b858
 8007c20:	0800b830 	.word	0x0800b830
 8007c24:	7ff00000 	.word	0x7ff00000
 8007c28:	7ca00000 	.word	0x7ca00000
 8007c2c:	7fefffff 	.word	0x7fefffff
 8007c30:	f018 0310 	ands.w	r3, r8, #16
 8007c34:	bf18      	it	ne
 8007c36:	236a      	movne	r3, #106	; 0x6a
 8007c38:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007fe8 <_strtod_l+0x970>
 8007c3c:	9304      	str	r3, [sp, #16]
 8007c3e:	4650      	mov	r0, sl
 8007c40:	4659      	mov	r1, fp
 8007c42:	2300      	movs	r3, #0
 8007c44:	f018 0f01 	tst.w	r8, #1
 8007c48:	d004      	beq.n	8007c54 <_strtod_l+0x5dc>
 8007c4a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007c4e:	f7f8 fcdb 	bl	8000608 <__aeabi_dmul>
 8007c52:	2301      	movs	r3, #1
 8007c54:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007c58:	f109 0908 	add.w	r9, r9, #8
 8007c5c:	d1f2      	bne.n	8007c44 <_strtod_l+0x5cc>
 8007c5e:	b10b      	cbz	r3, 8007c64 <_strtod_l+0x5ec>
 8007c60:	4682      	mov	sl, r0
 8007c62:	468b      	mov	fp, r1
 8007c64:	9b04      	ldr	r3, [sp, #16]
 8007c66:	b1c3      	cbz	r3, 8007c9a <_strtod_l+0x622>
 8007c68:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007c6c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	4659      	mov	r1, fp
 8007c74:	dd11      	ble.n	8007c9a <_strtod_l+0x622>
 8007c76:	2b1f      	cmp	r3, #31
 8007c78:	f340 8124 	ble.w	8007ec4 <_strtod_l+0x84c>
 8007c7c:	2b34      	cmp	r3, #52	; 0x34
 8007c7e:	bfde      	ittt	le
 8007c80:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007c84:	f04f 33ff 	movle.w	r3, #4294967295
 8007c88:	fa03 f202 	lslle.w	r2, r3, r2
 8007c8c:	f04f 0a00 	mov.w	sl, #0
 8007c90:	bfcc      	ite	gt
 8007c92:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007c96:	ea02 0b01 	andle.w	fp, r2, r1
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	4650      	mov	r0, sl
 8007ca0:	4659      	mov	r1, fp
 8007ca2:	f7f8 ff19 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ca6:	2800      	cmp	r0, #0
 8007ca8:	d1a2      	bne.n	8007bf0 <_strtod_l+0x578>
 8007caa:	9b07      	ldr	r3, [sp, #28]
 8007cac:	9300      	str	r3, [sp, #0]
 8007cae:	9908      	ldr	r1, [sp, #32]
 8007cb0:	462b      	mov	r3, r5
 8007cb2:	463a      	mov	r2, r7
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	f002 f8fd 	bl	8009eb4 <__s2b>
 8007cba:	9007      	str	r0, [sp, #28]
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	f43f af1f 	beq.w	8007b00 <_strtod_l+0x488>
 8007cc2:	9b05      	ldr	r3, [sp, #20]
 8007cc4:	1b9e      	subs	r6, r3, r6
 8007cc6:	9b06      	ldr	r3, [sp, #24]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	bfb4      	ite	lt
 8007ccc:	4633      	movlt	r3, r6
 8007cce:	2300      	movge	r3, #0
 8007cd0:	930c      	str	r3, [sp, #48]	; 0x30
 8007cd2:	9b06      	ldr	r3, [sp, #24]
 8007cd4:	2500      	movs	r5, #0
 8007cd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007cda:	9312      	str	r3, [sp, #72]	; 0x48
 8007cdc:	462e      	mov	r6, r5
 8007cde:	9b07      	ldr	r3, [sp, #28]
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	6859      	ldr	r1, [r3, #4]
 8007ce4:	f002 f83e 	bl	8009d64 <_Balloc>
 8007ce8:	9005      	str	r0, [sp, #20]
 8007cea:	2800      	cmp	r0, #0
 8007cec:	f43f af0c 	beq.w	8007b08 <_strtod_l+0x490>
 8007cf0:	9b07      	ldr	r3, [sp, #28]
 8007cf2:	691a      	ldr	r2, [r3, #16]
 8007cf4:	3202      	adds	r2, #2
 8007cf6:	f103 010c 	add.w	r1, r3, #12
 8007cfa:	0092      	lsls	r2, r2, #2
 8007cfc:	300c      	adds	r0, #12
 8007cfe:	f7fe fd5b 	bl	80067b8 <memcpy>
 8007d02:	ec4b ab10 	vmov	d0, sl, fp
 8007d06:	aa1a      	add	r2, sp, #104	; 0x68
 8007d08:	a919      	add	r1, sp, #100	; 0x64
 8007d0a:	4620      	mov	r0, r4
 8007d0c:	f002 fc18 	bl	800a540 <__d2b>
 8007d10:	ec4b ab18 	vmov	d8, sl, fp
 8007d14:	9018      	str	r0, [sp, #96]	; 0x60
 8007d16:	2800      	cmp	r0, #0
 8007d18:	f43f aef6 	beq.w	8007b08 <_strtod_l+0x490>
 8007d1c:	2101      	movs	r1, #1
 8007d1e:	4620      	mov	r0, r4
 8007d20:	f002 f962 	bl	8009fe8 <__i2b>
 8007d24:	4606      	mov	r6, r0
 8007d26:	2800      	cmp	r0, #0
 8007d28:	f43f aeee 	beq.w	8007b08 <_strtod_l+0x490>
 8007d2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d2e:	9904      	ldr	r1, [sp, #16]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	bfab      	itete	ge
 8007d34:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007d36:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007d38:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007d3a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007d3e:	bfac      	ite	ge
 8007d40:	eb03 0902 	addge.w	r9, r3, r2
 8007d44:	1ad7      	sublt	r7, r2, r3
 8007d46:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007d48:	eba3 0801 	sub.w	r8, r3, r1
 8007d4c:	4490      	add	r8, r2
 8007d4e:	4ba1      	ldr	r3, [pc, #644]	; (8007fd4 <_strtod_l+0x95c>)
 8007d50:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d54:	4598      	cmp	r8, r3
 8007d56:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007d5a:	f280 80c7 	bge.w	8007eec <_strtod_l+0x874>
 8007d5e:	eba3 0308 	sub.w	r3, r3, r8
 8007d62:	2b1f      	cmp	r3, #31
 8007d64:	eba2 0203 	sub.w	r2, r2, r3
 8007d68:	f04f 0101 	mov.w	r1, #1
 8007d6c:	f300 80b1 	bgt.w	8007ed2 <_strtod_l+0x85a>
 8007d70:	fa01 f303 	lsl.w	r3, r1, r3
 8007d74:	930d      	str	r3, [sp, #52]	; 0x34
 8007d76:	2300      	movs	r3, #0
 8007d78:	9308      	str	r3, [sp, #32]
 8007d7a:	eb09 0802 	add.w	r8, r9, r2
 8007d7e:	9b04      	ldr	r3, [sp, #16]
 8007d80:	45c1      	cmp	r9, r8
 8007d82:	4417      	add	r7, r2
 8007d84:	441f      	add	r7, r3
 8007d86:	464b      	mov	r3, r9
 8007d88:	bfa8      	it	ge
 8007d8a:	4643      	movge	r3, r8
 8007d8c:	42bb      	cmp	r3, r7
 8007d8e:	bfa8      	it	ge
 8007d90:	463b      	movge	r3, r7
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	bfc2      	ittt	gt
 8007d96:	eba8 0803 	subgt.w	r8, r8, r3
 8007d9a:	1aff      	subgt	r7, r7, r3
 8007d9c:	eba9 0903 	subgt.w	r9, r9, r3
 8007da0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	dd17      	ble.n	8007dd6 <_strtod_l+0x75e>
 8007da6:	4631      	mov	r1, r6
 8007da8:	461a      	mov	r2, r3
 8007daa:	4620      	mov	r0, r4
 8007dac:	f002 f9dc 	bl	800a168 <__pow5mult>
 8007db0:	4606      	mov	r6, r0
 8007db2:	2800      	cmp	r0, #0
 8007db4:	f43f aea8 	beq.w	8007b08 <_strtod_l+0x490>
 8007db8:	4601      	mov	r1, r0
 8007dba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	f002 f929 	bl	800a014 <__multiply>
 8007dc2:	900b      	str	r0, [sp, #44]	; 0x2c
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	f43f ae9f 	beq.w	8007b08 <_strtod_l+0x490>
 8007dca:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007dcc:	4620      	mov	r0, r4
 8007dce:	f002 f809 	bl	8009de4 <_Bfree>
 8007dd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dd4:	9318      	str	r3, [sp, #96]	; 0x60
 8007dd6:	f1b8 0f00 	cmp.w	r8, #0
 8007dda:	f300 808c 	bgt.w	8007ef6 <_strtod_l+0x87e>
 8007dde:	9b06      	ldr	r3, [sp, #24]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	dd08      	ble.n	8007df6 <_strtod_l+0x77e>
 8007de4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007de6:	9905      	ldr	r1, [sp, #20]
 8007de8:	4620      	mov	r0, r4
 8007dea:	f002 f9bd 	bl	800a168 <__pow5mult>
 8007dee:	9005      	str	r0, [sp, #20]
 8007df0:	2800      	cmp	r0, #0
 8007df2:	f43f ae89 	beq.w	8007b08 <_strtod_l+0x490>
 8007df6:	2f00      	cmp	r7, #0
 8007df8:	dd08      	ble.n	8007e0c <_strtod_l+0x794>
 8007dfa:	9905      	ldr	r1, [sp, #20]
 8007dfc:	463a      	mov	r2, r7
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f002 fa0c 	bl	800a21c <__lshift>
 8007e04:	9005      	str	r0, [sp, #20]
 8007e06:	2800      	cmp	r0, #0
 8007e08:	f43f ae7e 	beq.w	8007b08 <_strtod_l+0x490>
 8007e0c:	f1b9 0f00 	cmp.w	r9, #0
 8007e10:	dd08      	ble.n	8007e24 <_strtod_l+0x7ac>
 8007e12:	4631      	mov	r1, r6
 8007e14:	464a      	mov	r2, r9
 8007e16:	4620      	mov	r0, r4
 8007e18:	f002 fa00 	bl	800a21c <__lshift>
 8007e1c:	4606      	mov	r6, r0
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	f43f ae72 	beq.w	8007b08 <_strtod_l+0x490>
 8007e24:	9a05      	ldr	r2, [sp, #20]
 8007e26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007e28:	4620      	mov	r0, r4
 8007e2a:	f002 fa83 	bl	800a334 <__mdiff>
 8007e2e:	4605      	mov	r5, r0
 8007e30:	2800      	cmp	r0, #0
 8007e32:	f43f ae69 	beq.w	8007b08 <_strtod_l+0x490>
 8007e36:	68c3      	ldr	r3, [r0, #12]
 8007e38:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	60c3      	str	r3, [r0, #12]
 8007e3e:	4631      	mov	r1, r6
 8007e40:	f002 fa5c 	bl	800a2fc <__mcmp>
 8007e44:	2800      	cmp	r0, #0
 8007e46:	da60      	bge.n	8007f0a <_strtod_l+0x892>
 8007e48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e4a:	ea53 030a 	orrs.w	r3, r3, sl
 8007e4e:	f040 8082 	bne.w	8007f56 <_strtod_l+0x8de>
 8007e52:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d17d      	bne.n	8007f56 <_strtod_l+0x8de>
 8007e5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007e5e:	0d1b      	lsrs	r3, r3, #20
 8007e60:	051b      	lsls	r3, r3, #20
 8007e62:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007e66:	d976      	bls.n	8007f56 <_strtod_l+0x8de>
 8007e68:	696b      	ldr	r3, [r5, #20]
 8007e6a:	b913      	cbnz	r3, 8007e72 <_strtod_l+0x7fa>
 8007e6c:	692b      	ldr	r3, [r5, #16]
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	dd71      	ble.n	8007f56 <_strtod_l+0x8de>
 8007e72:	4629      	mov	r1, r5
 8007e74:	2201      	movs	r2, #1
 8007e76:	4620      	mov	r0, r4
 8007e78:	f002 f9d0 	bl	800a21c <__lshift>
 8007e7c:	4631      	mov	r1, r6
 8007e7e:	4605      	mov	r5, r0
 8007e80:	f002 fa3c 	bl	800a2fc <__mcmp>
 8007e84:	2800      	cmp	r0, #0
 8007e86:	dd66      	ble.n	8007f56 <_strtod_l+0x8de>
 8007e88:	9904      	ldr	r1, [sp, #16]
 8007e8a:	4a53      	ldr	r2, [pc, #332]	; (8007fd8 <_strtod_l+0x960>)
 8007e8c:	465b      	mov	r3, fp
 8007e8e:	2900      	cmp	r1, #0
 8007e90:	f000 8081 	beq.w	8007f96 <_strtod_l+0x91e>
 8007e94:	ea02 010b 	and.w	r1, r2, fp
 8007e98:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007e9c:	dc7b      	bgt.n	8007f96 <_strtod_l+0x91e>
 8007e9e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007ea2:	f77f aea9 	ble.w	8007bf8 <_strtod_l+0x580>
 8007ea6:	4b4d      	ldr	r3, [pc, #308]	; (8007fdc <_strtod_l+0x964>)
 8007ea8:	4650      	mov	r0, sl
 8007eaa:	4659      	mov	r1, fp
 8007eac:	2200      	movs	r2, #0
 8007eae:	f7f8 fbab 	bl	8000608 <__aeabi_dmul>
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	4303      	orrs	r3, r0
 8007eb6:	bf08      	it	eq
 8007eb8:	2322      	moveq	r3, #34	; 0x22
 8007eba:	4682      	mov	sl, r0
 8007ebc:	468b      	mov	fp, r1
 8007ebe:	bf08      	it	eq
 8007ec0:	6023      	streq	r3, [r4, #0]
 8007ec2:	e62b      	b.n	8007b1c <_strtod_l+0x4a4>
 8007ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ecc:	ea03 0a0a 	and.w	sl, r3, sl
 8007ed0:	e6e3      	b.n	8007c9a <_strtod_l+0x622>
 8007ed2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007ed6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007eda:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007ede:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007ee2:	fa01 f308 	lsl.w	r3, r1, r8
 8007ee6:	9308      	str	r3, [sp, #32]
 8007ee8:	910d      	str	r1, [sp, #52]	; 0x34
 8007eea:	e746      	b.n	8007d7a <_strtod_l+0x702>
 8007eec:	2300      	movs	r3, #0
 8007eee:	9308      	str	r3, [sp, #32]
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	930d      	str	r3, [sp, #52]	; 0x34
 8007ef4:	e741      	b.n	8007d7a <_strtod_l+0x702>
 8007ef6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ef8:	4642      	mov	r2, r8
 8007efa:	4620      	mov	r0, r4
 8007efc:	f002 f98e 	bl	800a21c <__lshift>
 8007f00:	9018      	str	r0, [sp, #96]	; 0x60
 8007f02:	2800      	cmp	r0, #0
 8007f04:	f47f af6b 	bne.w	8007dde <_strtod_l+0x766>
 8007f08:	e5fe      	b.n	8007b08 <_strtod_l+0x490>
 8007f0a:	465f      	mov	r7, fp
 8007f0c:	d16e      	bne.n	8007fec <_strtod_l+0x974>
 8007f0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f14:	b342      	cbz	r2, 8007f68 <_strtod_l+0x8f0>
 8007f16:	4a32      	ldr	r2, [pc, #200]	; (8007fe0 <_strtod_l+0x968>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d128      	bne.n	8007f6e <_strtod_l+0x8f6>
 8007f1c:	9b04      	ldr	r3, [sp, #16]
 8007f1e:	4651      	mov	r1, sl
 8007f20:	b1eb      	cbz	r3, 8007f5e <_strtod_l+0x8e6>
 8007f22:	4b2d      	ldr	r3, [pc, #180]	; (8007fd8 <_strtod_l+0x960>)
 8007f24:	403b      	ands	r3, r7
 8007f26:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f2e:	d819      	bhi.n	8007f64 <_strtod_l+0x8ec>
 8007f30:	0d1b      	lsrs	r3, r3, #20
 8007f32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007f36:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3a:	4299      	cmp	r1, r3
 8007f3c:	d117      	bne.n	8007f6e <_strtod_l+0x8f6>
 8007f3e:	4b29      	ldr	r3, [pc, #164]	; (8007fe4 <_strtod_l+0x96c>)
 8007f40:	429f      	cmp	r7, r3
 8007f42:	d102      	bne.n	8007f4a <_strtod_l+0x8d2>
 8007f44:	3101      	adds	r1, #1
 8007f46:	f43f addf 	beq.w	8007b08 <_strtod_l+0x490>
 8007f4a:	4b23      	ldr	r3, [pc, #140]	; (8007fd8 <_strtod_l+0x960>)
 8007f4c:	403b      	ands	r3, r7
 8007f4e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007f52:	f04f 0a00 	mov.w	sl, #0
 8007f56:	9b04      	ldr	r3, [sp, #16]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1a4      	bne.n	8007ea6 <_strtod_l+0x82e>
 8007f5c:	e5de      	b.n	8007b1c <_strtod_l+0x4a4>
 8007f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f62:	e7ea      	b.n	8007f3a <_strtod_l+0x8c2>
 8007f64:	4613      	mov	r3, r2
 8007f66:	e7e8      	b.n	8007f3a <_strtod_l+0x8c2>
 8007f68:	ea53 030a 	orrs.w	r3, r3, sl
 8007f6c:	d08c      	beq.n	8007e88 <_strtod_l+0x810>
 8007f6e:	9b08      	ldr	r3, [sp, #32]
 8007f70:	b1db      	cbz	r3, 8007faa <_strtod_l+0x932>
 8007f72:	423b      	tst	r3, r7
 8007f74:	d0ef      	beq.n	8007f56 <_strtod_l+0x8de>
 8007f76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f78:	9a04      	ldr	r2, [sp, #16]
 8007f7a:	4650      	mov	r0, sl
 8007f7c:	4659      	mov	r1, fp
 8007f7e:	b1c3      	cbz	r3, 8007fb2 <_strtod_l+0x93a>
 8007f80:	f7ff fb5e 	bl	8007640 <sulp>
 8007f84:	4602      	mov	r2, r0
 8007f86:	460b      	mov	r3, r1
 8007f88:	ec51 0b18 	vmov	r0, r1, d8
 8007f8c:	f7f8 f986 	bl	800029c <__adddf3>
 8007f90:	4682      	mov	sl, r0
 8007f92:	468b      	mov	fp, r1
 8007f94:	e7df      	b.n	8007f56 <_strtod_l+0x8de>
 8007f96:	4013      	ands	r3, r2
 8007f98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007f9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007fa0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007fa4:	f04f 3aff 	mov.w	sl, #4294967295
 8007fa8:	e7d5      	b.n	8007f56 <_strtod_l+0x8de>
 8007faa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fac:	ea13 0f0a 	tst.w	r3, sl
 8007fb0:	e7e0      	b.n	8007f74 <_strtod_l+0x8fc>
 8007fb2:	f7ff fb45 	bl	8007640 <sulp>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	460b      	mov	r3, r1
 8007fba:	ec51 0b18 	vmov	r0, r1, d8
 8007fbe:	f7f8 f96b 	bl	8000298 <__aeabi_dsub>
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	4682      	mov	sl, r0
 8007fc8:	468b      	mov	fp, r1
 8007fca:	f7f8 fd85 	bl	8000ad8 <__aeabi_dcmpeq>
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	d0c1      	beq.n	8007f56 <_strtod_l+0x8de>
 8007fd2:	e611      	b.n	8007bf8 <_strtod_l+0x580>
 8007fd4:	fffffc02 	.word	0xfffffc02
 8007fd8:	7ff00000 	.word	0x7ff00000
 8007fdc:	39500000 	.word	0x39500000
 8007fe0:	000fffff 	.word	0x000fffff
 8007fe4:	7fefffff 	.word	0x7fefffff
 8007fe8:	0800b538 	.word	0x0800b538
 8007fec:	4631      	mov	r1, r6
 8007fee:	4628      	mov	r0, r5
 8007ff0:	f002 fb02 	bl	800a5f8 <__ratio>
 8007ff4:	ec59 8b10 	vmov	r8, r9, d0
 8007ff8:	ee10 0a10 	vmov	r0, s0
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008002:	4649      	mov	r1, r9
 8008004:	f7f8 fd7c 	bl	8000b00 <__aeabi_dcmple>
 8008008:	2800      	cmp	r0, #0
 800800a:	d07a      	beq.n	8008102 <_strtod_l+0xa8a>
 800800c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800800e:	2b00      	cmp	r3, #0
 8008010:	d04a      	beq.n	80080a8 <_strtod_l+0xa30>
 8008012:	4b95      	ldr	r3, [pc, #596]	; (8008268 <_strtod_l+0xbf0>)
 8008014:	2200      	movs	r2, #0
 8008016:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800801a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008268 <_strtod_l+0xbf0>
 800801e:	f04f 0800 	mov.w	r8, #0
 8008022:	4b92      	ldr	r3, [pc, #584]	; (800826c <_strtod_l+0xbf4>)
 8008024:	403b      	ands	r3, r7
 8008026:	930d      	str	r3, [sp, #52]	; 0x34
 8008028:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800802a:	4b91      	ldr	r3, [pc, #580]	; (8008270 <_strtod_l+0xbf8>)
 800802c:	429a      	cmp	r2, r3
 800802e:	f040 80b0 	bne.w	8008192 <_strtod_l+0xb1a>
 8008032:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008036:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800803a:	ec4b ab10 	vmov	d0, sl, fp
 800803e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008042:	f002 fa01 	bl	800a448 <__ulp>
 8008046:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800804a:	ec53 2b10 	vmov	r2, r3, d0
 800804e:	f7f8 fadb 	bl	8000608 <__aeabi_dmul>
 8008052:	4652      	mov	r2, sl
 8008054:	465b      	mov	r3, fp
 8008056:	f7f8 f921 	bl	800029c <__adddf3>
 800805a:	460b      	mov	r3, r1
 800805c:	4983      	ldr	r1, [pc, #524]	; (800826c <_strtod_l+0xbf4>)
 800805e:	4a85      	ldr	r2, [pc, #532]	; (8008274 <_strtod_l+0xbfc>)
 8008060:	4019      	ands	r1, r3
 8008062:	4291      	cmp	r1, r2
 8008064:	4682      	mov	sl, r0
 8008066:	d960      	bls.n	800812a <_strtod_l+0xab2>
 8008068:	ee18 3a90 	vmov	r3, s17
 800806c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008070:	4293      	cmp	r3, r2
 8008072:	d104      	bne.n	800807e <_strtod_l+0xa06>
 8008074:	ee18 3a10 	vmov	r3, s16
 8008078:	3301      	adds	r3, #1
 800807a:	f43f ad45 	beq.w	8007b08 <_strtod_l+0x490>
 800807e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008280 <_strtod_l+0xc08>
 8008082:	f04f 3aff 	mov.w	sl, #4294967295
 8008086:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008088:	4620      	mov	r0, r4
 800808a:	f001 feab 	bl	8009de4 <_Bfree>
 800808e:	9905      	ldr	r1, [sp, #20]
 8008090:	4620      	mov	r0, r4
 8008092:	f001 fea7 	bl	8009de4 <_Bfree>
 8008096:	4631      	mov	r1, r6
 8008098:	4620      	mov	r0, r4
 800809a:	f001 fea3 	bl	8009de4 <_Bfree>
 800809e:	4629      	mov	r1, r5
 80080a0:	4620      	mov	r0, r4
 80080a2:	f001 fe9f 	bl	8009de4 <_Bfree>
 80080a6:	e61a      	b.n	8007cde <_strtod_l+0x666>
 80080a8:	f1ba 0f00 	cmp.w	sl, #0
 80080ac:	d11b      	bne.n	80080e6 <_strtod_l+0xa6e>
 80080ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080b2:	b9f3      	cbnz	r3, 80080f2 <_strtod_l+0xa7a>
 80080b4:	4b6c      	ldr	r3, [pc, #432]	; (8008268 <_strtod_l+0xbf0>)
 80080b6:	2200      	movs	r2, #0
 80080b8:	4640      	mov	r0, r8
 80080ba:	4649      	mov	r1, r9
 80080bc:	f7f8 fd16 	bl	8000aec <__aeabi_dcmplt>
 80080c0:	b9d0      	cbnz	r0, 80080f8 <_strtod_l+0xa80>
 80080c2:	4640      	mov	r0, r8
 80080c4:	4649      	mov	r1, r9
 80080c6:	4b6c      	ldr	r3, [pc, #432]	; (8008278 <_strtod_l+0xc00>)
 80080c8:	2200      	movs	r2, #0
 80080ca:	f7f8 fa9d 	bl	8000608 <__aeabi_dmul>
 80080ce:	4680      	mov	r8, r0
 80080d0:	4689      	mov	r9, r1
 80080d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80080d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80080da:	9315      	str	r3, [sp, #84]	; 0x54
 80080dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80080e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80080e4:	e79d      	b.n	8008022 <_strtod_l+0x9aa>
 80080e6:	f1ba 0f01 	cmp.w	sl, #1
 80080ea:	d102      	bne.n	80080f2 <_strtod_l+0xa7a>
 80080ec:	2f00      	cmp	r7, #0
 80080ee:	f43f ad83 	beq.w	8007bf8 <_strtod_l+0x580>
 80080f2:	4b62      	ldr	r3, [pc, #392]	; (800827c <_strtod_l+0xc04>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	e78e      	b.n	8008016 <_strtod_l+0x99e>
 80080f8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008278 <_strtod_l+0xc00>
 80080fc:	f04f 0800 	mov.w	r8, #0
 8008100:	e7e7      	b.n	80080d2 <_strtod_l+0xa5a>
 8008102:	4b5d      	ldr	r3, [pc, #372]	; (8008278 <_strtod_l+0xc00>)
 8008104:	4640      	mov	r0, r8
 8008106:	4649      	mov	r1, r9
 8008108:	2200      	movs	r2, #0
 800810a:	f7f8 fa7d 	bl	8000608 <__aeabi_dmul>
 800810e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008110:	4680      	mov	r8, r0
 8008112:	4689      	mov	r9, r1
 8008114:	b933      	cbnz	r3, 8008124 <_strtod_l+0xaac>
 8008116:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800811a:	900e      	str	r0, [sp, #56]	; 0x38
 800811c:	930f      	str	r3, [sp, #60]	; 0x3c
 800811e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008122:	e7dd      	b.n	80080e0 <_strtod_l+0xa68>
 8008124:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008128:	e7f9      	b.n	800811e <_strtod_l+0xaa6>
 800812a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800812e:	9b04      	ldr	r3, [sp, #16]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1a8      	bne.n	8008086 <_strtod_l+0xa0e>
 8008134:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008138:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800813a:	0d1b      	lsrs	r3, r3, #20
 800813c:	051b      	lsls	r3, r3, #20
 800813e:	429a      	cmp	r2, r3
 8008140:	d1a1      	bne.n	8008086 <_strtod_l+0xa0e>
 8008142:	4640      	mov	r0, r8
 8008144:	4649      	mov	r1, r9
 8008146:	f7f8 fdbf 	bl	8000cc8 <__aeabi_d2lz>
 800814a:	f7f8 fa2f 	bl	80005ac <__aeabi_l2d>
 800814e:	4602      	mov	r2, r0
 8008150:	460b      	mov	r3, r1
 8008152:	4640      	mov	r0, r8
 8008154:	4649      	mov	r1, r9
 8008156:	f7f8 f89f 	bl	8000298 <__aeabi_dsub>
 800815a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800815c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008160:	ea43 030a 	orr.w	r3, r3, sl
 8008164:	4313      	orrs	r3, r2
 8008166:	4680      	mov	r8, r0
 8008168:	4689      	mov	r9, r1
 800816a:	d055      	beq.n	8008218 <_strtod_l+0xba0>
 800816c:	a336      	add	r3, pc, #216	; (adr r3, 8008248 <_strtod_l+0xbd0>)
 800816e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008172:	f7f8 fcbb 	bl	8000aec <__aeabi_dcmplt>
 8008176:	2800      	cmp	r0, #0
 8008178:	f47f acd0 	bne.w	8007b1c <_strtod_l+0x4a4>
 800817c:	a334      	add	r3, pc, #208	; (adr r3, 8008250 <_strtod_l+0xbd8>)
 800817e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008182:	4640      	mov	r0, r8
 8008184:	4649      	mov	r1, r9
 8008186:	f7f8 fccf 	bl	8000b28 <__aeabi_dcmpgt>
 800818a:	2800      	cmp	r0, #0
 800818c:	f43f af7b 	beq.w	8008086 <_strtod_l+0xa0e>
 8008190:	e4c4      	b.n	8007b1c <_strtod_l+0x4a4>
 8008192:	9b04      	ldr	r3, [sp, #16]
 8008194:	b333      	cbz	r3, 80081e4 <_strtod_l+0xb6c>
 8008196:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008198:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800819c:	d822      	bhi.n	80081e4 <_strtod_l+0xb6c>
 800819e:	a32e      	add	r3, pc, #184	; (adr r3, 8008258 <_strtod_l+0xbe0>)
 80081a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a4:	4640      	mov	r0, r8
 80081a6:	4649      	mov	r1, r9
 80081a8:	f7f8 fcaa 	bl	8000b00 <__aeabi_dcmple>
 80081ac:	b1a0      	cbz	r0, 80081d8 <_strtod_l+0xb60>
 80081ae:	4649      	mov	r1, r9
 80081b0:	4640      	mov	r0, r8
 80081b2:	f7f8 fd01 	bl	8000bb8 <__aeabi_d2uiz>
 80081b6:	2801      	cmp	r0, #1
 80081b8:	bf38      	it	cc
 80081ba:	2001      	movcc	r0, #1
 80081bc:	f7f8 f9aa 	bl	8000514 <__aeabi_ui2d>
 80081c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081c2:	4680      	mov	r8, r0
 80081c4:	4689      	mov	r9, r1
 80081c6:	bb23      	cbnz	r3, 8008212 <_strtod_l+0xb9a>
 80081c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80081cc:	9010      	str	r0, [sp, #64]	; 0x40
 80081ce:	9311      	str	r3, [sp, #68]	; 0x44
 80081d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80081d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80081d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081dc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80081e0:	1a9b      	subs	r3, r3, r2
 80081e2:	9309      	str	r3, [sp, #36]	; 0x24
 80081e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80081e8:	eeb0 0a48 	vmov.f32	s0, s16
 80081ec:	eef0 0a68 	vmov.f32	s1, s17
 80081f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80081f4:	f002 f928 	bl	800a448 <__ulp>
 80081f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80081fc:	ec53 2b10 	vmov	r2, r3, d0
 8008200:	f7f8 fa02 	bl	8000608 <__aeabi_dmul>
 8008204:	ec53 2b18 	vmov	r2, r3, d8
 8008208:	f7f8 f848 	bl	800029c <__adddf3>
 800820c:	4682      	mov	sl, r0
 800820e:	468b      	mov	fp, r1
 8008210:	e78d      	b.n	800812e <_strtod_l+0xab6>
 8008212:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008216:	e7db      	b.n	80081d0 <_strtod_l+0xb58>
 8008218:	a311      	add	r3, pc, #68	; (adr r3, 8008260 <_strtod_l+0xbe8>)
 800821a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821e:	f7f8 fc65 	bl	8000aec <__aeabi_dcmplt>
 8008222:	e7b2      	b.n	800818a <_strtod_l+0xb12>
 8008224:	2300      	movs	r3, #0
 8008226:	930a      	str	r3, [sp, #40]	; 0x28
 8008228:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800822a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800822c:	6013      	str	r3, [r2, #0]
 800822e:	f7ff ba6b 	b.w	8007708 <_strtod_l+0x90>
 8008232:	2a65      	cmp	r2, #101	; 0x65
 8008234:	f43f ab5f 	beq.w	80078f6 <_strtod_l+0x27e>
 8008238:	2a45      	cmp	r2, #69	; 0x45
 800823a:	f43f ab5c 	beq.w	80078f6 <_strtod_l+0x27e>
 800823e:	2301      	movs	r3, #1
 8008240:	f7ff bb94 	b.w	800796c <_strtod_l+0x2f4>
 8008244:	f3af 8000 	nop.w
 8008248:	94a03595 	.word	0x94a03595
 800824c:	3fdfffff 	.word	0x3fdfffff
 8008250:	35afe535 	.word	0x35afe535
 8008254:	3fe00000 	.word	0x3fe00000
 8008258:	ffc00000 	.word	0xffc00000
 800825c:	41dfffff 	.word	0x41dfffff
 8008260:	94a03595 	.word	0x94a03595
 8008264:	3fcfffff 	.word	0x3fcfffff
 8008268:	3ff00000 	.word	0x3ff00000
 800826c:	7ff00000 	.word	0x7ff00000
 8008270:	7fe00000 	.word	0x7fe00000
 8008274:	7c9fffff 	.word	0x7c9fffff
 8008278:	3fe00000 	.word	0x3fe00000
 800827c:	bff00000 	.word	0xbff00000
 8008280:	7fefffff 	.word	0x7fefffff

08008284 <_strtod_r>:
 8008284:	4b01      	ldr	r3, [pc, #4]	; (800828c <_strtod_r+0x8>)
 8008286:	f7ff b9f7 	b.w	8007678 <_strtod_l>
 800828a:	bf00      	nop
 800828c:	200000a8 	.word	0x200000a8

08008290 <_strtol_l.constprop.0>:
 8008290:	2b01      	cmp	r3, #1
 8008292:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008296:	d001      	beq.n	800829c <_strtol_l.constprop.0+0xc>
 8008298:	2b24      	cmp	r3, #36	; 0x24
 800829a:	d906      	bls.n	80082aa <_strtol_l.constprop.0+0x1a>
 800829c:	f7fe fa62 	bl	8006764 <__errno>
 80082a0:	2316      	movs	r3, #22
 80082a2:	6003      	str	r3, [r0, #0]
 80082a4:	2000      	movs	r0, #0
 80082a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008390 <_strtol_l.constprop.0+0x100>
 80082ae:	460d      	mov	r5, r1
 80082b0:	462e      	mov	r6, r5
 80082b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80082b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80082ba:	f017 0708 	ands.w	r7, r7, #8
 80082be:	d1f7      	bne.n	80082b0 <_strtol_l.constprop.0+0x20>
 80082c0:	2c2d      	cmp	r4, #45	; 0x2d
 80082c2:	d132      	bne.n	800832a <_strtol_l.constprop.0+0x9a>
 80082c4:	782c      	ldrb	r4, [r5, #0]
 80082c6:	2701      	movs	r7, #1
 80082c8:	1cb5      	adds	r5, r6, #2
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d05b      	beq.n	8008386 <_strtol_l.constprop.0+0xf6>
 80082ce:	2b10      	cmp	r3, #16
 80082d0:	d109      	bne.n	80082e6 <_strtol_l.constprop.0+0x56>
 80082d2:	2c30      	cmp	r4, #48	; 0x30
 80082d4:	d107      	bne.n	80082e6 <_strtol_l.constprop.0+0x56>
 80082d6:	782c      	ldrb	r4, [r5, #0]
 80082d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80082dc:	2c58      	cmp	r4, #88	; 0x58
 80082de:	d14d      	bne.n	800837c <_strtol_l.constprop.0+0xec>
 80082e0:	786c      	ldrb	r4, [r5, #1]
 80082e2:	2310      	movs	r3, #16
 80082e4:	3502      	adds	r5, #2
 80082e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80082ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80082ee:	f04f 0c00 	mov.w	ip, #0
 80082f2:	fbb8 f9f3 	udiv	r9, r8, r3
 80082f6:	4666      	mov	r6, ip
 80082f8:	fb03 8a19 	mls	sl, r3, r9, r8
 80082fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008300:	f1be 0f09 	cmp.w	lr, #9
 8008304:	d816      	bhi.n	8008334 <_strtol_l.constprop.0+0xa4>
 8008306:	4674      	mov	r4, lr
 8008308:	42a3      	cmp	r3, r4
 800830a:	dd24      	ble.n	8008356 <_strtol_l.constprop.0+0xc6>
 800830c:	f1bc 0f00 	cmp.w	ip, #0
 8008310:	db1e      	blt.n	8008350 <_strtol_l.constprop.0+0xc0>
 8008312:	45b1      	cmp	r9, r6
 8008314:	d31c      	bcc.n	8008350 <_strtol_l.constprop.0+0xc0>
 8008316:	d101      	bne.n	800831c <_strtol_l.constprop.0+0x8c>
 8008318:	45a2      	cmp	sl, r4
 800831a:	db19      	blt.n	8008350 <_strtol_l.constprop.0+0xc0>
 800831c:	fb06 4603 	mla	r6, r6, r3, r4
 8008320:	f04f 0c01 	mov.w	ip, #1
 8008324:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008328:	e7e8      	b.n	80082fc <_strtol_l.constprop.0+0x6c>
 800832a:	2c2b      	cmp	r4, #43	; 0x2b
 800832c:	bf04      	itt	eq
 800832e:	782c      	ldrbeq	r4, [r5, #0]
 8008330:	1cb5      	addeq	r5, r6, #2
 8008332:	e7ca      	b.n	80082ca <_strtol_l.constprop.0+0x3a>
 8008334:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008338:	f1be 0f19 	cmp.w	lr, #25
 800833c:	d801      	bhi.n	8008342 <_strtol_l.constprop.0+0xb2>
 800833e:	3c37      	subs	r4, #55	; 0x37
 8008340:	e7e2      	b.n	8008308 <_strtol_l.constprop.0+0x78>
 8008342:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008346:	f1be 0f19 	cmp.w	lr, #25
 800834a:	d804      	bhi.n	8008356 <_strtol_l.constprop.0+0xc6>
 800834c:	3c57      	subs	r4, #87	; 0x57
 800834e:	e7db      	b.n	8008308 <_strtol_l.constprop.0+0x78>
 8008350:	f04f 3cff 	mov.w	ip, #4294967295
 8008354:	e7e6      	b.n	8008324 <_strtol_l.constprop.0+0x94>
 8008356:	f1bc 0f00 	cmp.w	ip, #0
 800835a:	da05      	bge.n	8008368 <_strtol_l.constprop.0+0xd8>
 800835c:	2322      	movs	r3, #34	; 0x22
 800835e:	6003      	str	r3, [r0, #0]
 8008360:	4646      	mov	r6, r8
 8008362:	b942      	cbnz	r2, 8008376 <_strtol_l.constprop.0+0xe6>
 8008364:	4630      	mov	r0, r6
 8008366:	e79e      	b.n	80082a6 <_strtol_l.constprop.0+0x16>
 8008368:	b107      	cbz	r7, 800836c <_strtol_l.constprop.0+0xdc>
 800836a:	4276      	negs	r6, r6
 800836c:	2a00      	cmp	r2, #0
 800836e:	d0f9      	beq.n	8008364 <_strtol_l.constprop.0+0xd4>
 8008370:	f1bc 0f00 	cmp.w	ip, #0
 8008374:	d000      	beq.n	8008378 <_strtol_l.constprop.0+0xe8>
 8008376:	1e69      	subs	r1, r5, #1
 8008378:	6011      	str	r1, [r2, #0]
 800837a:	e7f3      	b.n	8008364 <_strtol_l.constprop.0+0xd4>
 800837c:	2430      	movs	r4, #48	; 0x30
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1b1      	bne.n	80082e6 <_strtol_l.constprop.0+0x56>
 8008382:	2308      	movs	r3, #8
 8008384:	e7af      	b.n	80082e6 <_strtol_l.constprop.0+0x56>
 8008386:	2c30      	cmp	r4, #48	; 0x30
 8008388:	d0a5      	beq.n	80082d6 <_strtol_l.constprop.0+0x46>
 800838a:	230a      	movs	r3, #10
 800838c:	e7ab      	b.n	80082e6 <_strtol_l.constprop.0+0x56>
 800838e:	bf00      	nop
 8008390:	0800b561 	.word	0x0800b561

08008394 <_strtol_r>:
 8008394:	f7ff bf7c 	b.w	8008290 <_strtol_l.constprop.0>

08008398 <__swbuf_r>:
 8008398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800839a:	460e      	mov	r6, r1
 800839c:	4614      	mov	r4, r2
 800839e:	4605      	mov	r5, r0
 80083a0:	b118      	cbz	r0, 80083aa <__swbuf_r+0x12>
 80083a2:	6983      	ldr	r3, [r0, #24]
 80083a4:	b90b      	cbnz	r3, 80083aa <__swbuf_r+0x12>
 80083a6:	f001 f84b 	bl	8009440 <__sinit>
 80083aa:	4b21      	ldr	r3, [pc, #132]	; (8008430 <__swbuf_r+0x98>)
 80083ac:	429c      	cmp	r4, r3
 80083ae:	d12b      	bne.n	8008408 <__swbuf_r+0x70>
 80083b0:	686c      	ldr	r4, [r5, #4]
 80083b2:	69a3      	ldr	r3, [r4, #24]
 80083b4:	60a3      	str	r3, [r4, #8]
 80083b6:	89a3      	ldrh	r3, [r4, #12]
 80083b8:	071a      	lsls	r2, r3, #28
 80083ba:	d52f      	bpl.n	800841c <__swbuf_r+0x84>
 80083bc:	6923      	ldr	r3, [r4, #16]
 80083be:	b36b      	cbz	r3, 800841c <__swbuf_r+0x84>
 80083c0:	6923      	ldr	r3, [r4, #16]
 80083c2:	6820      	ldr	r0, [r4, #0]
 80083c4:	1ac0      	subs	r0, r0, r3
 80083c6:	6963      	ldr	r3, [r4, #20]
 80083c8:	b2f6      	uxtb	r6, r6
 80083ca:	4283      	cmp	r3, r0
 80083cc:	4637      	mov	r7, r6
 80083ce:	dc04      	bgt.n	80083da <__swbuf_r+0x42>
 80083d0:	4621      	mov	r1, r4
 80083d2:	4628      	mov	r0, r5
 80083d4:	f000 ffa0 	bl	8009318 <_fflush_r>
 80083d8:	bb30      	cbnz	r0, 8008428 <__swbuf_r+0x90>
 80083da:	68a3      	ldr	r3, [r4, #8]
 80083dc:	3b01      	subs	r3, #1
 80083de:	60a3      	str	r3, [r4, #8]
 80083e0:	6823      	ldr	r3, [r4, #0]
 80083e2:	1c5a      	adds	r2, r3, #1
 80083e4:	6022      	str	r2, [r4, #0]
 80083e6:	701e      	strb	r6, [r3, #0]
 80083e8:	6963      	ldr	r3, [r4, #20]
 80083ea:	3001      	adds	r0, #1
 80083ec:	4283      	cmp	r3, r0
 80083ee:	d004      	beq.n	80083fa <__swbuf_r+0x62>
 80083f0:	89a3      	ldrh	r3, [r4, #12]
 80083f2:	07db      	lsls	r3, r3, #31
 80083f4:	d506      	bpl.n	8008404 <__swbuf_r+0x6c>
 80083f6:	2e0a      	cmp	r6, #10
 80083f8:	d104      	bne.n	8008404 <__swbuf_r+0x6c>
 80083fa:	4621      	mov	r1, r4
 80083fc:	4628      	mov	r0, r5
 80083fe:	f000 ff8b 	bl	8009318 <_fflush_r>
 8008402:	b988      	cbnz	r0, 8008428 <__swbuf_r+0x90>
 8008404:	4638      	mov	r0, r7
 8008406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008408:	4b0a      	ldr	r3, [pc, #40]	; (8008434 <__swbuf_r+0x9c>)
 800840a:	429c      	cmp	r4, r3
 800840c:	d101      	bne.n	8008412 <__swbuf_r+0x7a>
 800840e:	68ac      	ldr	r4, [r5, #8]
 8008410:	e7cf      	b.n	80083b2 <__swbuf_r+0x1a>
 8008412:	4b09      	ldr	r3, [pc, #36]	; (8008438 <__swbuf_r+0xa0>)
 8008414:	429c      	cmp	r4, r3
 8008416:	bf08      	it	eq
 8008418:	68ec      	ldreq	r4, [r5, #12]
 800841a:	e7ca      	b.n	80083b2 <__swbuf_r+0x1a>
 800841c:	4621      	mov	r1, r4
 800841e:	4628      	mov	r0, r5
 8008420:	f000 f80c 	bl	800843c <__swsetup_r>
 8008424:	2800      	cmp	r0, #0
 8008426:	d0cb      	beq.n	80083c0 <__swbuf_r+0x28>
 8008428:	f04f 37ff 	mov.w	r7, #4294967295
 800842c:	e7ea      	b.n	8008404 <__swbuf_r+0x6c>
 800842e:	bf00      	nop
 8008430:	0800b714 	.word	0x0800b714
 8008434:	0800b734 	.word	0x0800b734
 8008438:	0800b6f4 	.word	0x0800b6f4

0800843c <__swsetup_r>:
 800843c:	4b32      	ldr	r3, [pc, #200]	; (8008508 <__swsetup_r+0xcc>)
 800843e:	b570      	push	{r4, r5, r6, lr}
 8008440:	681d      	ldr	r5, [r3, #0]
 8008442:	4606      	mov	r6, r0
 8008444:	460c      	mov	r4, r1
 8008446:	b125      	cbz	r5, 8008452 <__swsetup_r+0x16>
 8008448:	69ab      	ldr	r3, [r5, #24]
 800844a:	b913      	cbnz	r3, 8008452 <__swsetup_r+0x16>
 800844c:	4628      	mov	r0, r5
 800844e:	f000 fff7 	bl	8009440 <__sinit>
 8008452:	4b2e      	ldr	r3, [pc, #184]	; (800850c <__swsetup_r+0xd0>)
 8008454:	429c      	cmp	r4, r3
 8008456:	d10f      	bne.n	8008478 <__swsetup_r+0x3c>
 8008458:	686c      	ldr	r4, [r5, #4]
 800845a:	89a3      	ldrh	r3, [r4, #12]
 800845c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008460:	0719      	lsls	r1, r3, #28
 8008462:	d42c      	bmi.n	80084be <__swsetup_r+0x82>
 8008464:	06dd      	lsls	r5, r3, #27
 8008466:	d411      	bmi.n	800848c <__swsetup_r+0x50>
 8008468:	2309      	movs	r3, #9
 800846a:	6033      	str	r3, [r6, #0]
 800846c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008470:	81a3      	strh	r3, [r4, #12]
 8008472:	f04f 30ff 	mov.w	r0, #4294967295
 8008476:	e03e      	b.n	80084f6 <__swsetup_r+0xba>
 8008478:	4b25      	ldr	r3, [pc, #148]	; (8008510 <__swsetup_r+0xd4>)
 800847a:	429c      	cmp	r4, r3
 800847c:	d101      	bne.n	8008482 <__swsetup_r+0x46>
 800847e:	68ac      	ldr	r4, [r5, #8]
 8008480:	e7eb      	b.n	800845a <__swsetup_r+0x1e>
 8008482:	4b24      	ldr	r3, [pc, #144]	; (8008514 <__swsetup_r+0xd8>)
 8008484:	429c      	cmp	r4, r3
 8008486:	bf08      	it	eq
 8008488:	68ec      	ldreq	r4, [r5, #12]
 800848a:	e7e6      	b.n	800845a <__swsetup_r+0x1e>
 800848c:	0758      	lsls	r0, r3, #29
 800848e:	d512      	bpl.n	80084b6 <__swsetup_r+0x7a>
 8008490:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008492:	b141      	cbz	r1, 80084a6 <__swsetup_r+0x6a>
 8008494:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008498:	4299      	cmp	r1, r3
 800849a:	d002      	beq.n	80084a2 <__swsetup_r+0x66>
 800849c:	4630      	mov	r0, r6
 800849e:	f002 f939 	bl	800a714 <_free_r>
 80084a2:	2300      	movs	r3, #0
 80084a4:	6363      	str	r3, [r4, #52]	; 0x34
 80084a6:	89a3      	ldrh	r3, [r4, #12]
 80084a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80084ac:	81a3      	strh	r3, [r4, #12]
 80084ae:	2300      	movs	r3, #0
 80084b0:	6063      	str	r3, [r4, #4]
 80084b2:	6923      	ldr	r3, [r4, #16]
 80084b4:	6023      	str	r3, [r4, #0]
 80084b6:	89a3      	ldrh	r3, [r4, #12]
 80084b8:	f043 0308 	orr.w	r3, r3, #8
 80084bc:	81a3      	strh	r3, [r4, #12]
 80084be:	6923      	ldr	r3, [r4, #16]
 80084c0:	b94b      	cbnz	r3, 80084d6 <__swsetup_r+0x9a>
 80084c2:	89a3      	ldrh	r3, [r4, #12]
 80084c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80084c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084cc:	d003      	beq.n	80084d6 <__swsetup_r+0x9a>
 80084ce:	4621      	mov	r1, r4
 80084d0:	4630      	mov	r0, r6
 80084d2:	f001 fbed 	bl	8009cb0 <__smakebuf_r>
 80084d6:	89a0      	ldrh	r0, [r4, #12]
 80084d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084dc:	f010 0301 	ands.w	r3, r0, #1
 80084e0:	d00a      	beq.n	80084f8 <__swsetup_r+0xbc>
 80084e2:	2300      	movs	r3, #0
 80084e4:	60a3      	str	r3, [r4, #8]
 80084e6:	6963      	ldr	r3, [r4, #20]
 80084e8:	425b      	negs	r3, r3
 80084ea:	61a3      	str	r3, [r4, #24]
 80084ec:	6923      	ldr	r3, [r4, #16]
 80084ee:	b943      	cbnz	r3, 8008502 <__swsetup_r+0xc6>
 80084f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80084f4:	d1ba      	bne.n	800846c <__swsetup_r+0x30>
 80084f6:	bd70      	pop	{r4, r5, r6, pc}
 80084f8:	0781      	lsls	r1, r0, #30
 80084fa:	bf58      	it	pl
 80084fc:	6963      	ldrpl	r3, [r4, #20]
 80084fe:	60a3      	str	r3, [r4, #8]
 8008500:	e7f4      	b.n	80084ec <__swsetup_r+0xb0>
 8008502:	2000      	movs	r0, #0
 8008504:	e7f7      	b.n	80084f6 <__swsetup_r+0xba>
 8008506:	bf00      	nop
 8008508:	20000040 	.word	0x20000040
 800850c:	0800b714 	.word	0x0800b714
 8008510:	0800b734 	.word	0x0800b734
 8008514:	0800b6f4 	.word	0x0800b6f4

08008518 <quorem>:
 8008518:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800851c:	6903      	ldr	r3, [r0, #16]
 800851e:	690c      	ldr	r4, [r1, #16]
 8008520:	42a3      	cmp	r3, r4
 8008522:	4607      	mov	r7, r0
 8008524:	f2c0 8081 	blt.w	800862a <quorem+0x112>
 8008528:	3c01      	subs	r4, #1
 800852a:	f101 0814 	add.w	r8, r1, #20
 800852e:	f100 0514 	add.w	r5, r0, #20
 8008532:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008536:	9301      	str	r3, [sp, #4]
 8008538:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800853c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008540:	3301      	adds	r3, #1
 8008542:	429a      	cmp	r2, r3
 8008544:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008548:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800854c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008550:	d331      	bcc.n	80085b6 <quorem+0x9e>
 8008552:	f04f 0e00 	mov.w	lr, #0
 8008556:	4640      	mov	r0, r8
 8008558:	46ac      	mov	ip, r5
 800855a:	46f2      	mov	sl, lr
 800855c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008560:	b293      	uxth	r3, r2
 8008562:	fb06 e303 	mla	r3, r6, r3, lr
 8008566:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800856a:	b29b      	uxth	r3, r3
 800856c:	ebaa 0303 	sub.w	r3, sl, r3
 8008570:	f8dc a000 	ldr.w	sl, [ip]
 8008574:	0c12      	lsrs	r2, r2, #16
 8008576:	fa13 f38a 	uxtah	r3, r3, sl
 800857a:	fb06 e202 	mla	r2, r6, r2, lr
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	9b00      	ldr	r3, [sp, #0]
 8008582:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008586:	b292      	uxth	r2, r2
 8008588:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800858c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008590:	f8bd 3000 	ldrh.w	r3, [sp]
 8008594:	4581      	cmp	r9, r0
 8008596:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800859a:	f84c 3b04 	str.w	r3, [ip], #4
 800859e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80085a2:	d2db      	bcs.n	800855c <quorem+0x44>
 80085a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80085a8:	b92b      	cbnz	r3, 80085b6 <quorem+0x9e>
 80085aa:	9b01      	ldr	r3, [sp, #4]
 80085ac:	3b04      	subs	r3, #4
 80085ae:	429d      	cmp	r5, r3
 80085b0:	461a      	mov	r2, r3
 80085b2:	d32e      	bcc.n	8008612 <quorem+0xfa>
 80085b4:	613c      	str	r4, [r7, #16]
 80085b6:	4638      	mov	r0, r7
 80085b8:	f001 fea0 	bl	800a2fc <__mcmp>
 80085bc:	2800      	cmp	r0, #0
 80085be:	db24      	blt.n	800860a <quorem+0xf2>
 80085c0:	3601      	adds	r6, #1
 80085c2:	4628      	mov	r0, r5
 80085c4:	f04f 0c00 	mov.w	ip, #0
 80085c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80085cc:	f8d0 e000 	ldr.w	lr, [r0]
 80085d0:	b293      	uxth	r3, r2
 80085d2:	ebac 0303 	sub.w	r3, ip, r3
 80085d6:	0c12      	lsrs	r2, r2, #16
 80085d8:	fa13 f38e 	uxtah	r3, r3, lr
 80085dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80085e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085ea:	45c1      	cmp	r9, r8
 80085ec:	f840 3b04 	str.w	r3, [r0], #4
 80085f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80085f4:	d2e8      	bcs.n	80085c8 <quorem+0xb0>
 80085f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085fe:	b922      	cbnz	r2, 800860a <quorem+0xf2>
 8008600:	3b04      	subs	r3, #4
 8008602:	429d      	cmp	r5, r3
 8008604:	461a      	mov	r2, r3
 8008606:	d30a      	bcc.n	800861e <quorem+0x106>
 8008608:	613c      	str	r4, [r7, #16]
 800860a:	4630      	mov	r0, r6
 800860c:	b003      	add	sp, #12
 800860e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008612:	6812      	ldr	r2, [r2, #0]
 8008614:	3b04      	subs	r3, #4
 8008616:	2a00      	cmp	r2, #0
 8008618:	d1cc      	bne.n	80085b4 <quorem+0x9c>
 800861a:	3c01      	subs	r4, #1
 800861c:	e7c7      	b.n	80085ae <quorem+0x96>
 800861e:	6812      	ldr	r2, [r2, #0]
 8008620:	3b04      	subs	r3, #4
 8008622:	2a00      	cmp	r2, #0
 8008624:	d1f0      	bne.n	8008608 <quorem+0xf0>
 8008626:	3c01      	subs	r4, #1
 8008628:	e7eb      	b.n	8008602 <quorem+0xea>
 800862a:	2000      	movs	r0, #0
 800862c:	e7ee      	b.n	800860c <quorem+0xf4>
	...

08008630 <_dtoa_r>:
 8008630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008634:	ed2d 8b04 	vpush	{d8-d9}
 8008638:	ec57 6b10 	vmov	r6, r7, d0
 800863c:	b093      	sub	sp, #76	; 0x4c
 800863e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008640:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008644:	9106      	str	r1, [sp, #24]
 8008646:	ee10 aa10 	vmov	sl, s0
 800864a:	4604      	mov	r4, r0
 800864c:	9209      	str	r2, [sp, #36]	; 0x24
 800864e:	930c      	str	r3, [sp, #48]	; 0x30
 8008650:	46bb      	mov	fp, r7
 8008652:	b975      	cbnz	r5, 8008672 <_dtoa_r+0x42>
 8008654:	2010      	movs	r0, #16
 8008656:	f001 fb6b 	bl	8009d30 <malloc>
 800865a:	4602      	mov	r2, r0
 800865c:	6260      	str	r0, [r4, #36]	; 0x24
 800865e:	b920      	cbnz	r0, 800866a <_dtoa_r+0x3a>
 8008660:	4ba7      	ldr	r3, [pc, #668]	; (8008900 <_dtoa_r+0x2d0>)
 8008662:	21ea      	movs	r1, #234	; 0xea
 8008664:	48a7      	ldr	r0, [pc, #668]	; (8008904 <_dtoa_r+0x2d4>)
 8008666:	f002 fc79 	bl	800af5c <__assert_func>
 800866a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800866e:	6005      	str	r5, [r0, #0]
 8008670:	60c5      	str	r5, [r0, #12]
 8008672:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008674:	6819      	ldr	r1, [r3, #0]
 8008676:	b151      	cbz	r1, 800868e <_dtoa_r+0x5e>
 8008678:	685a      	ldr	r2, [r3, #4]
 800867a:	604a      	str	r2, [r1, #4]
 800867c:	2301      	movs	r3, #1
 800867e:	4093      	lsls	r3, r2
 8008680:	608b      	str	r3, [r1, #8]
 8008682:	4620      	mov	r0, r4
 8008684:	f001 fbae 	bl	8009de4 <_Bfree>
 8008688:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800868a:	2200      	movs	r2, #0
 800868c:	601a      	str	r2, [r3, #0]
 800868e:	1e3b      	subs	r3, r7, #0
 8008690:	bfaa      	itet	ge
 8008692:	2300      	movge	r3, #0
 8008694:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008698:	f8c8 3000 	strge.w	r3, [r8]
 800869c:	4b9a      	ldr	r3, [pc, #616]	; (8008908 <_dtoa_r+0x2d8>)
 800869e:	bfbc      	itt	lt
 80086a0:	2201      	movlt	r2, #1
 80086a2:	f8c8 2000 	strlt.w	r2, [r8]
 80086a6:	ea33 030b 	bics.w	r3, r3, fp
 80086aa:	d11b      	bne.n	80086e4 <_dtoa_r+0xb4>
 80086ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80086b2:	6013      	str	r3, [r2, #0]
 80086b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80086b8:	4333      	orrs	r3, r6
 80086ba:	f000 8592 	beq.w	80091e2 <_dtoa_r+0xbb2>
 80086be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086c0:	b963      	cbnz	r3, 80086dc <_dtoa_r+0xac>
 80086c2:	4b92      	ldr	r3, [pc, #584]	; (800890c <_dtoa_r+0x2dc>)
 80086c4:	e022      	b.n	800870c <_dtoa_r+0xdc>
 80086c6:	4b92      	ldr	r3, [pc, #584]	; (8008910 <_dtoa_r+0x2e0>)
 80086c8:	9301      	str	r3, [sp, #4]
 80086ca:	3308      	adds	r3, #8
 80086cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80086ce:	6013      	str	r3, [r2, #0]
 80086d0:	9801      	ldr	r0, [sp, #4]
 80086d2:	b013      	add	sp, #76	; 0x4c
 80086d4:	ecbd 8b04 	vpop	{d8-d9}
 80086d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086dc:	4b8b      	ldr	r3, [pc, #556]	; (800890c <_dtoa_r+0x2dc>)
 80086de:	9301      	str	r3, [sp, #4]
 80086e0:	3303      	adds	r3, #3
 80086e2:	e7f3      	b.n	80086cc <_dtoa_r+0x9c>
 80086e4:	2200      	movs	r2, #0
 80086e6:	2300      	movs	r3, #0
 80086e8:	4650      	mov	r0, sl
 80086ea:	4659      	mov	r1, fp
 80086ec:	f7f8 f9f4 	bl	8000ad8 <__aeabi_dcmpeq>
 80086f0:	ec4b ab19 	vmov	d9, sl, fp
 80086f4:	4680      	mov	r8, r0
 80086f6:	b158      	cbz	r0, 8008710 <_dtoa_r+0xe0>
 80086f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086fa:	2301      	movs	r3, #1
 80086fc:	6013      	str	r3, [r2, #0]
 80086fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008700:	2b00      	cmp	r3, #0
 8008702:	f000 856b 	beq.w	80091dc <_dtoa_r+0xbac>
 8008706:	4883      	ldr	r0, [pc, #524]	; (8008914 <_dtoa_r+0x2e4>)
 8008708:	6018      	str	r0, [r3, #0]
 800870a:	1e43      	subs	r3, r0, #1
 800870c:	9301      	str	r3, [sp, #4]
 800870e:	e7df      	b.n	80086d0 <_dtoa_r+0xa0>
 8008710:	ec4b ab10 	vmov	d0, sl, fp
 8008714:	aa10      	add	r2, sp, #64	; 0x40
 8008716:	a911      	add	r1, sp, #68	; 0x44
 8008718:	4620      	mov	r0, r4
 800871a:	f001 ff11 	bl	800a540 <__d2b>
 800871e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008722:	ee08 0a10 	vmov	s16, r0
 8008726:	2d00      	cmp	r5, #0
 8008728:	f000 8084 	beq.w	8008834 <_dtoa_r+0x204>
 800872c:	ee19 3a90 	vmov	r3, s19
 8008730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008734:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008738:	4656      	mov	r6, sl
 800873a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800873e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008742:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008746:	4b74      	ldr	r3, [pc, #464]	; (8008918 <_dtoa_r+0x2e8>)
 8008748:	2200      	movs	r2, #0
 800874a:	4630      	mov	r0, r6
 800874c:	4639      	mov	r1, r7
 800874e:	f7f7 fda3 	bl	8000298 <__aeabi_dsub>
 8008752:	a365      	add	r3, pc, #404	; (adr r3, 80088e8 <_dtoa_r+0x2b8>)
 8008754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008758:	f7f7 ff56 	bl	8000608 <__aeabi_dmul>
 800875c:	a364      	add	r3, pc, #400	; (adr r3, 80088f0 <_dtoa_r+0x2c0>)
 800875e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008762:	f7f7 fd9b 	bl	800029c <__adddf3>
 8008766:	4606      	mov	r6, r0
 8008768:	4628      	mov	r0, r5
 800876a:	460f      	mov	r7, r1
 800876c:	f7f7 fee2 	bl	8000534 <__aeabi_i2d>
 8008770:	a361      	add	r3, pc, #388	; (adr r3, 80088f8 <_dtoa_r+0x2c8>)
 8008772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008776:	f7f7 ff47 	bl	8000608 <__aeabi_dmul>
 800877a:	4602      	mov	r2, r0
 800877c:	460b      	mov	r3, r1
 800877e:	4630      	mov	r0, r6
 8008780:	4639      	mov	r1, r7
 8008782:	f7f7 fd8b 	bl	800029c <__adddf3>
 8008786:	4606      	mov	r6, r0
 8008788:	460f      	mov	r7, r1
 800878a:	f7f8 f9ed 	bl	8000b68 <__aeabi_d2iz>
 800878e:	2200      	movs	r2, #0
 8008790:	9000      	str	r0, [sp, #0]
 8008792:	2300      	movs	r3, #0
 8008794:	4630      	mov	r0, r6
 8008796:	4639      	mov	r1, r7
 8008798:	f7f8 f9a8 	bl	8000aec <__aeabi_dcmplt>
 800879c:	b150      	cbz	r0, 80087b4 <_dtoa_r+0x184>
 800879e:	9800      	ldr	r0, [sp, #0]
 80087a0:	f7f7 fec8 	bl	8000534 <__aeabi_i2d>
 80087a4:	4632      	mov	r2, r6
 80087a6:	463b      	mov	r3, r7
 80087a8:	f7f8 f996 	bl	8000ad8 <__aeabi_dcmpeq>
 80087ac:	b910      	cbnz	r0, 80087b4 <_dtoa_r+0x184>
 80087ae:	9b00      	ldr	r3, [sp, #0]
 80087b0:	3b01      	subs	r3, #1
 80087b2:	9300      	str	r3, [sp, #0]
 80087b4:	9b00      	ldr	r3, [sp, #0]
 80087b6:	2b16      	cmp	r3, #22
 80087b8:	d85a      	bhi.n	8008870 <_dtoa_r+0x240>
 80087ba:	9a00      	ldr	r2, [sp, #0]
 80087bc:	4b57      	ldr	r3, [pc, #348]	; (800891c <_dtoa_r+0x2ec>)
 80087be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c6:	ec51 0b19 	vmov	r0, r1, d9
 80087ca:	f7f8 f98f 	bl	8000aec <__aeabi_dcmplt>
 80087ce:	2800      	cmp	r0, #0
 80087d0:	d050      	beq.n	8008874 <_dtoa_r+0x244>
 80087d2:	9b00      	ldr	r3, [sp, #0]
 80087d4:	3b01      	subs	r3, #1
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	2300      	movs	r3, #0
 80087da:	930b      	str	r3, [sp, #44]	; 0x2c
 80087dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087de:	1b5d      	subs	r5, r3, r5
 80087e0:	1e6b      	subs	r3, r5, #1
 80087e2:	9305      	str	r3, [sp, #20]
 80087e4:	bf45      	ittet	mi
 80087e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80087ea:	9304      	strmi	r3, [sp, #16]
 80087ec:	2300      	movpl	r3, #0
 80087ee:	2300      	movmi	r3, #0
 80087f0:	bf4c      	ite	mi
 80087f2:	9305      	strmi	r3, [sp, #20]
 80087f4:	9304      	strpl	r3, [sp, #16]
 80087f6:	9b00      	ldr	r3, [sp, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	db3d      	blt.n	8008878 <_dtoa_r+0x248>
 80087fc:	9b05      	ldr	r3, [sp, #20]
 80087fe:	9a00      	ldr	r2, [sp, #0]
 8008800:	920a      	str	r2, [sp, #40]	; 0x28
 8008802:	4413      	add	r3, r2
 8008804:	9305      	str	r3, [sp, #20]
 8008806:	2300      	movs	r3, #0
 8008808:	9307      	str	r3, [sp, #28]
 800880a:	9b06      	ldr	r3, [sp, #24]
 800880c:	2b09      	cmp	r3, #9
 800880e:	f200 8089 	bhi.w	8008924 <_dtoa_r+0x2f4>
 8008812:	2b05      	cmp	r3, #5
 8008814:	bfc4      	itt	gt
 8008816:	3b04      	subgt	r3, #4
 8008818:	9306      	strgt	r3, [sp, #24]
 800881a:	9b06      	ldr	r3, [sp, #24]
 800881c:	f1a3 0302 	sub.w	r3, r3, #2
 8008820:	bfcc      	ite	gt
 8008822:	2500      	movgt	r5, #0
 8008824:	2501      	movle	r5, #1
 8008826:	2b03      	cmp	r3, #3
 8008828:	f200 8087 	bhi.w	800893a <_dtoa_r+0x30a>
 800882c:	e8df f003 	tbb	[pc, r3]
 8008830:	59383a2d 	.word	0x59383a2d
 8008834:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008838:	441d      	add	r5, r3
 800883a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800883e:	2b20      	cmp	r3, #32
 8008840:	bfc1      	itttt	gt
 8008842:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008846:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800884a:	fa0b f303 	lslgt.w	r3, fp, r3
 800884e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008852:	bfda      	itte	le
 8008854:	f1c3 0320 	rsble	r3, r3, #32
 8008858:	fa06 f003 	lslle.w	r0, r6, r3
 800885c:	4318      	orrgt	r0, r3
 800885e:	f7f7 fe59 	bl	8000514 <__aeabi_ui2d>
 8008862:	2301      	movs	r3, #1
 8008864:	4606      	mov	r6, r0
 8008866:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800886a:	3d01      	subs	r5, #1
 800886c:	930e      	str	r3, [sp, #56]	; 0x38
 800886e:	e76a      	b.n	8008746 <_dtoa_r+0x116>
 8008870:	2301      	movs	r3, #1
 8008872:	e7b2      	b.n	80087da <_dtoa_r+0x1aa>
 8008874:	900b      	str	r0, [sp, #44]	; 0x2c
 8008876:	e7b1      	b.n	80087dc <_dtoa_r+0x1ac>
 8008878:	9b04      	ldr	r3, [sp, #16]
 800887a:	9a00      	ldr	r2, [sp, #0]
 800887c:	1a9b      	subs	r3, r3, r2
 800887e:	9304      	str	r3, [sp, #16]
 8008880:	4253      	negs	r3, r2
 8008882:	9307      	str	r3, [sp, #28]
 8008884:	2300      	movs	r3, #0
 8008886:	930a      	str	r3, [sp, #40]	; 0x28
 8008888:	e7bf      	b.n	800880a <_dtoa_r+0x1da>
 800888a:	2300      	movs	r3, #0
 800888c:	9308      	str	r3, [sp, #32]
 800888e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008890:	2b00      	cmp	r3, #0
 8008892:	dc55      	bgt.n	8008940 <_dtoa_r+0x310>
 8008894:	2301      	movs	r3, #1
 8008896:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800889a:	461a      	mov	r2, r3
 800889c:	9209      	str	r2, [sp, #36]	; 0x24
 800889e:	e00c      	b.n	80088ba <_dtoa_r+0x28a>
 80088a0:	2301      	movs	r3, #1
 80088a2:	e7f3      	b.n	800888c <_dtoa_r+0x25c>
 80088a4:	2300      	movs	r3, #0
 80088a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088a8:	9308      	str	r3, [sp, #32]
 80088aa:	9b00      	ldr	r3, [sp, #0]
 80088ac:	4413      	add	r3, r2
 80088ae:	9302      	str	r3, [sp, #8]
 80088b0:	3301      	adds	r3, #1
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	9303      	str	r3, [sp, #12]
 80088b6:	bfb8      	it	lt
 80088b8:	2301      	movlt	r3, #1
 80088ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80088bc:	2200      	movs	r2, #0
 80088be:	6042      	str	r2, [r0, #4]
 80088c0:	2204      	movs	r2, #4
 80088c2:	f102 0614 	add.w	r6, r2, #20
 80088c6:	429e      	cmp	r6, r3
 80088c8:	6841      	ldr	r1, [r0, #4]
 80088ca:	d93d      	bls.n	8008948 <_dtoa_r+0x318>
 80088cc:	4620      	mov	r0, r4
 80088ce:	f001 fa49 	bl	8009d64 <_Balloc>
 80088d2:	9001      	str	r0, [sp, #4]
 80088d4:	2800      	cmp	r0, #0
 80088d6:	d13b      	bne.n	8008950 <_dtoa_r+0x320>
 80088d8:	4b11      	ldr	r3, [pc, #68]	; (8008920 <_dtoa_r+0x2f0>)
 80088da:	4602      	mov	r2, r0
 80088dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80088e0:	e6c0      	b.n	8008664 <_dtoa_r+0x34>
 80088e2:	2301      	movs	r3, #1
 80088e4:	e7df      	b.n	80088a6 <_dtoa_r+0x276>
 80088e6:	bf00      	nop
 80088e8:	636f4361 	.word	0x636f4361
 80088ec:	3fd287a7 	.word	0x3fd287a7
 80088f0:	8b60c8b3 	.word	0x8b60c8b3
 80088f4:	3fc68a28 	.word	0x3fc68a28
 80088f8:	509f79fb 	.word	0x509f79fb
 80088fc:	3fd34413 	.word	0x3fd34413
 8008900:	0800b66e 	.word	0x0800b66e
 8008904:	0800b685 	.word	0x0800b685
 8008908:	7ff00000 	.word	0x7ff00000
 800890c:	0800b66a 	.word	0x0800b66a
 8008910:	0800b661 	.word	0x0800b661
 8008914:	0800b4e5 	.word	0x0800b4e5
 8008918:	3ff80000 	.word	0x3ff80000
 800891c:	0800b858 	.word	0x0800b858
 8008920:	0800b6e0 	.word	0x0800b6e0
 8008924:	2501      	movs	r5, #1
 8008926:	2300      	movs	r3, #0
 8008928:	9306      	str	r3, [sp, #24]
 800892a:	9508      	str	r5, [sp, #32]
 800892c:	f04f 33ff 	mov.w	r3, #4294967295
 8008930:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008934:	2200      	movs	r2, #0
 8008936:	2312      	movs	r3, #18
 8008938:	e7b0      	b.n	800889c <_dtoa_r+0x26c>
 800893a:	2301      	movs	r3, #1
 800893c:	9308      	str	r3, [sp, #32]
 800893e:	e7f5      	b.n	800892c <_dtoa_r+0x2fc>
 8008940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008942:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008946:	e7b8      	b.n	80088ba <_dtoa_r+0x28a>
 8008948:	3101      	adds	r1, #1
 800894a:	6041      	str	r1, [r0, #4]
 800894c:	0052      	lsls	r2, r2, #1
 800894e:	e7b8      	b.n	80088c2 <_dtoa_r+0x292>
 8008950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008952:	9a01      	ldr	r2, [sp, #4]
 8008954:	601a      	str	r2, [r3, #0]
 8008956:	9b03      	ldr	r3, [sp, #12]
 8008958:	2b0e      	cmp	r3, #14
 800895a:	f200 809d 	bhi.w	8008a98 <_dtoa_r+0x468>
 800895e:	2d00      	cmp	r5, #0
 8008960:	f000 809a 	beq.w	8008a98 <_dtoa_r+0x468>
 8008964:	9b00      	ldr	r3, [sp, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	dd32      	ble.n	80089d0 <_dtoa_r+0x3a0>
 800896a:	4ab7      	ldr	r2, [pc, #732]	; (8008c48 <_dtoa_r+0x618>)
 800896c:	f003 030f 	and.w	r3, r3, #15
 8008970:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008974:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008978:	9b00      	ldr	r3, [sp, #0]
 800897a:	05d8      	lsls	r0, r3, #23
 800897c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008980:	d516      	bpl.n	80089b0 <_dtoa_r+0x380>
 8008982:	4bb2      	ldr	r3, [pc, #712]	; (8008c4c <_dtoa_r+0x61c>)
 8008984:	ec51 0b19 	vmov	r0, r1, d9
 8008988:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800898c:	f7f7 ff66 	bl	800085c <__aeabi_ddiv>
 8008990:	f007 070f 	and.w	r7, r7, #15
 8008994:	4682      	mov	sl, r0
 8008996:	468b      	mov	fp, r1
 8008998:	2503      	movs	r5, #3
 800899a:	4eac      	ldr	r6, [pc, #688]	; (8008c4c <_dtoa_r+0x61c>)
 800899c:	b957      	cbnz	r7, 80089b4 <_dtoa_r+0x384>
 800899e:	4642      	mov	r2, r8
 80089a0:	464b      	mov	r3, r9
 80089a2:	4650      	mov	r0, sl
 80089a4:	4659      	mov	r1, fp
 80089a6:	f7f7 ff59 	bl	800085c <__aeabi_ddiv>
 80089aa:	4682      	mov	sl, r0
 80089ac:	468b      	mov	fp, r1
 80089ae:	e028      	b.n	8008a02 <_dtoa_r+0x3d2>
 80089b0:	2502      	movs	r5, #2
 80089b2:	e7f2      	b.n	800899a <_dtoa_r+0x36a>
 80089b4:	07f9      	lsls	r1, r7, #31
 80089b6:	d508      	bpl.n	80089ca <_dtoa_r+0x39a>
 80089b8:	4640      	mov	r0, r8
 80089ba:	4649      	mov	r1, r9
 80089bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80089c0:	f7f7 fe22 	bl	8000608 <__aeabi_dmul>
 80089c4:	3501      	adds	r5, #1
 80089c6:	4680      	mov	r8, r0
 80089c8:	4689      	mov	r9, r1
 80089ca:	107f      	asrs	r7, r7, #1
 80089cc:	3608      	adds	r6, #8
 80089ce:	e7e5      	b.n	800899c <_dtoa_r+0x36c>
 80089d0:	f000 809b 	beq.w	8008b0a <_dtoa_r+0x4da>
 80089d4:	9b00      	ldr	r3, [sp, #0]
 80089d6:	4f9d      	ldr	r7, [pc, #628]	; (8008c4c <_dtoa_r+0x61c>)
 80089d8:	425e      	negs	r6, r3
 80089da:	4b9b      	ldr	r3, [pc, #620]	; (8008c48 <_dtoa_r+0x618>)
 80089dc:	f006 020f 	and.w	r2, r6, #15
 80089e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e8:	ec51 0b19 	vmov	r0, r1, d9
 80089ec:	f7f7 fe0c 	bl	8000608 <__aeabi_dmul>
 80089f0:	1136      	asrs	r6, r6, #4
 80089f2:	4682      	mov	sl, r0
 80089f4:	468b      	mov	fp, r1
 80089f6:	2300      	movs	r3, #0
 80089f8:	2502      	movs	r5, #2
 80089fa:	2e00      	cmp	r6, #0
 80089fc:	d17a      	bne.n	8008af4 <_dtoa_r+0x4c4>
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d1d3      	bne.n	80089aa <_dtoa_r+0x37a>
 8008a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f000 8082 	beq.w	8008b0e <_dtoa_r+0x4de>
 8008a0a:	4b91      	ldr	r3, [pc, #580]	; (8008c50 <_dtoa_r+0x620>)
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	4650      	mov	r0, sl
 8008a10:	4659      	mov	r1, fp
 8008a12:	f7f8 f86b 	bl	8000aec <__aeabi_dcmplt>
 8008a16:	2800      	cmp	r0, #0
 8008a18:	d079      	beq.n	8008b0e <_dtoa_r+0x4de>
 8008a1a:	9b03      	ldr	r3, [sp, #12]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d076      	beq.n	8008b0e <_dtoa_r+0x4de>
 8008a20:	9b02      	ldr	r3, [sp, #8]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	dd36      	ble.n	8008a94 <_dtoa_r+0x464>
 8008a26:	9b00      	ldr	r3, [sp, #0]
 8008a28:	4650      	mov	r0, sl
 8008a2a:	4659      	mov	r1, fp
 8008a2c:	1e5f      	subs	r7, r3, #1
 8008a2e:	2200      	movs	r2, #0
 8008a30:	4b88      	ldr	r3, [pc, #544]	; (8008c54 <_dtoa_r+0x624>)
 8008a32:	f7f7 fde9 	bl	8000608 <__aeabi_dmul>
 8008a36:	9e02      	ldr	r6, [sp, #8]
 8008a38:	4682      	mov	sl, r0
 8008a3a:	468b      	mov	fp, r1
 8008a3c:	3501      	adds	r5, #1
 8008a3e:	4628      	mov	r0, r5
 8008a40:	f7f7 fd78 	bl	8000534 <__aeabi_i2d>
 8008a44:	4652      	mov	r2, sl
 8008a46:	465b      	mov	r3, fp
 8008a48:	f7f7 fdde 	bl	8000608 <__aeabi_dmul>
 8008a4c:	4b82      	ldr	r3, [pc, #520]	; (8008c58 <_dtoa_r+0x628>)
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f7f7 fc24 	bl	800029c <__adddf3>
 8008a54:	46d0      	mov	r8, sl
 8008a56:	46d9      	mov	r9, fp
 8008a58:	4682      	mov	sl, r0
 8008a5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008a5e:	2e00      	cmp	r6, #0
 8008a60:	d158      	bne.n	8008b14 <_dtoa_r+0x4e4>
 8008a62:	4b7e      	ldr	r3, [pc, #504]	; (8008c5c <_dtoa_r+0x62c>)
 8008a64:	2200      	movs	r2, #0
 8008a66:	4640      	mov	r0, r8
 8008a68:	4649      	mov	r1, r9
 8008a6a:	f7f7 fc15 	bl	8000298 <__aeabi_dsub>
 8008a6e:	4652      	mov	r2, sl
 8008a70:	465b      	mov	r3, fp
 8008a72:	4680      	mov	r8, r0
 8008a74:	4689      	mov	r9, r1
 8008a76:	f7f8 f857 	bl	8000b28 <__aeabi_dcmpgt>
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	f040 8295 	bne.w	8008faa <_dtoa_r+0x97a>
 8008a80:	4652      	mov	r2, sl
 8008a82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008a86:	4640      	mov	r0, r8
 8008a88:	4649      	mov	r1, r9
 8008a8a:	f7f8 f82f 	bl	8000aec <__aeabi_dcmplt>
 8008a8e:	2800      	cmp	r0, #0
 8008a90:	f040 8289 	bne.w	8008fa6 <_dtoa_r+0x976>
 8008a94:	ec5b ab19 	vmov	sl, fp, d9
 8008a98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f2c0 8148 	blt.w	8008d30 <_dtoa_r+0x700>
 8008aa0:	9a00      	ldr	r2, [sp, #0]
 8008aa2:	2a0e      	cmp	r2, #14
 8008aa4:	f300 8144 	bgt.w	8008d30 <_dtoa_r+0x700>
 8008aa8:	4b67      	ldr	r3, [pc, #412]	; (8008c48 <_dtoa_r+0x618>)
 8008aaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008aae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f280 80d5 	bge.w	8008c64 <_dtoa_r+0x634>
 8008aba:	9b03      	ldr	r3, [sp, #12]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f300 80d1 	bgt.w	8008c64 <_dtoa_r+0x634>
 8008ac2:	f040 826f 	bne.w	8008fa4 <_dtoa_r+0x974>
 8008ac6:	4b65      	ldr	r3, [pc, #404]	; (8008c5c <_dtoa_r+0x62c>)
 8008ac8:	2200      	movs	r2, #0
 8008aca:	4640      	mov	r0, r8
 8008acc:	4649      	mov	r1, r9
 8008ace:	f7f7 fd9b 	bl	8000608 <__aeabi_dmul>
 8008ad2:	4652      	mov	r2, sl
 8008ad4:	465b      	mov	r3, fp
 8008ad6:	f7f8 f81d 	bl	8000b14 <__aeabi_dcmpge>
 8008ada:	9e03      	ldr	r6, [sp, #12]
 8008adc:	4637      	mov	r7, r6
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	f040 8245 	bne.w	8008f6e <_dtoa_r+0x93e>
 8008ae4:	9d01      	ldr	r5, [sp, #4]
 8008ae6:	2331      	movs	r3, #49	; 0x31
 8008ae8:	f805 3b01 	strb.w	r3, [r5], #1
 8008aec:	9b00      	ldr	r3, [sp, #0]
 8008aee:	3301      	adds	r3, #1
 8008af0:	9300      	str	r3, [sp, #0]
 8008af2:	e240      	b.n	8008f76 <_dtoa_r+0x946>
 8008af4:	07f2      	lsls	r2, r6, #31
 8008af6:	d505      	bpl.n	8008b04 <_dtoa_r+0x4d4>
 8008af8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008afc:	f7f7 fd84 	bl	8000608 <__aeabi_dmul>
 8008b00:	3501      	adds	r5, #1
 8008b02:	2301      	movs	r3, #1
 8008b04:	1076      	asrs	r6, r6, #1
 8008b06:	3708      	adds	r7, #8
 8008b08:	e777      	b.n	80089fa <_dtoa_r+0x3ca>
 8008b0a:	2502      	movs	r5, #2
 8008b0c:	e779      	b.n	8008a02 <_dtoa_r+0x3d2>
 8008b0e:	9f00      	ldr	r7, [sp, #0]
 8008b10:	9e03      	ldr	r6, [sp, #12]
 8008b12:	e794      	b.n	8008a3e <_dtoa_r+0x40e>
 8008b14:	9901      	ldr	r1, [sp, #4]
 8008b16:	4b4c      	ldr	r3, [pc, #304]	; (8008c48 <_dtoa_r+0x618>)
 8008b18:	4431      	add	r1, r6
 8008b1a:	910d      	str	r1, [sp, #52]	; 0x34
 8008b1c:	9908      	ldr	r1, [sp, #32]
 8008b1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008b22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008b26:	2900      	cmp	r1, #0
 8008b28:	d043      	beq.n	8008bb2 <_dtoa_r+0x582>
 8008b2a:	494d      	ldr	r1, [pc, #308]	; (8008c60 <_dtoa_r+0x630>)
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	f7f7 fe95 	bl	800085c <__aeabi_ddiv>
 8008b32:	4652      	mov	r2, sl
 8008b34:	465b      	mov	r3, fp
 8008b36:	f7f7 fbaf 	bl	8000298 <__aeabi_dsub>
 8008b3a:	9d01      	ldr	r5, [sp, #4]
 8008b3c:	4682      	mov	sl, r0
 8008b3e:	468b      	mov	fp, r1
 8008b40:	4649      	mov	r1, r9
 8008b42:	4640      	mov	r0, r8
 8008b44:	f7f8 f810 	bl	8000b68 <__aeabi_d2iz>
 8008b48:	4606      	mov	r6, r0
 8008b4a:	f7f7 fcf3 	bl	8000534 <__aeabi_i2d>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	460b      	mov	r3, r1
 8008b52:	4640      	mov	r0, r8
 8008b54:	4649      	mov	r1, r9
 8008b56:	f7f7 fb9f 	bl	8000298 <__aeabi_dsub>
 8008b5a:	3630      	adds	r6, #48	; 0x30
 8008b5c:	f805 6b01 	strb.w	r6, [r5], #1
 8008b60:	4652      	mov	r2, sl
 8008b62:	465b      	mov	r3, fp
 8008b64:	4680      	mov	r8, r0
 8008b66:	4689      	mov	r9, r1
 8008b68:	f7f7 ffc0 	bl	8000aec <__aeabi_dcmplt>
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	d163      	bne.n	8008c38 <_dtoa_r+0x608>
 8008b70:	4642      	mov	r2, r8
 8008b72:	464b      	mov	r3, r9
 8008b74:	4936      	ldr	r1, [pc, #216]	; (8008c50 <_dtoa_r+0x620>)
 8008b76:	2000      	movs	r0, #0
 8008b78:	f7f7 fb8e 	bl	8000298 <__aeabi_dsub>
 8008b7c:	4652      	mov	r2, sl
 8008b7e:	465b      	mov	r3, fp
 8008b80:	f7f7 ffb4 	bl	8000aec <__aeabi_dcmplt>
 8008b84:	2800      	cmp	r0, #0
 8008b86:	f040 80b5 	bne.w	8008cf4 <_dtoa_r+0x6c4>
 8008b8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b8c:	429d      	cmp	r5, r3
 8008b8e:	d081      	beq.n	8008a94 <_dtoa_r+0x464>
 8008b90:	4b30      	ldr	r3, [pc, #192]	; (8008c54 <_dtoa_r+0x624>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	4650      	mov	r0, sl
 8008b96:	4659      	mov	r1, fp
 8008b98:	f7f7 fd36 	bl	8000608 <__aeabi_dmul>
 8008b9c:	4b2d      	ldr	r3, [pc, #180]	; (8008c54 <_dtoa_r+0x624>)
 8008b9e:	4682      	mov	sl, r0
 8008ba0:	468b      	mov	fp, r1
 8008ba2:	4640      	mov	r0, r8
 8008ba4:	4649      	mov	r1, r9
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f7f7 fd2e 	bl	8000608 <__aeabi_dmul>
 8008bac:	4680      	mov	r8, r0
 8008bae:	4689      	mov	r9, r1
 8008bb0:	e7c6      	b.n	8008b40 <_dtoa_r+0x510>
 8008bb2:	4650      	mov	r0, sl
 8008bb4:	4659      	mov	r1, fp
 8008bb6:	f7f7 fd27 	bl	8000608 <__aeabi_dmul>
 8008bba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bbc:	9d01      	ldr	r5, [sp, #4]
 8008bbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bc0:	4682      	mov	sl, r0
 8008bc2:	468b      	mov	fp, r1
 8008bc4:	4649      	mov	r1, r9
 8008bc6:	4640      	mov	r0, r8
 8008bc8:	f7f7 ffce 	bl	8000b68 <__aeabi_d2iz>
 8008bcc:	4606      	mov	r6, r0
 8008bce:	f7f7 fcb1 	bl	8000534 <__aeabi_i2d>
 8008bd2:	3630      	adds	r6, #48	; 0x30
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	4640      	mov	r0, r8
 8008bda:	4649      	mov	r1, r9
 8008bdc:	f7f7 fb5c 	bl	8000298 <__aeabi_dsub>
 8008be0:	f805 6b01 	strb.w	r6, [r5], #1
 8008be4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008be6:	429d      	cmp	r5, r3
 8008be8:	4680      	mov	r8, r0
 8008bea:	4689      	mov	r9, r1
 8008bec:	f04f 0200 	mov.w	r2, #0
 8008bf0:	d124      	bne.n	8008c3c <_dtoa_r+0x60c>
 8008bf2:	4b1b      	ldr	r3, [pc, #108]	; (8008c60 <_dtoa_r+0x630>)
 8008bf4:	4650      	mov	r0, sl
 8008bf6:	4659      	mov	r1, fp
 8008bf8:	f7f7 fb50 	bl	800029c <__adddf3>
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	460b      	mov	r3, r1
 8008c00:	4640      	mov	r0, r8
 8008c02:	4649      	mov	r1, r9
 8008c04:	f7f7 ff90 	bl	8000b28 <__aeabi_dcmpgt>
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	d173      	bne.n	8008cf4 <_dtoa_r+0x6c4>
 8008c0c:	4652      	mov	r2, sl
 8008c0e:	465b      	mov	r3, fp
 8008c10:	4913      	ldr	r1, [pc, #76]	; (8008c60 <_dtoa_r+0x630>)
 8008c12:	2000      	movs	r0, #0
 8008c14:	f7f7 fb40 	bl	8000298 <__aeabi_dsub>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	4640      	mov	r0, r8
 8008c1e:	4649      	mov	r1, r9
 8008c20:	f7f7 ff64 	bl	8000aec <__aeabi_dcmplt>
 8008c24:	2800      	cmp	r0, #0
 8008c26:	f43f af35 	beq.w	8008a94 <_dtoa_r+0x464>
 8008c2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008c2c:	1e6b      	subs	r3, r5, #1
 8008c2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008c34:	2b30      	cmp	r3, #48	; 0x30
 8008c36:	d0f8      	beq.n	8008c2a <_dtoa_r+0x5fa>
 8008c38:	9700      	str	r7, [sp, #0]
 8008c3a:	e049      	b.n	8008cd0 <_dtoa_r+0x6a0>
 8008c3c:	4b05      	ldr	r3, [pc, #20]	; (8008c54 <_dtoa_r+0x624>)
 8008c3e:	f7f7 fce3 	bl	8000608 <__aeabi_dmul>
 8008c42:	4680      	mov	r8, r0
 8008c44:	4689      	mov	r9, r1
 8008c46:	e7bd      	b.n	8008bc4 <_dtoa_r+0x594>
 8008c48:	0800b858 	.word	0x0800b858
 8008c4c:	0800b830 	.word	0x0800b830
 8008c50:	3ff00000 	.word	0x3ff00000
 8008c54:	40240000 	.word	0x40240000
 8008c58:	401c0000 	.word	0x401c0000
 8008c5c:	40140000 	.word	0x40140000
 8008c60:	3fe00000 	.word	0x3fe00000
 8008c64:	9d01      	ldr	r5, [sp, #4]
 8008c66:	4656      	mov	r6, sl
 8008c68:	465f      	mov	r7, fp
 8008c6a:	4642      	mov	r2, r8
 8008c6c:	464b      	mov	r3, r9
 8008c6e:	4630      	mov	r0, r6
 8008c70:	4639      	mov	r1, r7
 8008c72:	f7f7 fdf3 	bl	800085c <__aeabi_ddiv>
 8008c76:	f7f7 ff77 	bl	8000b68 <__aeabi_d2iz>
 8008c7a:	4682      	mov	sl, r0
 8008c7c:	f7f7 fc5a 	bl	8000534 <__aeabi_i2d>
 8008c80:	4642      	mov	r2, r8
 8008c82:	464b      	mov	r3, r9
 8008c84:	f7f7 fcc0 	bl	8000608 <__aeabi_dmul>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	4630      	mov	r0, r6
 8008c8e:	4639      	mov	r1, r7
 8008c90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008c94:	f7f7 fb00 	bl	8000298 <__aeabi_dsub>
 8008c98:	f805 6b01 	strb.w	r6, [r5], #1
 8008c9c:	9e01      	ldr	r6, [sp, #4]
 8008c9e:	9f03      	ldr	r7, [sp, #12]
 8008ca0:	1bae      	subs	r6, r5, r6
 8008ca2:	42b7      	cmp	r7, r6
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	d135      	bne.n	8008d16 <_dtoa_r+0x6e6>
 8008caa:	f7f7 faf7 	bl	800029c <__adddf3>
 8008cae:	4642      	mov	r2, r8
 8008cb0:	464b      	mov	r3, r9
 8008cb2:	4606      	mov	r6, r0
 8008cb4:	460f      	mov	r7, r1
 8008cb6:	f7f7 ff37 	bl	8000b28 <__aeabi_dcmpgt>
 8008cba:	b9d0      	cbnz	r0, 8008cf2 <_dtoa_r+0x6c2>
 8008cbc:	4642      	mov	r2, r8
 8008cbe:	464b      	mov	r3, r9
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	4639      	mov	r1, r7
 8008cc4:	f7f7 ff08 	bl	8000ad8 <__aeabi_dcmpeq>
 8008cc8:	b110      	cbz	r0, 8008cd0 <_dtoa_r+0x6a0>
 8008cca:	f01a 0f01 	tst.w	sl, #1
 8008cce:	d110      	bne.n	8008cf2 <_dtoa_r+0x6c2>
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	ee18 1a10 	vmov	r1, s16
 8008cd6:	f001 f885 	bl	8009de4 <_Bfree>
 8008cda:	2300      	movs	r3, #0
 8008cdc:	9800      	ldr	r0, [sp, #0]
 8008cde:	702b      	strb	r3, [r5, #0]
 8008ce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ce2:	3001      	adds	r0, #1
 8008ce4:	6018      	str	r0, [r3, #0]
 8008ce6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	f43f acf1 	beq.w	80086d0 <_dtoa_r+0xa0>
 8008cee:	601d      	str	r5, [r3, #0]
 8008cf0:	e4ee      	b.n	80086d0 <_dtoa_r+0xa0>
 8008cf2:	9f00      	ldr	r7, [sp, #0]
 8008cf4:	462b      	mov	r3, r5
 8008cf6:	461d      	mov	r5, r3
 8008cf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cfc:	2a39      	cmp	r2, #57	; 0x39
 8008cfe:	d106      	bne.n	8008d0e <_dtoa_r+0x6de>
 8008d00:	9a01      	ldr	r2, [sp, #4]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d1f7      	bne.n	8008cf6 <_dtoa_r+0x6c6>
 8008d06:	9901      	ldr	r1, [sp, #4]
 8008d08:	2230      	movs	r2, #48	; 0x30
 8008d0a:	3701      	adds	r7, #1
 8008d0c:	700a      	strb	r2, [r1, #0]
 8008d0e:	781a      	ldrb	r2, [r3, #0]
 8008d10:	3201      	adds	r2, #1
 8008d12:	701a      	strb	r2, [r3, #0]
 8008d14:	e790      	b.n	8008c38 <_dtoa_r+0x608>
 8008d16:	4ba6      	ldr	r3, [pc, #664]	; (8008fb0 <_dtoa_r+0x980>)
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f7f7 fc75 	bl	8000608 <__aeabi_dmul>
 8008d1e:	2200      	movs	r2, #0
 8008d20:	2300      	movs	r3, #0
 8008d22:	4606      	mov	r6, r0
 8008d24:	460f      	mov	r7, r1
 8008d26:	f7f7 fed7 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d2a:	2800      	cmp	r0, #0
 8008d2c:	d09d      	beq.n	8008c6a <_dtoa_r+0x63a>
 8008d2e:	e7cf      	b.n	8008cd0 <_dtoa_r+0x6a0>
 8008d30:	9a08      	ldr	r2, [sp, #32]
 8008d32:	2a00      	cmp	r2, #0
 8008d34:	f000 80d7 	beq.w	8008ee6 <_dtoa_r+0x8b6>
 8008d38:	9a06      	ldr	r2, [sp, #24]
 8008d3a:	2a01      	cmp	r2, #1
 8008d3c:	f300 80ba 	bgt.w	8008eb4 <_dtoa_r+0x884>
 8008d40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d42:	2a00      	cmp	r2, #0
 8008d44:	f000 80b2 	beq.w	8008eac <_dtoa_r+0x87c>
 8008d48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008d4c:	9e07      	ldr	r6, [sp, #28]
 8008d4e:	9d04      	ldr	r5, [sp, #16]
 8008d50:	9a04      	ldr	r2, [sp, #16]
 8008d52:	441a      	add	r2, r3
 8008d54:	9204      	str	r2, [sp, #16]
 8008d56:	9a05      	ldr	r2, [sp, #20]
 8008d58:	2101      	movs	r1, #1
 8008d5a:	441a      	add	r2, r3
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	9205      	str	r2, [sp, #20]
 8008d60:	f001 f942 	bl	8009fe8 <__i2b>
 8008d64:	4607      	mov	r7, r0
 8008d66:	2d00      	cmp	r5, #0
 8008d68:	dd0c      	ble.n	8008d84 <_dtoa_r+0x754>
 8008d6a:	9b05      	ldr	r3, [sp, #20]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	dd09      	ble.n	8008d84 <_dtoa_r+0x754>
 8008d70:	42ab      	cmp	r3, r5
 8008d72:	9a04      	ldr	r2, [sp, #16]
 8008d74:	bfa8      	it	ge
 8008d76:	462b      	movge	r3, r5
 8008d78:	1ad2      	subs	r2, r2, r3
 8008d7a:	9204      	str	r2, [sp, #16]
 8008d7c:	9a05      	ldr	r2, [sp, #20]
 8008d7e:	1aed      	subs	r5, r5, r3
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	9305      	str	r3, [sp, #20]
 8008d84:	9b07      	ldr	r3, [sp, #28]
 8008d86:	b31b      	cbz	r3, 8008dd0 <_dtoa_r+0x7a0>
 8008d88:	9b08      	ldr	r3, [sp, #32]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	f000 80af 	beq.w	8008eee <_dtoa_r+0x8be>
 8008d90:	2e00      	cmp	r6, #0
 8008d92:	dd13      	ble.n	8008dbc <_dtoa_r+0x78c>
 8008d94:	4639      	mov	r1, r7
 8008d96:	4632      	mov	r2, r6
 8008d98:	4620      	mov	r0, r4
 8008d9a:	f001 f9e5 	bl	800a168 <__pow5mult>
 8008d9e:	ee18 2a10 	vmov	r2, s16
 8008da2:	4601      	mov	r1, r0
 8008da4:	4607      	mov	r7, r0
 8008da6:	4620      	mov	r0, r4
 8008da8:	f001 f934 	bl	800a014 <__multiply>
 8008dac:	ee18 1a10 	vmov	r1, s16
 8008db0:	4680      	mov	r8, r0
 8008db2:	4620      	mov	r0, r4
 8008db4:	f001 f816 	bl	8009de4 <_Bfree>
 8008db8:	ee08 8a10 	vmov	s16, r8
 8008dbc:	9b07      	ldr	r3, [sp, #28]
 8008dbe:	1b9a      	subs	r2, r3, r6
 8008dc0:	d006      	beq.n	8008dd0 <_dtoa_r+0x7a0>
 8008dc2:	ee18 1a10 	vmov	r1, s16
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	f001 f9ce 	bl	800a168 <__pow5mult>
 8008dcc:	ee08 0a10 	vmov	s16, r0
 8008dd0:	2101      	movs	r1, #1
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f001 f908 	bl	8009fe8 <__i2b>
 8008dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	4606      	mov	r6, r0
 8008dde:	f340 8088 	ble.w	8008ef2 <_dtoa_r+0x8c2>
 8008de2:	461a      	mov	r2, r3
 8008de4:	4601      	mov	r1, r0
 8008de6:	4620      	mov	r0, r4
 8008de8:	f001 f9be 	bl	800a168 <__pow5mult>
 8008dec:	9b06      	ldr	r3, [sp, #24]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	4606      	mov	r6, r0
 8008df2:	f340 8081 	ble.w	8008ef8 <_dtoa_r+0x8c8>
 8008df6:	f04f 0800 	mov.w	r8, #0
 8008dfa:	6933      	ldr	r3, [r6, #16]
 8008dfc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008e00:	6918      	ldr	r0, [r3, #16]
 8008e02:	f001 f8a1 	bl	8009f48 <__hi0bits>
 8008e06:	f1c0 0020 	rsb	r0, r0, #32
 8008e0a:	9b05      	ldr	r3, [sp, #20]
 8008e0c:	4418      	add	r0, r3
 8008e0e:	f010 001f 	ands.w	r0, r0, #31
 8008e12:	f000 8092 	beq.w	8008f3a <_dtoa_r+0x90a>
 8008e16:	f1c0 0320 	rsb	r3, r0, #32
 8008e1a:	2b04      	cmp	r3, #4
 8008e1c:	f340 808a 	ble.w	8008f34 <_dtoa_r+0x904>
 8008e20:	f1c0 001c 	rsb	r0, r0, #28
 8008e24:	9b04      	ldr	r3, [sp, #16]
 8008e26:	4403      	add	r3, r0
 8008e28:	9304      	str	r3, [sp, #16]
 8008e2a:	9b05      	ldr	r3, [sp, #20]
 8008e2c:	4403      	add	r3, r0
 8008e2e:	4405      	add	r5, r0
 8008e30:	9305      	str	r3, [sp, #20]
 8008e32:	9b04      	ldr	r3, [sp, #16]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	dd07      	ble.n	8008e48 <_dtoa_r+0x818>
 8008e38:	ee18 1a10 	vmov	r1, s16
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	4620      	mov	r0, r4
 8008e40:	f001 f9ec 	bl	800a21c <__lshift>
 8008e44:	ee08 0a10 	vmov	s16, r0
 8008e48:	9b05      	ldr	r3, [sp, #20]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	dd05      	ble.n	8008e5a <_dtoa_r+0x82a>
 8008e4e:	4631      	mov	r1, r6
 8008e50:	461a      	mov	r2, r3
 8008e52:	4620      	mov	r0, r4
 8008e54:	f001 f9e2 	bl	800a21c <__lshift>
 8008e58:	4606      	mov	r6, r0
 8008e5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d06e      	beq.n	8008f3e <_dtoa_r+0x90e>
 8008e60:	ee18 0a10 	vmov	r0, s16
 8008e64:	4631      	mov	r1, r6
 8008e66:	f001 fa49 	bl	800a2fc <__mcmp>
 8008e6a:	2800      	cmp	r0, #0
 8008e6c:	da67      	bge.n	8008f3e <_dtoa_r+0x90e>
 8008e6e:	9b00      	ldr	r3, [sp, #0]
 8008e70:	3b01      	subs	r3, #1
 8008e72:	ee18 1a10 	vmov	r1, s16
 8008e76:	9300      	str	r3, [sp, #0]
 8008e78:	220a      	movs	r2, #10
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	f000 ffd3 	bl	8009e28 <__multadd>
 8008e82:	9b08      	ldr	r3, [sp, #32]
 8008e84:	ee08 0a10 	vmov	s16, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f000 81b1 	beq.w	80091f0 <_dtoa_r+0xbc0>
 8008e8e:	2300      	movs	r3, #0
 8008e90:	4639      	mov	r1, r7
 8008e92:	220a      	movs	r2, #10
 8008e94:	4620      	mov	r0, r4
 8008e96:	f000 ffc7 	bl	8009e28 <__multadd>
 8008e9a:	9b02      	ldr	r3, [sp, #8]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	4607      	mov	r7, r0
 8008ea0:	f300 808e 	bgt.w	8008fc0 <_dtoa_r+0x990>
 8008ea4:	9b06      	ldr	r3, [sp, #24]
 8008ea6:	2b02      	cmp	r3, #2
 8008ea8:	dc51      	bgt.n	8008f4e <_dtoa_r+0x91e>
 8008eaa:	e089      	b.n	8008fc0 <_dtoa_r+0x990>
 8008eac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008eae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008eb2:	e74b      	b.n	8008d4c <_dtoa_r+0x71c>
 8008eb4:	9b03      	ldr	r3, [sp, #12]
 8008eb6:	1e5e      	subs	r6, r3, #1
 8008eb8:	9b07      	ldr	r3, [sp, #28]
 8008eba:	42b3      	cmp	r3, r6
 8008ebc:	bfbf      	itttt	lt
 8008ebe:	9b07      	ldrlt	r3, [sp, #28]
 8008ec0:	9607      	strlt	r6, [sp, #28]
 8008ec2:	1af2      	sublt	r2, r6, r3
 8008ec4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008ec6:	bfb6      	itet	lt
 8008ec8:	189b      	addlt	r3, r3, r2
 8008eca:	1b9e      	subge	r6, r3, r6
 8008ecc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008ece:	9b03      	ldr	r3, [sp, #12]
 8008ed0:	bfb8      	it	lt
 8008ed2:	2600      	movlt	r6, #0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	bfb7      	itett	lt
 8008ed8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008edc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008ee0:	1a9d      	sublt	r5, r3, r2
 8008ee2:	2300      	movlt	r3, #0
 8008ee4:	e734      	b.n	8008d50 <_dtoa_r+0x720>
 8008ee6:	9e07      	ldr	r6, [sp, #28]
 8008ee8:	9d04      	ldr	r5, [sp, #16]
 8008eea:	9f08      	ldr	r7, [sp, #32]
 8008eec:	e73b      	b.n	8008d66 <_dtoa_r+0x736>
 8008eee:	9a07      	ldr	r2, [sp, #28]
 8008ef0:	e767      	b.n	8008dc2 <_dtoa_r+0x792>
 8008ef2:	9b06      	ldr	r3, [sp, #24]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	dc18      	bgt.n	8008f2a <_dtoa_r+0x8fa>
 8008ef8:	f1ba 0f00 	cmp.w	sl, #0
 8008efc:	d115      	bne.n	8008f2a <_dtoa_r+0x8fa>
 8008efe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f02:	b993      	cbnz	r3, 8008f2a <_dtoa_r+0x8fa>
 8008f04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008f08:	0d1b      	lsrs	r3, r3, #20
 8008f0a:	051b      	lsls	r3, r3, #20
 8008f0c:	b183      	cbz	r3, 8008f30 <_dtoa_r+0x900>
 8008f0e:	9b04      	ldr	r3, [sp, #16]
 8008f10:	3301      	adds	r3, #1
 8008f12:	9304      	str	r3, [sp, #16]
 8008f14:	9b05      	ldr	r3, [sp, #20]
 8008f16:	3301      	adds	r3, #1
 8008f18:	9305      	str	r3, [sp, #20]
 8008f1a:	f04f 0801 	mov.w	r8, #1
 8008f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f47f af6a 	bne.w	8008dfa <_dtoa_r+0x7ca>
 8008f26:	2001      	movs	r0, #1
 8008f28:	e76f      	b.n	8008e0a <_dtoa_r+0x7da>
 8008f2a:	f04f 0800 	mov.w	r8, #0
 8008f2e:	e7f6      	b.n	8008f1e <_dtoa_r+0x8ee>
 8008f30:	4698      	mov	r8, r3
 8008f32:	e7f4      	b.n	8008f1e <_dtoa_r+0x8ee>
 8008f34:	f43f af7d 	beq.w	8008e32 <_dtoa_r+0x802>
 8008f38:	4618      	mov	r0, r3
 8008f3a:	301c      	adds	r0, #28
 8008f3c:	e772      	b.n	8008e24 <_dtoa_r+0x7f4>
 8008f3e:	9b03      	ldr	r3, [sp, #12]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	dc37      	bgt.n	8008fb4 <_dtoa_r+0x984>
 8008f44:	9b06      	ldr	r3, [sp, #24]
 8008f46:	2b02      	cmp	r3, #2
 8008f48:	dd34      	ble.n	8008fb4 <_dtoa_r+0x984>
 8008f4a:	9b03      	ldr	r3, [sp, #12]
 8008f4c:	9302      	str	r3, [sp, #8]
 8008f4e:	9b02      	ldr	r3, [sp, #8]
 8008f50:	b96b      	cbnz	r3, 8008f6e <_dtoa_r+0x93e>
 8008f52:	4631      	mov	r1, r6
 8008f54:	2205      	movs	r2, #5
 8008f56:	4620      	mov	r0, r4
 8008f58:	f000 ff66 	bl	8009e28 <__multadd>
 8008f5c:	4601      	mov	r1, r0
 8008f5e:	4606      	mov	r6, r0
 8008f60:	ee18 0a10 	vmov	r0, s16
 8008f64:	f001 f9ca 	bl	800a2fc <__mcmp>
 8008f68:	2800      	cmp	r0, #0
 8008f6a:	f73f adbb 	bgt.w	8008ae4 <_dtoa_r+0x4b4>
 8008f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f70:	9d01      	ldr	r5, [sp, #4]
 8008f72:	43db      	mvns	r3, r3
 8008f74:	9300      	str	r3, [sp, #0]
 8008f76:	f04f 0800 	mov.w	r8, #0
 8008f7a:	4631      	mov	r1, r6
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	f000 ff31 	bl	8009de4 <_Bfree>
 8008f82:	2f00      	cmp	r7, #0
 8008f84:	f43f aea4 	beq.w	8008cd0 <_dtoa_r+0x6a0>
 8008f88:	f1b8 0f00 	cmp.w	r8, #0
 8008f8c:	d005      	beq.n	8008f9a <_dtoa_r+0x96a>
 8008f8e:	45b8      	cmp	r8, r7
 8008f90:	d003      	beq.n	8008f9a <_dtoa_r+0x96a>
 8008f92:	4641      	mov	r1, r8
 8008f94:	4620      	mov	r0, r4
 8008f96:	f000 ff25 	bl	8009de4 <_Bfree>
 8008f9a:	4639      	mov	r1, r7
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	f000 ff21 	bl	8009de4 <_Bfree>
 8008fa2:	e695      	b.n	8008cd0 <_dtoa_r+0x6a0>
 8008fa4:	2600      	movs	r6, #0
 8008fa6:	4637      	mov	r7, r6
 8008fa8:	e7e1      	b.n	8008f6e <_dtoa_r+0x93e>
 8008faa:	9700      	str	r7, [sp, #0]
 8008fac:	4637      	mov	r7, r6
 8008fae:	e599      	b.n	8008ae4 <_dtoa_r+0x4b4>
 8008fb0:	40240000 	.word	0x40240000
 8008fb4:	9b08      	ldr	r3, [sp, #32]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	f000 80ca 	beq.w	8009150 <_dtoa_r+0xb20>
 8008fbc:	9b03      	ldr	r3, [sp, #12]
 8008fbe:	9302      	str	r3, [sp, #8]
 8008fc0:	2d00      	cmp	r5, #0
 8008fc2:	dd05      	ble.n	8008fd0 <_dtoa_r+0x9a0>
 8008fc4:	4639      	mov	r1, r7
 8008fc6:	462a      	mov	r2, r5
 8008fc8:	4620      	mov	r0, r4
 8008fca:	f001 f927 	bl	800a21c <__lshift>
 8008fce:	4607      	mov	r7, r0
 8008fd0:	f1b8 0f00 	cmp.w	r8, #0
 8008fd4:	d05b      	beq.n	800908e <_dtoa_r+0xa5e>
 8008fd6:	6879      	ldr	r1, [r7, #4]
 8008fd8:	4620      	mov	r0, r4
 8008fda:	f000 fec3 	bl	8009d64 <_Balloc>
 8008fde:	4605      	mov	r5, r0
 8008fe0:	b928      	cbnz	r0, 8008fee <_dtoa_r+0x9be>
 8008fe2:	4b87      	ldr	r3, [pc, #540]	; (8009200 <_dtoa_r+0xbd0>)
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008fea:	f7ff bb3b 	b.w	8008664 <_dtoa_r+0x34>
 8008fee:	693a      	ldr	r2, [r7, #16]
 8008ff0:	3202      	adds	r2, #2
 8008ff2:	0092      	lsls	r2, r2, #2
 8008ff4:	f107 010c 	add.w	r1, r7, #12
 8008ff8:	300c      	adds	r0, #12
 8008ffa:	f7fd fbdd 	bl	80067b8 <memcpy>
 8008ffe:	2201      	movs	r2, #1
 8009000:	4629      	mov	r1, r5
 8009002:	4620      	mov	r0, r4
 8009004:	f001 f90a 	bl	800a21c <__lshift>
 8009008:	9b01      	ldr	r3, [sp, #4]
 800900a:	f103 0901 	add.w	r9, r3, #1
 800900e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009012:	4413      	add	r3, r2
 8009014:	9305      	str	r3, [sp, #20]
 8009016:	f00a 0301 	and.w	r3, sl, #1
 800901a:	46b8      	mov	r8, r7
 800901c:	9304      	str	r3, [sp, #16]
 800901e:	4607      	mov	r7, r0
 8009020:	4631      	mov	r1, r6
 8009022:	ee18 0a10 	vmov	r0, s16
 8009026:	f7ff fa77 	bl	8008518 <quorem>
 800902a:	4641      	mov	r1, r8
 800902c:	9002      	str	r0, [sp, #8]
 800902e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009032:	ee18 0a10 	vmov	r0, s16
 8009036:	f001 f961 	bl	800a2fc <__mcmp>
 800903a:	463a      	mov	r2, r7
 800903c:	9003      	str	r0, [sp, #12]
 800903e:	4631      	mov	r1, r6
 8009040:	4620      	mov	r0, r4
 8009042:	f001 f977 	bl	800a334 <__mdiff>
 8009046:	68c2      	ldr	r2, [r0, #12]
 8009048:	f109 3bff 	add.w	fp, r9, #4294967295
 800904c:	4605      	mov	r5, r0
 800904e:	bb02      	cbnz	r2, 8009092 <_dtoa_r+0xa62>
 8009050:	4601      	mov	r1, r0
 8009052:	ee18 0a10 	vmov	r0, s16
 8009056:	f001 f951 	bl	800a2fc <__mcmp>
 800905a:	4602      	mov	r2, r0
 800905c:	4629      	mov	r1, r5
 800905e:	4620      	mov	r0, r4
 8009060:	9207      	str	r2, [sp, #28]
 8009062:	f000 febf 	bl	8009de4 <_Bfree>
 8009066:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800906a:	ea43 0102 	orr.w	r1, r3, r2
 800906e:	9b04      	ldr	r3, [sp, #16]
 8009070:	430b      	orrs	r3, r1
 8009072:	464d      	mov	r5, r9
 8009074:	d10f      	bne.n	8009096 <_dtoa_r+0xa66>
 8009076:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800907a:	d02a      	beq.n	80090d2 <_dtoa_r+0xaa2>
 800907c:	9b03      	ldr	r3, [sp, #12]
 800907e:	2b00      	cmp	r3, #0
 8009080:	dd02      	ble.n	8009088 <_dtoa_r+0xa58>
 8009082:	9b02      	ldr	r3, [sp, #8]
 8009084:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009088:	f88b a000 	strb.w	sl, [fp]
 800908c:	e775      	b.n	8008f7a <_dtoa_r+0x94a>
 800908e:	4638      	mov	r0, r7
 8009090:	e7ba      	b.n	8009008 <_dtoa_r+0x9d8>
 8009092:	2201      	movs	r2, #1
 8009094:	e7e2      	b.n	800905c <_dtoa_r+0xa2c>
 8009096:	9b03      	ldr	r3, [sp, #12]
 8009098:	2b00      	cmp	r3, #0
 800909a:	db04      	blt.n	80090a6 <_dtoa_r+0xa76>
 800909c:	9906      	ldr	r1, [sp, #24]
 800909e:	430b      	orrs	r3, r1
 80090a0:	9904      	ldr	r1, [sp, #16]
 80090a2:	430b      	orrs	r3, r1
 80090a4:	d122      	bne.n	80090ec <_dtoa_r+0xabc>
 80090a6:	2a00      	cmp	r2, #0
 80090a8:	ddee      	ble.n	8009088 <_dtoa_r+0xa58>
 80090aa:	ee18 1a10 	vmov	r1, s16
 80090ae:	2201      	movs	r2, #1
 80090b0:	4620      	mov	r0, r4
 80090b2:	f001 f8b3 	bl	800a21c <__lshift>
 80090b6:	4631      	mov	r1, r6
 80090b8:	ee08 0a10 	vmov	s16, r0
 80090bc:	f001 f91e 	bl	800a2fc <__mcmp>
 80090c0:	2800      	cmp	r0, #0
 80090c2:	dc03      	bgt.n	80090cc <_dtoa_r+0xa9c>
 80090c4:	d1e0      	bne.n	8009088 <_dtoa_r+0xa58>
 80090c6:	f01a 0f01 	tst.w	sl, #1
 80090ca:	d0dd      	beq.n	8009088 <_dtoa_r+0xa58>
 80090cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80090d0:	d1d7      	bne.n	8009082 <_dtoa_r+0xa52>
 80090d2:	2339      	movs	r3, #57	; 0x39
 80090d4:	f88b 3000 	strb.w	r3, [fp]
 80090d8:	462b      	mov	r3, r5
 80090da:	461d      	mov	r5, r3
 80090dc:	3b01      	subs	r3, #1
 80090de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80090e2:	2a39      	cmp	r2, #57	; 0x39
 80090e4:	d071      	beq.n	80091ca <_dtoa_r+0xb9a>
 80090e6:	3201      	adds	r2, #1
 80090e8:	701a      	strb	r2, [r3, #0]
 80090ea:	e746      	b.n	8008f7a <_dtoa_r+0x94a>
 80090ec:	2a00      	cmp	r2, #0
 80090ee:	dd07      	ble.n	8009100 <_dtoa_r+0xad0>
 80090f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80090f4:	d0ed      	beq.n	80090d2 <_dtoa_r+0xaa2>
 80090f6:	f10a 0301 	add.w	r3, sl, #1
 80090fa:	f88b 3000 	strb.w	r3, [fp]
 80090fe:	e73c      	b.n	8008f7a <_dtoa_r+0x94a>
 8009100:	9b05      	ldr	r3, [sp, #20]
 8009102:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009106:	4599      	cmp	r9, r3
 8009108:	d047      	beq.n	800919a <_dtoa_r+0xb6a>
 800910a:	ee18 1a10 	vmov	r1, s16
 800910e:	2300      	movs	r3, #0
 8009110:	220a      	movs	r2, #10
 8009112:	4620      	mov	r0, r4
 8009114:	f000 fe88 	bl	8009e28 <__multadd>
 8009118:	45b8      	cmp	r8, r7
 800911a:	ee08 0a10 	vmov	s16, r0
 800911e:	f04f 0300 	mov.w	r3, #0
 8009122:	f04f 020a 	mov.w	r2, #10
 8009126:	4641      	mov	r1, r8
 8009128:	4620      	mov	r0, r4
 800912a:	d106      	bne.n	800913a <_dtoa_r+0xb0a>
 800912c:	f000 fe7c 	bl	8009e28 <__multadd>
 8009130:	4680      	mov	r8, r0
 8009132:	4607      	mov	r7, r0
 8009134:	f109 0901 	add.w	r9, r9, #1
 8009138:	e772      	b.n	8009020 <_dtoa_r+0x9f0>
 800913a:	f000 fe75 	bl	8009e28 <__multadd>
 800913e:	4639      	mov	r1, r7
 8009140:	4680      	mov	r8, r0
 8009142:	2300      	movs	r3, #0
 8009144:	220a      	movs	r2, #10
 8009146:	4620      	mov	r0, r4
 8009148:	f000 fe6e 	bl	8009e28 <__multadd>
 800914c:	4607      	mov	r7, r0
 800914e:	e7f1      	b.n	8009134 <_dtoa_r+0xb04>
 8009150:	9b03      	ldr	r3, [sp, #12]
 8009152:	9302      	str	r3, [sp, #8]
 8009154:	9d01      	ldr	r5, [sp, #4]
 8009156:	ee18 0a10 	vmov	r0, s16
 800915a:	4631      	mov	r1, r6
 800915c:	f7ff f9dc 	bl	8008518 <quorem>
 8009160:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009164:	9b01      	ldr	r3, [sp, #4]
 8009166:	f805 ab01 	strb.w	sl, [r5], #1
 800916a:	1aea      	subs	r2, r5, r3
 800916c:	9b02      	ldr	r3, [sp, #8]
 800916e:	4293      	cmp	r3, r2
 8009170:	dd09      	ble.n	8009186 <_dtoa_r+0xb56>
 8009172:	ee18 1a10 	vmov	r1, s16
 8009176:	2300      	movs	r3, #0
 8009178:	220a      	movs	r2, #10
 800917a:	4620      	mov	r0, r4
 800917c:	f000 fe54 	bl	8009e28 <__multadd>
 8009180:	ee08 0a10 	vmov	s16, r0
 8009184:	e7e7      	b.n	8009156 <_dtoa_r+0xb26>
 8009186:	9b02      	ldr	r3, [sp, #8]
 8009188:	2b00      	cmp	r3, #0
 800918a:	bfc8      	it	gt
 800918c:	461d      	movgt	r5, r3
 800918e:	9b01      	ldr	r3, [sp, #4]
 8009190:	bfd8      	it	le
 8009192:	2501      	movle	r5, #1
 8009194:	441d      	add	r5, r3
 8009196:	f04f 0800 	mov.w	r8, #0
 800919a:	ee18 1a10 	vmov	r1, s16
 800919e:	2201      	movs	r2, #1
 80091a0:	4620      	mov	r0, r4
 80091a2:	f001 f83b 	bl	800a21c <__lshift>
 80091a6:	4631      	mov	r1, r6
 80091a8:	ee08 0a10 	vmov	s16, r0
 80091ac:	f001 f8a6 	bl	800a2fc <__mcmp>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	dc91      	bgt.n	80090d8 <_dtoa_r+0xaa8>
 80091b4:	d102      	bne.n	80091bc <_dtoa_r+0xb8c>
 80091b6:	f01a 0f01 	tst.w	sl, #1
 80091ba:	d18d      	bne.n	80090d8 <_dtoa_r+0xaa8>
 80091bc:	462b      	mov	r3, r5
 80091be:	461d      	mov	r5, r3
 80091c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091c4:	2a30      	cmp	r2, #48	; 0x30
 80091c6:	d0fa      	beq.n	80091be <_dtoa_r+0xb8e>
 80091c8:	e6d7      	b.n	8008f7a <_dtoa_r+0x94a>
 80091ca:	9a01      	ldr	r2, [sp, #4]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d184      	bne.n	80090da <_dtoa_r+0xaaa>
 80091d0:	9b00      	ldr	r3, [sp, #0]
 80091d2:	3301      	adds	r3, #1
 80091d4:	9300      	str	r3, [sp, #0]
 80091d6:	2331      	movs	r3, #49	; 0x31
 80091d8:	7013      	strb	r3, [r2, #0]
 80091da:	e6ce      	b.n	8008f7a <_dtoa_r+0x94a>
 80091dc:	4b09      	ldr	r3, [pc, #36]	; (8009204 <_dtoa_r+0xbd4>)
 80091de:	f7ff ba95 	b.w	800870c <_dtoa_r+0xdc>
 80091e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	f47f aa6e 	bne.w	80086c6 <_dtoa_r+0x96>
 80091ea:	4b07      	ldr	r3, [pc, #28]	; (8009208 <_dtoa_r+0xbd8>)
 80091ec:	f7ff ba8e 	b.w	800870c <_dtoa_r+0xdc>
 80091f0:	9b02      	ldr	r3, [sp, #8]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	dcae      	bgt.n	8009154 <_dtoa_r+0xb24>
 80091f6:	9b06      	ldr	r3, [sp, #24]
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	f73f aea8 	bgt.w	8008f4e <_dtoa_r+0x91e>
 80091fe:	e7a9      	b.n	8009154 <_dtoa_r+0xb24>
 8009200:	0800b6e0 	.word	0x0800b6e0
 8009204:	0800b4e4 	.word	0x0800b4e4
 8009208:	0800b661 	.word	0x0800b661

0800920c <__sflush_r>:
 800920c:	898a      	ldrh	r2, [r1, #12]
 800920e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009212:	4605      	mov	r5, r0
 8009214:	0710      	lsls	r0, r2, #28
 8009216:	460c      	mov	r4, r1
 8009218:	d458      	bmi.n	80092cc <__sflush_r+0xc0>
 800921a:	684b      	ldr	r3, [r1, #4]
 800921c:	2b00      	cmp	r3, #0
 800921e:	dc05      	bgt.n	800922c <__sflush_r+0x20>
 8009220:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009222:	2b00      	cmp	r3, #0
 8009224:	dc02      	bgt.n	800922c <__sflush_r+0x20>
 8009226:	2000      	movs	r0, #0
 8009228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800922c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800922e:	2e00      	cmp	r6, #0
 8009230:	d0f9      	beq.n	8009226 <__sflush_r+0x1a>
 8009232:	2300      	movs	r3, #0
 8009234:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009238:	682f      	ldr	r7, [r5, #0]
 800923a:	602b      	str	r3, [r5, #0]
 800923c:	d032      	beq.n	80092a4 <__sflush_r+0x98>
 800923e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009240:	89a3      	ldrh	r3, [r4, #12]
 8009242:	075a      	lsls	r2, r3, #29
 8009244:	d505      	bpl.n	8009252 <__sflush_r+0x46>
 8009246:	6863      	ldr	r3, [r4, #4]
 8009248:	1ac0      	subs	r0, r0, r3
 800924a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800924c:	b10b      	cbz	r3, 8009252 <__sflush_r+0x46>
 800924e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009250:	1ac0      	subs	r0, r0, r3
 8009252:	2300      	movs	r3, #0
 8009254:	4602      	mov	r2, r0
 8009256:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009258:	6a21      	ldr	r1, [r4, #32]
 800925a:	4628      	mov	r0, r5
 800925c:	47b0      	blx	r6
 800925e:	1c43      	adds	r3, r0, #1
 8009260:	89a3      	ldrh	r3, [r4, #12]
 8009262:	d106      	bne.n	8009272 <__sflush_r+0x66>
 8009264:	6829      	ldr	r1, [r5, #0]
 8009266:	291d      	cmp	r1, #29
 8009268:	d82c      	bhi.n	80092c4 <__sflush_r+0xb8>
 800926a:	4a2a      	ldr	r2, [pc, #168]	; (8009314 <__sflush_r+0x108>)
 800926c:	40ca      	lsrs	r2, r1
 800926e:	07d6      	lsls	r6, r2, #31
 8009270:	d528      	bpl.n	80092c4 <__sflush_r+0xb8>
 8009272:	2200      	movs	r2, #0
 8009274:	6062      	str	r2, [r4, #4]
 8009276:	04d9      	lsls	r1, r3, #19
 8009278:	6922      	ldr	r2, [r4, #16]
 800927a:	6022      	str	r2, [r4, #0]
 800927c:	d504      	bpl.n	8009288 <__sflush_r+0x7c>
 800927e:	1c42      	adds	r2, r0, #1
 8009280:	d101      	bne.n	8009286 <__sflush_r+0x7a>
 8009282:	682b      	ldr	r3, [r5, #0]
 8009284:	b903      	cbnz	r3, 8009288 <__sflush_r+0x7c>
 8009286:	6560      	str	r0, [r4, #84]	; 0x54
 8009288:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800928a:	602f      	str	r7, [r5, #0]
 800928c:	2900      	cmp	r1, #0
 800928e:	d0ca      	beq.n	8009226 <__sflush_r+0x1a>
 8009290:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009294:	4299      	cmp	r1, r3
 8009296:	d002      	beq.n	800929e <__sflush_r+0x92>
 8009298:	4628      	mov	r0, r5
 800929a:	f001 fa3b 	bl	800a714 <_free_r>
 800929e:	2000      	movs	r0, #0
 80092a0:	6360      	str	r0, [r4, #52]	; 0x34
 80092a2:	e7c1      	b.n	8009228 <__sflush_r+0x1c>
 80092a4:	6a21      	ldr	r1, [r4, #32]
 80092a6:	2301      	movs	r3, #1
 80092a8:	4628      	mov	r0, r5
 80092aa:	47b0      	blx	r6
 80092ac:	1c41      	adds	r1, r0, #1
 80092ae:	d1c7      	bne.n	8009240 <__sflush_r+0x34>
 80092b0:	682b      	ldr	r3, [r5, #0]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d0c4      	beq.n	8009240 <__sflush_r+0x34>
 80092b6:	2b1d      	cmp	r3, #29
 80092b8:	d001      	beq.n	80092be <__sflush_r+0xb2>
 80092ba:	2b16      	cmp	r3, #22
 80092bc:	d101      	bne.n	80092c2 <__sflush_r+0xb6>
 80092be:	602f      	str	r7, [r5, #0]
 80092c0:	e7b1      	b.n	8009226 <__sflush_r+0x1a>
 80092c2:	89a3      	ldrh	r3, [r4, #12]
 80092c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092c8:	81a3      	strh	r3, [r4, #12]
 80092ca:	e7ad      	b.n	8009228 <__sflush_r+0x1c>
 80092cc:	690f      	ldr	r7, [r1, #16]
 80092ce:	2f00      	cmp	r7, #0
 80092d0:	d0a9      	beq.n	8009226 <__sflush_r+0x1a>
 80092d2:	0793      	lsls	r3, r2, #30
 80092d4:	680e      	ldr	r6, [r1, #0]
 80092d6:	bf08      	it	eq
 80092d8:	694b      	ldreq	r3, [r1, #20]
 80092da:	600f      	str	r7, [r1, #0]
 80092dc:	bf18      	it	ne
 80092de:	2300      	movne	r3, #0
 80092e0:	eba6 0807 	sub.w	r8, r6, r7
 80092e4:	608b      	str	r3, [r1, #8]
 80092e6:	f1b8 0f00 	cmp.w	r8, #0
 80092ea:	dd9c      	ble.n	8009226 <__sflush_r+0x1a>
 80092ec:	6a21      	ldr	r1, [r4, #32]
 80092ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092f0:	4643      	mov	r3, r8
 80092f2:	463a      	mov	r2, r7
 80092f4:	4628      	mov	r0, r5
 80092f6:	47b0      	blx	r6
 80092f8:	2800      	cmp	r0, #0
 80092fa:	dc06      	bgt.n	800930a <__sflush_r+0xfe>
 80092fc:	89a3      	ldrh	r3, [r4, #12]
 80092fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009302:	81a3      	strh	r3, [r4, #12]
 8009304:	f04f 30ff 	mov.w	r0, #4294967295
 8009308:	e78e      	b.n	8009228 <__sflush_r+0x1c>
 800930a:	4407      	add	r7, r0
 800930c:	eba8 0800 	sub.w	r8, r8, r0
 8009310:	e7e9      	b.n	80092e6 <__sflush_r+0xda>
 8009312:	bf00      	nop
 8009314:	20400001 	.word	0x20400001

08009318 <_fflush_r>:
 8009318:	b538      	push	{r3, r4, r5, lr}
 800931a:	690b      	ldr	r3, [r1, #16]
 800931c:	4605      	mov	r5, r0
 800931e:	460c      	mov	r4, r1
 8009320:	b913      	cbnz	r3, 8009328 <_fflush_r+0x10>
 8009322:	2500      	movs	r5, #0
 8009324:	4628      	mov	r0, r5
 8009326:	bd38      	pop	{r3, r4, r5, pc}
 8009328:	b118      	cbz	r0, 8009332 <_fflush_r+0x1a>
 800932a:	6983      	ldr	r3, [r0, #24]
 800932c:	b90b      	cbnz	r3, 8009332 <_fflush_r+0x1a>
 800932e:	f000 f887 	bl	8009440 <__sinit>
 8009332:	4b14      	ldr	r3, [pc, #80]	; (8009384 <_fflush_r+0x6c>)
 8009334:	429c      	cmp	r4, r3
 8009336:	d11b      	bne.n	8009370 <_fflush_r+0x58>
 8009338:	686c      	ldr	r4, [r5, #4]
 800933a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d0ef      	beq.n	8009322 <_fflush_r+0xa>
 8009342:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009344:	07d0      	lsls	r0, r2, #31
 8009346:	d404      	bmi.n	8009352 <_fflush_r+0x3a>
 8009348:	0599      	lsls	r1, r3, #22
 800934a:	d402      	bmi.n	8009352 <_fflush_r+0x3a>
 800934c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800934e:	f000 fc88 	bl	8009c62 <__retarget_lock_acquire_recursive>
 8009352:	4628      	mov	r0, r5
 8009354:	4621      	mov	r1, r4
 8009356:	f7ff ff59 	bl	800920c <__sflush_r>
 800935a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800935c:	07da      	lsls	r2, r3, #31
 800935e:	4605      	mov	r5, r0
 8009360:	d4e0      	bmi.n	8009324 <_fflush_r+0xc>
 8009362:	89a3      	ldrh	r3, [r4, #12]
 8009364:	059b      	lsls	r3, r3, #22
 8009366:	d4dd      	bmi.n	8009324 <_fflush_r+0xc>
 8009368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800936a:	f000 fc7b 	bl	8009c64 <__retarget_lock_release_recursive>
 800936e:	e7d9      	b.n	8009324 <_fflush_r+0xc>
 8009370:	4b05      	ldr	r3, [pc, #20]	; (8009388 <_fflush_r+0x70>)
 8009372:	429c      	cmp	r4, r3
 8009374:	d101      	bne.n	800937a <_fflush_r+0x62>
 8009376:	68ac      	ldr	r4, [r5, #8]
 8009378:	e7df      	b.n	800933a <_fflush_r+0x22>
 800937a:	4b04      	ldr	r3, [pc, #16]	; (800938c <_fflush_r+0x74>)
 800937c:	429c      	cmp	r4, r3
 800937e:	bf08      	it	eq
 8009380:	68ec      	ldreq	r4, [r5, #12]
 8009382:	e7da      	b.n	800933a <_fflush_r+0x22>
 8009384:	0800b714 	.word	0x0800b714
 8009388:	0800b734 	.word	0x0800b734
 800938c:	0800b6f4 	.word	0x0800b6f4

08009390 <std>:
 8009390:	2300      	movs	r3, #0
 8009392:	b510      	push	{r4, lr}
 8009394:	4604      	mov	r4, r0
 8009396:	e9c0 3300 	strd	r3, r3, [r0]
 800939a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800939e:	6083      	str	r3, [r0, #8]
 80093a0:	8181      	strh	r1, [r0, #12]
 80093a2:	6643      	str	r3, [r0, #100]	; 0x64
 80093a4:	81c2      	strh	r2, [r0, #14]
 80093a6:	6183      	str	r3, [r0, #24]
 80093a8:	4619      	mov	r1, r3
 80093aa:	2208      	movs	r2, #8
 80093ac:	305c      	adds	r0, #92	; 0x5c
 80093ae:	f7fd fa11 	bl	80067d4 <memset>
 80093b2:	4b05      	ldr	r3, [pc, #20]	; (80093c8 <std+0x38>)
 80093b4:	6263      	str	r3, [r4, #36]	; 0x24
 80093b6:	4b05      	ldr	r3, [pc, #20]	; (80093cc <std+0x3c>)
 80093b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80093ba:	4b05      	ldr	r3, [pc, #20]	; (80093d0 <std+0x40>)
 80093bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80093be:	4b05      	ldr	r3, [pc, #20]	; (80093d4 <std+0x44>)
 80093c0:	6224      	str	r4, [r4, #32]
 80093c2:	6323      	str	r3, [r4, #48]	; 0x30
 80093c4:	bd10      	pop	{r4, pc}
 80093c6:	bf00      	nop
 80093c8:	0800ae71 	.word	0x0800ae71
 80093cc:	0800ae93 	.word	0x0800ae93
 80093d0:	0800aecb 	.word	0x0800aecb
 80093d4:	0800aeef 	.word	0x0800aeef

080093d8 <_cleanup_r>:
 80093d8:	4901      	ldr	r1, [pc, #4]	; (80093e0 <_cleanup_r+0x8>)
 80093da:	f000 b8af 	b.w	800953c <_fwalk_reent>
 80093de:	bf00      	nop
 80093e0:	08009319 	.word	0x08009319

080093e4 <__sfmoreglue>:
 80093e4:	b570      	push	{r4, r5, r6, lr}
 80093e6:	2268      	movs	r2, #104	; 0x68
 80093e8:	1e4d      	subs	r5, r1, #1
 80093ea:	4355      	muls	r5, r2
 80093ec:	460e      	mov	r6, r1
 80093ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80093f2:	f001 f9fb 	bl	800a7ec <_malloc_r>
 80093f6:	4604      	mov	r4, r0
 80093f8:	b140      	cbz	r0, 800940c <__sfmoreglue+0x28>
 80093fa:	2100      	movs	r1, #0
 80093fc:	e9c0 1600 	strd	r1, r6, [r0]
 8009400:	300c      	adds	r0, #12
 8009402:	60a0      	str	r0, [r4, #8]
 8009404:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009408:	f7fd f9e4 	bl	80067d4 <memset>
 800940c:	4620      	mov	r0, r4
 800940e:	bd70      	pop	{r4, r5, r6, pc}

08009410 <__sfp_lock_acquire>:
 8009410:	4801      	ldr	r0, [pc, #4]	; (8009418 <__sfp_lock_acquire+0x8>)
 8009412:	f000 bc26 	b.w	8009c62 <__retarget_lock_acquire_recursive>
 8009416:	bf00      	nop
 8009418:	20000499 	.word	0x20000499

0800941c <__sfp_lock_release>:
 800941c:	4801      	ldr	r0, [pc, #4]	; (8009424 <__sfp_lock_release+0x8>)
 800941e:	f000 bc21 	b.w	8009c64 <__retarget_lock_release_recursive>
 8009422:	bf00      	nop
 8009424:	20000499 	.word	0x20000499

08009428 <__sinit_lock_acquire>:
 8009428:	4801      	ldr	r0, [pc, #4]	; (8009430 <__sinit_lock_acquire+0x8>)
 800942a:	f000 bc1a 	b.w	8009c62 <__retarget_lock_acquire_recursive>
 800942e:	bf00      	nop
 8009430:	2000049a 	.word	0x2000049a

08009434 <__sinit_lock_release>:
 8009434:	4801      	ldr	r0, [pc, #4]	; (800943c <__sinit_lock_release+0x8>)
 8009436:	f000 bc15 	b.w	8009c64 <__retarget_lock_release_recursive>
 800943a:	bf00      	nop
 800943c:	2000049a 	.word	0x2000049a

08009440 <__sinit>:
 8009440:	b510      	push	{r4, lr}
 8009442:	4604      	mov	r4, r0
 8009444:	f7ff fff0 	bl	8009428 <__sinit_lock_acquire>
 8009448:	69a3      	ldr	r3, [r4, #24]
 800944a:	b11b      	cbz	r3, 8009454 <__sinit+0x14>
 800944c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009450:	f7ff bff0 	b.w	8009434 <__sinit_lock_release>
 8009454:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009458:	6523      	str	r3, [r4, #80]	; 0x50
 800945a:	4b13      	ldr	r3, [pc, #76]	; (80094a8 <__sinit+0x68>)
 800945c:	4a13      	ldr	r2, [pc, #76]	; (80094ac <__sinit+0x6c>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	62a2      	str	r2, [r4, #40]	; 0x28
 8009462:	42a3      	cmp	r3, r4
 8009464:	bf04      	itt	eq
 8009466:	2301      	moveq	r3, #1
 8009468:	61a3      	streq	r3, [r4, #24]
 800946a:	4620      	mov	r0, r4
 800946c:	f000 f820 	bl	80094b0 <__sfp>
 8009470:	6060      	str	r0, [r4, #4]
 8009472:	4620      	mov	r0, r4
 8009474:	f000 f81c 	bl	80094b0 <__sfp>
 8009478:	60a0      	str	r0, [r4, #8]
 800947a:	4620      	mov	r0, r4
 800947c:	f000 f818 	bl	80094b0 <__sfp>
 8009480:	2200      	movs	r2, #0
 8009482:	60e0      	str	r0, [r4, #12]
 8009484:	2104      	movs	r1, #4
 8009486:	6860      	ldr	r0, [r4, #4]
 8009488:	f7ff ff82 	bl	8009390 <std>
 800948c:	68a0      	ldr	r0, [r4, #8]
 800948e:	2201      	movs	r2, #1
 8009490:	2109      	movs	r1, #9
 8009492:	f7ff ff7d 	bl	8009390 <std>
 8009496:	68e0      	ldr	r0, [r4, #12]
 8009498:	2202      	movs	r2, #2
 800949a:	2112      	movs	r1, #18
 800949c:	f7ff ff78 	bl	8009390 <std>
 80094a0:	2301      	movs	r3, #1
 80094a2:	61a3      	str	r3, [r4, #24]
 80094a4:	e7d2      	b.n	800944c <__sinit+0xc>
 80094a6:	bf00      	nop
 80094a8:	0800b4d0 	.word	0x0800b4d0
 80094ac:	080093d9 	.word	0x080093d9

080094b0 <__sfp>:
 80094b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094b2:	4607      	mov	r7, r0
 80094b4:	f7ff ffac 	bl	8009410 <__sfp_lock_acquire>
 80094b8:	4b1e      	ldr	r3, [pc, #120]	; (8009534 <__sfp+0x84>)
 80094ba:	681e      	ldr	r6, [r3, #0]
 80094bc:	69b3      	ldr	r3, [r6, #24]
 80094be:	b913      	cbnz	r3, 80094c6 <__sfp+0x16>
 80094c0:	4630      	mov	r0, r6
 80094c2:	f7ff ffbd 	bl	8009440 <__sinit>
 80094c6:	3648      	adds	r6, #72	; 0x48
 80094c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80094cc:	3b01      	subs	r3, #1
 80094ce:	d503      	bpl.n	80094d8 <__sfp+0x28>
 80094d0:	6833      	ldr	r3, [r6, #0]
 80094d2:	b30b      	cbz	r3, 8009518 <__sfp+0x68>
 80094d4:	6836      	ldr	r6, [r6, #0]
 80094d6:	e7f7      	b.n	80094c8 <__sfp+0x18>
 80094d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80094dc:	b9d5      	cbnz	r5, 8009514 <__sfp+0x64>
 80094de:	4b16      	ldr	r3, [pc, #88]	; (8009538 <__sfp+0x88>)
 80094e0:	60e3      	str	r3, [r4, #12]
 80094e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80094e6:	6665      	str	r5, [r4, #100]	; 0x64
 80094e8:	f000 fbba 	bl	8009c60 <__retarget_lock_init_recursive>
 80094ec:	f7ff ff96 	bl	800941c <__sfp_lock_release>
 80094f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80094f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80094f8:	6025      	str	r5, [r4, #0]
 80094fa:	61a5      	str	r5, [r4, #24]
 80094fc:	2208      	movs	r2, #8
 80094fe:	4629      	mov	r1, r5
 8009500:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009504:	f7fd f966 	bl	80067d4 <memset>
 8009508:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800950c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009510:	4620      	mov	r0, r4
 8009512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009514:	3468      	adds	r4, #104	; 0x68
 8009516:	e7d9      	b.n	80094cc <__sfp+0x1c>
 8009518:	2104      	movs	r1, #4
 800951a:	4638      	mov	r0, r7
 800951c:	f7ff ff62 	bl	80093e4 <__sfmoreglue>
 8009520:	4604      	mov	r4, r0
 8009522:	6030      	str	r0, [r6, #0]
 8009524:	2800      	cmp	r0, #0
 8009526:	d1d5      	bne.n	80094d4 <__sfp+0x24>
 8009528:	f7ff ff78 	bl	800941c <__sfp_lock_release>
 800952c:	230c      	movs	r3, #12
 800952e:	603b      	str	r3, [r7, #0]
 8009530:	e7ee      	b.n	8009510 <__sfp+0x60>
 8009532:	bf00      	nop
 8009534:	0800b4d0 	.word	0x0800b4d0
 8009538:	ffff0001 	.word	0xffff0001

0800953c <_fwalk_reent>:
 800953c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009540:	4606      	mov	r6, r0
 8009542:	4688      	mov	r8, r1
 8009544:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009548:	2700      	movs	r7, #0
 800954a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800954e:	f1b9 0901 	subs.w	r9, r9, #1
 8009552:	d505      	bpl.n	8009560 <_fwalk_reent+0x24>
 8009554:	6824      	ldr	r4, [r4, #0]
 8009556:	2c00      	cmp	r4, #0
 8009558:	d1f7      	bne.n	800954a <_fwalk_reent+0xe>
 800955a:	4638      	mov	r0, r7
 800955c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009560:	89ab      	ldrh	r3, [r5, #12]
 8009562:	2b01      	cmp	r3, #1
 8009564:	d907      	bls.n	8009576 <_fwalk_reent+0x3a>
 8009566:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800956a:	3301      	adds	r3, #1
 800956c:	d003      	beq.n	8009576 <_fwalk_reent+0x3a>
 800956e:	4629      	mov	r1, r5
 8009570:	4630      	mov	r0, r6
 8009572:	47c0      	blx	r8
 8009574:	4307      	orrs	r7, r0
 8009576:	3568      	adds	r5, #104	; 0x68
 8009578:	e7e9      	b.n	800954e <_fwalk_reent+0x12>

0800957a <rshift>:
 800957a:	6903      	ldr	r3, [r0, #16]
 800957c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009584:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009588:	f100 0414 	add.w	r4, r0, #20
 800958c:	dd45      	ble.n	800961a <rshift+0xa0>
 800958e:	f011 011f 	ands.w	r1, r1, #31
 8009592:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009596:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800959a:	d10c      	bne.n	80095b6 <rshift+0x3c>
 800959c:	f100 0710 	add.w	r7, r0, #16
 80095a0:	4629      	mov	r1, r5
 80095a2:	42b1      	cmp	r1, r6
 80095a4:	d334      	bcc.n	8009610 <rshift+0x96>
 80095a6:	1a9b      	subs	r3, r3, r2
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	1eea      	subs	r2, r5, #3
 80095ac:	4296      	cmp	r6, r2
 80095ae:	bf38      	it	cc
 80095b0:	2300      	movcc	r3, #0
 80095b2:	4423      	add	r3, r4
 80095b4:	e015      	b.n	80095e2 <rshift+0x68>
 80095b6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80095ba:	f1c1 0820 	rsb	r8, r1, #32
 80095be:	40cf      	lsrs	r7, r1
 80095c0:	f105 0e04 	add.w	lr, r5, #4
 80095c4:	46a1      	mov	r9, r4
 80095c6:	4576      	cmp	r6, lr
 80095c8:	46f4      	mov	ip, lr
 80095ca:	d815      	bhi.n	80095f8 <rshift+0x7e>
 80095cc:	1a9a      	subs	r2, r3, r2
 80095ce:	0092      	lsls	r2, r2, #2
 80095d0:	3a04      	subs	r2, #4
 80095d2:	3501      	adds	r5, #1
 80095d4:	42ae      	cmp	r6, r5
 80095d6:	bf38      	it	cc
 80095d8:	2200      	movcc	r2, #0
 80095da:	18a3      	adds	r3, r4, r2
 80095dc:	50a7      	str	r7, [r4, r2]
 80095de:	b107      	cbz	r7, 80095e2 <rshift+0x68>
 80095e0:	3304      	adds	r3, #4
 80095e2:	1b1a      	subs	r2, r3, r4
 80095e4:	42a3      	cmp	r3, r4
 80095e6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80095ea:	bf08      	it	eq
 80095ec:	2300      	moveq	r3, #0
 80095ee:	6102      	str	r2, [r0, #16]
 80095f0:	bf08      	it	eq
 80095f2:	6143      	streq	r3, [r0, #20]
 80095f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095f8:	f8dc c000 	ldr.w	ip, [ip]
 80095fc:	fa0c fc08 	lsl.w	ip, ip, r8
 8009600:	ea4c 0707 	orr.w	r7, ip, r7
 8009604:	f849 7b04 	str.w	r7, [r9], #4
 8009608:	f85e 7b04 	ldr.w	r7, [lr], #4
 800960c:	40cf      	lsrs	r7, r1
 800960e:	e7da      	b.n	80095c6 <rshift+0x4c>
 8009610:	f851 cb04 	ldr.w	ip, [r1], #4
 8009614:	f847 cf04 	str.w	ip, [r7, #4]!
 8009618:	e7c3      	b.n	80095a2 <rshift+0x28>
 800961a:	4623      	mov	r3, r4
 800961c:	e7e1      	b.n	80095e2 <rshift+0x68>

0800961e <__hexdig_fun>:
 800961e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009622:	2b09      	cmp	r3, #9
 8009624:	d802      	bhi.n	800962c <__hexdig_fun+0xe>
 8009626:	3820      	subs	r0, #32
 8009628:	b2c0      	uxtb	r0, r0
 800962a:	4770      	bx	lr
 800962c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009630:	2b05      	cmp	r3, #5
 8009632:	d801      	bhi.n	8009638 <__hexdig_fun+0x1a>
 8009634:	3847      	subs	r0, #71	; 0x47
 8009636:	e7f7      	b.n	8009628 <__hexdig_fun+0xa>
 8009638:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800963c:	2b05      	cmp	r3, #5
 800963e:	d801      	bhi.n	8009644 <__hexdig_fun+0x26>
 8009640:	3827      	subs	r0, #39	; 0x27
 8009642:	e7f1      	b.n	8009628 <__hexdig_fun+0xa>
 8009644:	2000      	movs	r0, #0
 8009646:	4770      	bx	lr

08009648 <__gethex>:
 8009648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800964c:	ed2d 8b02 	vpush	{d8}
 8009650:	b089      	sub	sp, #36	; 0x24
 8009652:	ee08 0a10 	vmov	s16, r0
 8009656:	9304      	str	r3, [sp, #16]
 8009658:	4bb4      	ldr	r3, [pc, #720]	; (800992c <__gethex+0x2e4>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	9301      	str	r3, [sp, #4]
 800965e:	4618      	mov	r0, r3
 8009660:	468b      	mov	fp, r1
 8009662:	4690      	mov	r8, r2
 8009664:	f7f6 fdbc 	bl	80001e0 <strlen>
 8009668:	9b01      	ldr	r3, [sp, #4]
 800966a:	f8db 2000 	ldr.w	r2, [fp]
 800966e:	4403      	add	r3, r0
 8009670:	4682      	mov	sl, r0
 8009672:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009676:	9305      	str	r3, [sp, #20]
 8009678:	1c93      	adds	r3, r2, #2
 800967a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800967e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009682:	32fe      	adds	r2, #254	; 0xfe
 8009684:	18d1      	adds	r1, r2, r3
 8009686:	461f      	mov	r7, r3
 8009688:	f813 0b01 	ldrb.w	r0, [r3], #1
 800968c:	9100      	str	r1, [sp, #0]
 800968e:	2830      	cmp	r0, #48	; 0x30
 8009690:	d0f8      	beq.n	8009684 <__gethex+0x3c>
 8009692:	f7ff ffc4 	bl	800961e <__hexdig_fun>
 8009696:	4604      	mov	r4, r0
 8009698:	2800      	cmp	r0, #0
 800969a:	d13a      	bne.n	8009712 <__gethex+0xca>
 800969c:	9901      	ldr	r1, [sp, #4]
 800969e:	4652      	mov	r2, sl
 80096a0:	4638      	mov	r0, r7
 80096a2:	f001 fc28 	bl	800aef6 <strncmp>
 80096a6:	4605      	mov	r5, r0
 80096a8:	2800      	cmp	r0, #0
 80096aa:	d168      	bne.n	800977e <__gethex+0x136>
 80096ac:	f817 000a 	ldrb.w	r0, [r7, sl]
 80096b0:	eb07 060a 	add.w	r6, r7, sl
 80096b4:	f7ff ffb3 	bl	800961e <__hexdig_fun>
 80096b8:	2800      	cmp	r0, #0
 80096ba:	d062      	beq.n	8009782 <__gethex+0x13a>
 80096bc:	4633      	mov	r3, r6
 80096be:	7818      	ldrb	r0, [r3, #0]
 80096c0:	2830      	cmp	r0, #48	; 0x30
 80096c2:	461f      	mov	r7, r3
 80096c4:	f103 0301 	add.w	r3, r3, #1
 80096c8:	d0f9      	beq.n	80096be <__gethex+0x76>
 80096ca:	f7ff ffa8 	bl	800961e <__hexdig_fun>
 80096ce:	2301      	movs	r3, #1
 80096d0:	fab0 f480 	clz	r4, r0
 80096d4:	0964      	lsrs	r4, r4, #5
 80096d6:	4635      	mov	r5, r6
 80096d8:	9300      	str	r3, [sp, #0]
 80096da:	463a      	mov	r2, r7
 80096dc:	4616      	mov	r6, r2
 80096de:	3201      	adds	r2, #1
 80096e0:	7830      	ldrb	r0, [r6, #0]
 80096e2:	f7ff ff9c 	bl	800961e <__hexdig_fun>
 80096e6:	2800      	cmp	r0, #0
 80096e8:	d1f8      	bne.n	80096dc <__gethex+0x94>
 80096ea:	9901      	ldr	r1, [sp, #4]
 80096ec:	4652      	mov	r2, sl
 80096ee:	4630      	mov	r0, r6
 80096f0:	f001 fc01 	bl	800aef6 <strncmp>
 80096f4:	b980      	cbnz	r0, 8009718 <__gethex+0xd0>
 80096f6:	b94d      	cbnz	r5, 800970c <__gethex+0xc4>
 80096f8:	eb06 050a 	add.w	r5, r6, sl
 80096fc:	462a      	mov	r2, r5
 80096fe:	4616      	mov	r6, r2
 8009700:	3201      	adds	r2, #1
 8009702:	7830      	ldrb	r0, [r6, #0]
 8009704:	f7ff ff8b 	bl	800961e <__hexdig_fun>
 8009708:	2800      	cmp	r0, #0
 800970a:	d1f8      	bne.n	80096fe <__gethex+0xb6>
 800970c:	1bad      	subs	r5, r5, r6
 800970e:	00ad      	lsls	r5, r5, #2
 8009710:	e004      	b.n	800971c <__gethex+0xd4>
 8009712:	2400      	movs	r4, #0
 8009714:	4625      	mov	r5, r4
 8009716:	e7e0      	b.n	80096da <__gethex+0x92>
 8009718:	2d00      	cmp	r5, #0
 800971a:	d1f7      	bne.n	800970c <__gethex+0xc4>
 800971c:	7833      	ldrb	r3, [r6, #0]
 800971e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009722:	2b50      	cmp	r3, #80	; 0x50
 8009724:	d13b      	bne.n	800979e <__gethex+0x156>
 8009726:	7873      	ldrb	r3, [r6, #1]
 8009728:	2b2b      	cmp	r3, #43	; 0x2b
 800972a:	d02c      	beq.n	8009786 <__gethex+0x13e>
 800972c:	2b2d      	cmp	r3, #45	; 0x2d
 800972e:	d02e      	beq.n	800978e <__gethex+0x146>
 8009730:	1c71      	adds	r1, r6, #1
 8009732:	f04f 0900 	mov.w	r9, #0
 8009736:	7808      	ldrb	r0, [r1, #0]
 8009738:	f7ff ff71 	bl	800961e <__hexdig_fun>
 800973c:	1e43      	subs	r3, r0, #1
 800973e:	b2db      	uxtb	r3, r3
 8009740:	2b18      	cmp	r3, #24
 8009742:	d82c      	bhi.n	800979e <__gethex+0x156>
 8009744:	f1a0 0210 	sub.w	r2, r0, #16
 8009748:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800974c:	f7ff ff67 	bl	800961e <__hexdig_fun>
 8009750:	1e43      	subs	r3, r0, #1
 8009752:	b2db      	uxtb	r3, r3
 8009754:	2b18      	cmp	r3, #24
 8009756:	d91d      	bls.n	8009794 <__gethex+0x14c>
 8009758:	f1b9 0f00 	cmp.w	r9, #0
 800975c:	d000      	beq.n	8009760 <__gethex+0x118>
 800975e:	4252      	negs	r2, r2
 8009760:	4415      	add	r5, r2
 8009762:	f8cb 1000 	str.w	r1, [fp]
 8009766:	b1e4      	cbz	r4, 80097a2 <__gethex+0x15a>
 8009768:	9b00      	ldr	r3, [sp, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	bf14      	ite	ne
 800976e:	2700      	movne	r7, #0
 8009770:	2706      	moveq	r7, #6
 8009772:	4638      	mov	r0, r7
 8009774:	b009      	add	sp, #36	; 0x24
 8009776:	ecbd 8b02 	vpop	{d8}
 800977a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800977e:	463e      	mov	r6, r7
 8009780:	4625      	mov	r5, r4
 8009782:	2401      	movs	r4, #1
 8009784:	e7ca      	b.n	800971c <__gethex+0xd4>
 8009786:	f04f 0900 	mov.w	r9, #0
 800978a:	1cb1      	adds	r1, r6, #2
 800978c:	e7d3      	b.n	8009736 <__gethex+0xee>
 800978e:	f04f 0901 	mov.w	r9, #1
 8009792:	e7fa      	b.n	800978a <__gethex+0x142>
 8009794:	230a      	movs	r3, #10
 8009796:	fb03 0202 	mla	r2, r3, r2, r0
 800979a:	3a10      	subs	r2, #16
 800979c:	e7d4      	b.n	8009748 <__gethex+0x100>
 800979e:	4631      	mov	r1, r6
 80097a0:	e7df      	b.n	8009762 <__gethex+0x11a>
 80097a2:	1bf3      	subs	r3, r6, r7
 80097a4:	3b01      	subs	r3, #1
 80097a6:	4621      	mov	r1, r4
 80097a8:	2b07      	cmp	r3, #7
 80097aa:	dc0b      	bgt.n	80097c4 <__gethex+0x17c>
 80097ac:	ee18 0a10 	vmov	r0, s16
 80097b0:	f000 fad8 	bl	8009d64 <_Balloc>
 80097b4:	4604      	mov	r4, r0
 80097b6:	b940      	cbnz	r0, 80097ca <__gethex+0x182>
 80097b8:	4b5d      	ldr	r3, [pc, #372]	; (8009930 <__gethex+0x2e8>)
 80097ba:	4602      	mov	r2, r0
 80097bc:	21de      	movs	r1, #222	; 0xde
 80097be:	485d      	ldr	r0, [pc, #372]	; (8009934 <__gethex+0x2ec>)
 80097c0:	f001 fbcc 	bl	800af5c <__assert_func>
 80097c4:	3101      	adds	r1, #1
 80097c6:	105b      	asrs	r3, r3, #1
 80097c8:	e7ee      	b.n	80097a8 <__gethex+0x160>
 80097ca:	f100 0914 	add.w	r9, r0, #20
 80097ce:	f04f 0b00 	mov.w	fp, #0
 80097d2:	f1ca 0301 	rsb	r3, sl, #1
 80097d6:	f8cd 9008 	str.w	r9, [sp, #8]
 80097da:	f8cd b000 	str.w	fp, [sp]
 80097de:	9306      	str	r3, [sp, #24]
 80097e0:	42b7      	cmp	r7, r6
 80097e2:	d340      	bcc.n	8009866 <__gethex+0x21e>
 80097e4:	9802      	ldr	r0, [sp, #8]
 80097e6:	9b00      	ldr	r3, [sp, #0]
 80097e8:	f840 3b04 	str.w	r3, [r0], #4
 80097ec:	eba0 0009 	sub.w	r0, r0, r9
 80097f0:	1080      	asrs	r0, r0, #2
 80097f2:	0146      	lsls	r6, r0, #5
 80097f4:	6120      	str	r0, [r4, #16]
 80097f6:	4618      	mov	r0, r3
 80097f8:	f000 fba6 	bl	8009f48 <__hi0bits>
 80097fc:	1a30      	subs	r0, r6, r0
 80097fe:	f8d8 6000 	ldr.w	r6, [r8]
 8009802:	42b0      	cmp	r0, r6
 8009804:	dd63      	ble.n	80098ce <__gethex+0x286>
 8009806:	1b87      	subs	r7, r0, r6
 8009808:	4639      	mov	r1, r7
 800980a:	4620      	mov	r0, r4
 800980c:	f000 ff4a 	bl	800a6a4 <__any_on>
 8009810:	4682      	mov	sl, r0
 8009812:	b1a8      	cbz	r0, 8009840 <__gethex+0x1f8>
 8009814:	1e7b      	subs	r3, r7, #1
 8009816:	1159      	asrs	r1, r3, #5
 8009818:	f003 021f 	and.w	r2, r3, #31
 800981c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009820:	f04f 0a01 	mov.w	sl, #1
 8009824:	fa0a f202 	lsl.w	r2, sl, r2
 8009828:	420a      	tst	r2, r1
 800982a:	d009      	beq.n	8009840 <__gethex+0x1f8>
 800982c:	4553      	cmp	r3, sl
 800982e:	dd05      	ble.n	800983c <__gethex+0x1f4>
 8009830:	1eb9      	subs	r1, r7, #2
 8009832:	4620      	mov	r0, r4
 8009834:	f000 ff36 	bl	800a6a4 <__any_on>
 8009838:	2800      	cmp	r0, #0
 800983a:	d145      	bne.n	80098c8 <__gethex+0x280>
 800983c:	f04f 0a02 	mov.w	sl, #2
 8009840:	4639      	mov	r1, r7
 8009842:	4620      	mov	r0, r4
 8009844:	f7ff fe99 	bl	800957a <rshift>
 8009848:	443d      	add	r5, r7
 800984a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800984e:	42ab      	cmp	r3, r5
 8009850:	da4c      	bge.n	80098ec <__gethex+0x2a4>
 8009852:	ee18 0a10 	vmov	r0, s16
 8009856:	4621      	mov	r1, r4
 8009858:	f000 fac4 	bl	8009de4 <_Bfree>
 800985c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800985e:	2300      	movs	r3, #0
 8009860:	6013      	str	r3, [r2, #0]
 8009862:	27a3      	movs	r7, #163	; 0xa3
 8009864:	e785      	b.n	8009772 <__gethex+0x12a>
 8009866:	1e73      	subs	r3, r6, #1
 8009868:	9a05      	ldr	r2, [sp, #20]
 800986a:	9303      	str	r3, [sp, #12]
 800986c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009870:	4293      	cmp	r3, r2
 8009872:	d019      	beq.n	80098a8 <__gethex+0x260>
 8009874:	f1bb 0f20 	cmp.w	fp, #32
 8009878:	d107      	bne.n	800988a <__gethex+0x242>
 800987a:	9b02      	ldr	r3, [sp, #8]
 800987c:	9a00      	ldr	r2, [sp, #0]
 800987e:	f843 2b04 	str.w	r2, [r3], #4
 8009882:	9302      	str	r3, [sp, #8]
 8009884:	2300      	movs	r3, #0
 8009886:	9300      	str	r3, [sp, #0]
 8009888:	469b      	mov	fp, r3
 800988a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800988e:	f7ff fec6 	bl	800961e <__hexdig_fun>
 8009892:	9b00      	ldr	r3, [sp, #0]
 8009894:	f000 000f 	and.w	r0, r0, #15
 8009898:	fa00 f00b 	lsl.w	r0, r0, fp
 800989c:	4303      	orrs	r3, r0
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	f10b 0b04 	add.w	fp, fp, #4
 80098a4:	9b03      	ldr	r3, [sp, #12]
 80098a6:	e00d      	b.n	80098c4 <__gethex+0x27c>
 80098a8:	9b03      	ldr	r3, [sp, #12]
 80098aa:	9a06      	ldr	r2, [sp, #24]
 80098ac:	4413      	add	r3, r2
 80098ae:	42bb      	cmp	r3, r7
 80098b0:	d3e0      	bcc.n	8009874 <__gethex+0x22c>
 80098b2:	4618      	mov	r0, r3
 80098b4:	9901      	ldr	r1, [sp, #4]
 80098b6:	9307      	str	r3, [sp, #28]
 80098b8:	4652      	mov	r2, sl
 80098ba:	f001 fb1c 	bl	800aef6 <strncmp>
 80098be:	9b07      	ldr	r3, [sp, #28]
 80098c0:	2800      	cmp	r0, #0
 80098c2:	d1d7      	bne.n	8009874 <__gethex+0x22c>
 80098c4:	461e      	mov	r6, r3
 80098c6:	e78b      	b.n	80097e0 <__gethex+0x198>
 80098c8:	f04f 0a03 	mov.w	sl, #3
 80098cc:	e7b8      	b.n	8009840 <__gethex+0x1f8>
 80098ce:	da0a      	bge.n	80098e6 <__gethex+0x29e>
 80098d0:	1a37      	subs	r7, r6, r0
 80098d2:	4621      	mov	r1, r4
 80098d4:	ee18 0a10 	vmov	r0, s16
 80098d8:	463a      	mov	r2, r7
 80098da:	f000 fc9f 	bl	800a21c <__lshift>
 80098de:	1bed      	subs	r5, r5, r7
 80098e0:	4604      	mov	r4, r0
 80098e2:	f100 0914 	add.w	r9, r0, #20
 80098e6:	f04f 0a00 	mov.w	sl, #0
 80098ea:	e7ae      	b.n	800984a <__gethex+0x202>
 80098ec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80098f0:	42a8      	cmp	r0, r5
 80098f2:	dd72      	ble.n	80099da <__gethex+0x392>
 80098f4:	1b45      	subs	r5, r0, r5
 80098f6:	42ae      	cmp	r6, r5
 80098f8:	dc36      	bgt.n	8009968 <__gethex+0x320>
 80098fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d02a      	beq.n	8009958 <__gethex+0x310>
 8009902:	2b03      	cmp	r3, #3
 8009904:	d02c      	beq.n	8009960 <__gethex+0x318>
 8009906:	2b01      	cmp	r3, #1
 8009908:	d11c      	bne.n	8009944 <__gethex+0x2fc>
 800990a:	42ae      	cmp	r6, r5
 800990c:	d11a      	bne.n	8009944 <__gethex+0x2fc>
 800990e:	2e01      	cmp	r6, #1
 8009910:	d112      	bne.n	8009938 <__gethex+0x2f0>
 8009912:	9a04      	ldr	r2, [sp, #16]
 8009914:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009918:	6013      	str	r3, [r2, #0]
 800991a:	2301      	movs	r3, #1
 800991c:	6123      	str	r3, [r4, #16]
 800991e:	f8c9 3000 	str.w	r3, [r9]
 8009922:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009924:	2762      	movs	r7, #98	; 0x62
 8009926:	601c      	str	r4, [r3, #0]
 8009928:	e723      	b.n	8009772 <__gethex+0x12a>
 800992a:	bf00      	nop
 800992c:	0800b7bc 	.word	0x0800b7bc
 8009930:	0800b6e0 	.word	0x0800b6e0
 8009934:	0800b754 	.word	0x0800b754
 8009938:	1e71      	subs	r1, r6, #1
 800993a:	4620      	mov	r0, r4
 800993c:	f000 feb2 	bl	800a6a4 <__any_on>
 8009940:	2800      	cmp	r0, #0
 8009942:	d1e6      	bne.n	8009912 <__gethex+0x2ca>
 8009944:	ee18 0a10 	vmov	r0, s16
 8009948:	4621      	mov	r1, r4
 800994a:	f000 fa4b 	bl	8009de4 <_Bfree>
 800994e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009950:	2300      	movs	r3, #0
 8009952:	6013      	str	r3, [r2, #0]
 8009954:	2750      	movs	r7, #80	; 0x50
 8009956:	e70c      	b.n	8009772 <__gethex+0x12a>
 8009958:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800995a:	2b00      	cmp	r3, #0
 800995c:	d1f2      	bne.n	8009944 <__gethex+0x2fc>
 800995e:	e7d8      	b.n	8009912 <__gethex+0x2ca>
 8009960:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009962:	2b00      	cmp	r3, #0
 8009964:	d1d5      	bne.n	8009912 <__gethex+0x2ca>
 8009966:	e7ed      	b.n	8009944 <__gethex+0x2fc>
 8009968:	1e6f      	subs	r7, r5, #1
 800996a:	f1ba 0f00 	cmp.w	sl, #0
 800996e:	d131      	bne.n	80099d4 <__gethex+0x38c>
 8009970:	b127      	cbz	r7, 800997c <__gethex+0x334>
 8009972:	4639      	mov	r1, r7
 8009974:	4620      	mov	r0, r4
 8009976:	f000 fe95 	bl	800a6a4 <__any_on>
 800997a:	4682      	mov	sl, r0
 800997c:	117b      	asrs	r3, r7, #5
 800997e:	2101      	movs	r1, #1
 8009980:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009984:	f007 071f 	and.w	r7, r7, #31
 8009988:	fa01 f707 	lsl.w	r7, r1, r7
 800998c:	421f      	tst	r7, r3
 800998e:	4629      	mov	r1, r5
 8009990:	4620      	mov	r0, r4
 8009992:	bf18      	it	ne
 8009994:	f04a 0a02 	orrne.w	sl, sl, #2
 8009998:	1b76      	subs	r6, r6, r5
 800999a:	f7ff fdee 	bl	800957a <rshift>
 800999e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80099a2:	2702      	movs	r7, #2
 80099a4:	f1ba 0f00 	cmp.w	sl, #0
 80099a8:	d048      	beq.n	8009a3c <__gethex+0x3f4>
 80099aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80099ae:	2b02      	cmp	r3, #2
 80099b0:	d015      	beq.n	80099de <__gethex+0x396>
 80099b2:	2b03      	cmp	r3, #3
 80099b4:	d017      	beq.n	80099e6 <__gethex+0x39e>
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d109      	bne.n	80099ce <__gethex+0x386>
 80099ba:	f01a 0f02 	tst.w	sl, #2
 80099be:	d006      	beq.n	80099ce <__gethex+0x386>
 80099c0:	f8d9 0000 	ldr.w	r0, [r9]
 80099c4:	ea4a 0a00 	orr.w	sl, sl, r0
 80099c8:	f01a 0f01 	tst.w	sl, #1
 80099cc:	d10e      	bne.n	80099ec <__gethex+0x3a4>
 80099ce:	f047 0710 	orr.w	r7, r7, #16
 80099d2:	e033      	b.n	8009a3c <__gethex+0x3f4>
 80099d4:	f04f 0a01 	mov.w	sl, #1
 80099d8:	e7d0      	b.n	800997c <__gethex+0x334>
 80099da:	2701      	movs	r7, #1
 80099dc:	e7e2      	b.n	80099a4 <__gethex+0x35c>
 80099de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099e0:	f1c3 0301 	rsb	r3, r3, #1
 80099e4:	9315      	str	r3, [sp, #84]	; 0x54
 80099e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d0f0      	beq.n	80099ce <__gethex+0x386>
 80099ec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80099f0:	f104 0314 	add.w	r3, r4, #20
 80099f4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80099f8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80099fc:	f04f 0c00 	mov.w	ip, #0
 8009a00:	4618      	mov	r0, r3
 8009a02:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a06:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009a0a:	d01c      	beq.n	8009a46 <__gethex+0x3fe>
 8009a0c:	3201      	adds	r2, #1
 8009a0e:	6002      	str	r2, [r0, #0]
 8009a10:	2f02      	cmp	r7, #2
 8009a12:	f104 0314 	add.w	r3, r4, #20
 8009a16:	d13f      	bne.n	8009a98 <__gethex+0x450>
 8009a18:	f8d8 2000 	ldr.w	r2, [r8]
 8009a1c:	3a01      	subs	r2, #1
 8009a1e:	42b2      	cmp	r2, r6
 8009a20:	d10a      	bne.n	8009a38 <__gethex+0x3f0>
 8009a22:	1171      	asrs	r1, r6, #5
 8009a24:	2201      	movs	r2, #1
 8009a26:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009a2a:	f006 061f 	and.w	r6, r6, #31
 8009a2e:	fa02 f606 	lsl.w	r6, r2, r6
 8009a32:	421e      	tst	r6, r3
 8009a34:	bf18      	it	ne
 8009a36:	4617      	movne	r7, r2
 8009a38:	f047 0720 	orr.w	r7, r7, #32
 8009a3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a3e:	601c      	str	r4, [r3, #0]
 8009a40:	9b04      	ldr	r3, [sp, #16]
 8009a42:	601d      	str	r5, [r3, #0]
 8009a44:	e695      	b.n	8009772 <__gethex+0x12a>
 8009a46:	4299      	cmp	r1, r3
 8009a48:	f843 cc04 	str.w	ip, [r3, #-4]
 8009a4c:	d8d8      	bhi.n	8009a00 <__gethex+0x3b8>
 8009a4e:	68a3      	ldr	r3, [r4, #8]
 8009a50:	459b      	cmp	fp, r3
 8009a52:	db19      	blt.n	8009a88 <__gethex+0x440>
 8009a54:	6861      	ldr	r1, [r4, #4]
 8009a56:	ee18 0a10 	vmov	r0, s16
 8009a5a:	3101      	adds	r1, #1
 8009a5c:	f000 f982 	bl	8009d64 <_Balloc>
 8009a60:	4681      	mov	r9, r0
 8009a62:	b918      	cbnz	r0, 8009a6c <__gethex+0x424>
 8009a64:	4b1a      	ldr	r3, [pc, #104]	; (8009ad0 <__gethex+0x488>)
 8009a66:	4602      	mov	r2, r0
 8009a68:	2184      	movs	r1, #132	; 0x84
 8009a6a:	e6a8      	b.n	80097be <__gethex+0x176>
 8009a6c:	6922      	ldr	r2, [r4, #16]
 8009a6e:	3202      	adds	r2, #2
 8009a70:	f104 010c 	add.w	r1, r4, #12
 8009a74:	0092      	lsls	r2, r2, #2
 8009a76:	300c      	adds	r0, #12
 8009a78:	f7fc fe9e 	bl	80067b8 <memcpy>
 8009a7c:	4621      	mov	r1, r4
 8009a7e:	ee18 0a10 	vmov	r0, s16
 8009a82:	f000 f9af 	bl	8009de4 <_Bfree>
 8009a86:	464c      	mov	r4, r9
 8009a88:	6923      	ldr	r3, [r4, #16]
 8009a8a:	1c5a      	adds	r2, r3, #1
 8009a8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009a90:	6122      	str	r2, [r4, #16]
 8009a92:	2201      	movs	r2, #1
 8009a94:	615a      	str	r2, [r3, #20]
 8009a96:	e7bb      	b.n	8009a10 <__gethex+0x3c8>
 8009a98:	6922      	ldr	r2, [r4, #16]
 8009a9a:	455a      	cmp	r2, fp
 8009a9c:	dd0b      	ble.n	8009ab6 <__gethex+0x46e>
 8009a9e:	2101      	movs	r1, #1
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	f7ff fd6a 	bl	800957a <rshift>
 8009aa6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009aaa:	3501      	adds	r5, #1
 8009aac:	42ab      	cmp	r3, r5
 8009aae:	f6ff aed0 	blt.w	8009852 <__gethex+0x20a>
 8009ab2:	2701      	movs	r7, #1
 8009ab4:	e7c0      	b.n	8009a38 <__gethex+0x3f0>
 8009ab6:	f016 061f 	ands.w	r6, r6, #31
 8009aba:	d0fa      	beq.n	8009ab2 <__gethex+0x46a>
 8009abc:	4453      	add	r3, sl
 8009abe:	f1c6 0620 	rsb	r6, r6, #32
 8009ac2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009ac6:	f000 fa3f 	bl	8009f48 <__hi0bits>
 8009aca:	42b0      	cmp	r0, r6
 8009acc:	dbe7      	blt.n	8009a9e <__gethex+0x456>
 8009ace:	e7f0      	b.n	8009ab2 <__gethex+0x46a>
 8009ad0:	0800b6e0 	.word	0x0800b6e0

08009ad4 <L_shift>:
 8009ad4:	f1c2 0208 	rsb	r2, r2, #8
 8009ad8:	0092      	lsls	r2, r2, #2
 8009ada:	b570      	push	{r4, r5, r6, lr}
 8009adc:	f1c2 0620 	rsb	r6, r2, #32
 8009ae0:	6843      	ldr	r3, [r0, #4]
 8009ae2:	6804      	ldr	r4, [r0, #0]
 8009ae4:	fa03 f506 	lsl.w	r5, r3, r6
 8009ae8:	432c      	orrs	r4, r5
 8009aea:	40d3      	lsrs	r3, r2
 8009aec:	6004      	str	r4, [r0, #0]
 8009aee:	f840 3f04 	str.w	r3, [r0, #4]!
 8009af2:	4288      	cmp	r0, r1
 8009af4:	d3f4      	bcc.n	8009ae0 <L_shift+0xc>
 8009af6:	bd70      	pop	{r4, r5, r6, pc}

08009af8 <__match>:
 8009af8:	b530      	push	{r4, r5, lr}
 8009afa:	6803      	ldr	r3, [r0, #0]
 8009afc:	3301      	adds	r3, #1
 8009afe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b02:	b914      	cbnz	r4, 8009b0a <__match+0x12>
 8009b04:	6003      	str	r3, [r0, #0]
 8009b06:	2001      	movs	r0, #1
 8009b08:	bd30      	pop	{r4, r5, pc}
 8009b0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b0e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009b12:	2d19      	cmp	r5, #25
 8009b14:	bf98      	it	ls
 8009b16:	3220      	addls	r2, #32
 8009b18:	42a2      	cmp	r2, r4
 8009b1a:	d0f0      	beq.n	8009afe <__match+0x6>
 8009b1c:	2000      	movs	r0, #0
 8009b1e:	e7f3      	b.n	8009b08 <__match+0x10>

08009b20 <__hexnan>:
 8009b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b24:	680b      	ldr	r3, [r1, #0]
 8009b26:	115e      	asrs	r6, r3, #5
 8009b28:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009b2c:	f013 031f 	ands.w	r3, r3, #31
 8009b30:	b087      	sub	sp, #28
 8009b32:	bf18      	it	ne
 8009b34:	3604      	addne	r6, #4
 8009b36:	2500      	movs	r5, #0
 8009b38:	1f37      	subs	r7, r6, #4
 8009b3a:	4690      	mov	r8, r2
 8009b3c:	6802      	ldr	r2, [r0, #0]
 8009b3e:	9301      	str	r3, [sp, #4]
 8009b40:	4682      	mov	sl, r0
 8009b42:	f846 5c04 	str.w	r5, [r6, #-4]
 8009b46:	46b9      	mov	r9, r7
 8009b48:	463c      	mov	r4, r7
 8009b4a:	9502      	str	r5, [sp, #8]
 8009b4c:	46ab      	mov	fp, r5
 8009b4e:	7851      	ldrb	r1, [r2, #1]
 8009b50:	1c53      	adds	r3, r2, #1
 8009b52:	9303      	str	r3, [sp, #12]
 8009b54:	b341      	cbz	r1, 8009ba8 <__hexnan+0x88>
 8009b56:	4608      	mov	r0, r1
 8009b58:	9205      	str	r2, [sp, #20]
 8009b5a:	9104      	str	r1, [sp, #16]
 8009b5c:	f7ff fd5f 	bl	800961e <__hexdig_fun>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	d14f      	bne.n	8009c04 <__hexnan+0xe4>
 8009b64:	9904      	ldr	r1, [sp, #16]
 8009b66:	9a05      	ldr	r2, [sp, #20]
 8009b68:	2920      	cmp	r1, #32
 8009b6a:	d818      	bhi.n	8009b9e <__hexnan+0x7e>
 8009b6c:	9b02      	ldr	r3, [sp, #8]
 8009b6e:	459b      	cmp	fp, r3
 8009b70:	dd13      	ble.n	8009b9a <__hexnan+0x7a>
 8009b72:	454c      	cmp	r4, r9
 8009b74:	d206      	bcs.n	8009b84 <__hexnan+0x64>
 8009b76:	2d07      	cmp	r5, #7
 8009b78:	dc04      	bgt.n	8009b84 <__hexnan+0x64>
 8009b7a:	462a      	mov	r2, r5
 8009b7c:	4649      	mov	r1, r9
 8009b7e:	4620      	mov	r0, r4
 8009b80:	f7ff ffa8 	bl	8009ad4 <L_shift>
 8009b84:	4544      	cmp	r4, r8
 8009b86:	d950      	bls.n	8009c2a <__hexnan+0x10a>
 8009b88:	2300      	movs	r3, #0
 8009b8a:	f1a4 0904 	sub.w	r9, r4, #4
 8009b8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b92:	f8cd b008 	str.w	fp, [sp, #8]
 8009b96:	464c      	mov	r4, r9
 8009b98:	461d      	mov	r5, r3
 8009b9a:	9a03      	ldr	r2, [sp, #12]
 8009b9c:	e7d7      	b.n	8009b4e <__hexnan+0x2e>
 8009b9e:	2929      	cmp	r1, #41	; 0x29
 8009ba0:	d156      	bne.n	8009c50 <__hexnan+0x130>
 8009ba2:	3202      	adds	r2, #2
 8009ba4:	f8ca 2000 	str.w	r2, [sl]
 8009ba8:	f1bb 0f00 	cmp.w	fp, #0
 8009bac:	d050      	beq.n	8009c50 <__hexnan+0x130>
 8009bae:	454c      	cmp	r4, r9
 8009bb0:	d206      	bcs.n	8009bc0 <__hexnan+0xa0>
 8009bb2:	2d07      	cmp	r5, #7
 8009bb4:	dc04      	bgt.n	8009bc0 <__hexnan+0xa0>
 8009bb6:	462a      	mov	r2, r5
 8009bb8:	4649      	mov	r1, r9
 8009bba:	4620      	mov	r0, r4
 8009bbc:	f7ff ff8a 	bl	8009ad4 <L_shift>
 8009bc0:	4544      	cmp	r4, r8
 8009bc2:	d934      	bls.n	8009c2e <__hexnan+0x10e>
 8009bc4:	f1a8 0204 	sub.w	r2, r8, #4
 8009bc8:	4623      	mov	r3, r4
 8009bca:	f853 1b04 	ldr.w	r1, [r3], #4
 8009bce:	f842 1f04 	str.w	r1, [r2, #4]!
 8009bd2:	429f      	cmp	r7, r3
 8009bd4:	d2f9      	bcs.n	8009bca <__hexnan+0xaa>
 8009bd6:	1b3b      	subs	r3, r7, r4
 8009bd8:	f023 0303 	bic.w	r3, r3, #3
 8009bdc:	3304      	adds	r3, #4
 8009bde:	3401      	adds	r4, #1
 8009be0:	3e03      	subs	r6, #3
 8009be2:	42b4      	cmp	r4, r6
 8009be4:	bf88      	it	hi
 8009be6:	2304      	movhi	r3, #4
 8009be8:	4443      	add	r3, r8
 8009bea:	2200      	movs	r2, #0
 8009bec:	f843 2b04 	str.w	r2, [r3], #4
 8009bf0:	429f      	cmp	r7, r3
 8009bf2:	d2fb      	bcs.n	8009bec <__hexnan+0xcc>
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	b91b      	cbnz	r3, 8009c00 <__hexnan+0xe0>
 8009bf8:	4547      	cmp	r7, r8
 8009bfa:	d127      	bne.n	8009c4c <__hexnan+0x12c>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	603b      	str	r3, [r7, #0]
 8009c00:	2005      	movs	r0, #5
 8009c02:	e026      	b.n	8009c52 <__hexnan+0x132>
 8009c04:	3501      	adds	r5, #1
 8009c06:	2d08      	cmp	r5, #8
 8009c08:	f10b 0b01 	add.w	fp, fp, #1
 8009c0c:	dd06      	ble.n	8009c1c <__hexnan+0xfc>
 8009c0e:	4544      	cmp	r4, r8
 8009c10:	d9c3      	bls.n	8009b9a <__hexnan+0x7a>
 8009c12:	2300      	movs	r3, #0
 8009c14:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c18:	2501      	movs	r5, #1
 8009c1a:	3c04      	subs	r4, #4
 8009c1c:	6822      	ldr	r2, [r4, #0]
 8009c1e:	f000 000f 	and.w	r0, r0, #15
 8009c22:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009c26:	6022      	str	r2, [r4, #0]
 8009c28:	e7b7      	b.n	8009b9a <__hexnan+0x7a>
 8009c2a:	2508      	movs	r5, #8
 8009c2c:	e7b5      	b.n	8009b9a <__hexnan+0x7a>
 8009c2e:	9b01      	ldr	r3, [sp, #4]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d0df      	beq.n	8009bf4 <__hexnan+0xd4>
 8009c34:	f04f 32ff 	mov.w	r2, #4294967295
 8009c38:	f1c3 0320 	rsb	r3, r3, #32
 8009c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8009c40:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009c44:	401a      	ands	r2, r3
 8009c46:	f846 2c04 	str.w	r2, [r6, #-4]
 8009c4a:	e7d3      	b.n	8009bf4 <__hexnan+0xd4>
 8009c4c:	3f04      	subs	r7, #4
 8009c4e:	e7d1      	b.n	8009bf4 <__hexnan+0xd4>
 8009c50:	2004      	movs	r0, #4
 8009c52:	b007      	add	sp, #28
 8009c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009c58 <_localeconv_r>:
 8009c58:	4800      	ldr	r0, [pc, #0]	; (8009c5c <_localeconv_r+0x4>)
 8009c5a:	4770      	bx	lr
 8009c5c:	20000198 	.word	0x20000198

08009c60 <__retarget_lock_init_recursive>:
 8009c60:	4770      	bx	lr

08009c62 <__retarget_lock_acquire_recursive>:
 8009c62:	4770      	bx	lr

08009c64 <__retarget_lock_release_recursive>:
 8009c64:	4770      	bx	lr

08009c66 <__swhatbuf_r>:
 8009c66:	b570      	push	{r4, r5, r6, lr}
 8009c68:	460e      	mov	r6, r1
 8009c6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c6e:	2900      	cmp	r1, #0
 8009c70:	b096      	sub	sp, #88	; 0x58
 8009c72:	4614      	mov	r4, r2
 8009c74:	461d      	mov	r5, r3
 8009c76:	da08      	bge.n	8009c8a <__swhatbuf_r+0x24>
 8009c78:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	602a      	str	r2, [r5, #0]
 8009c80:	061a      	lsls	r2, r3, #24
 8009c82:	d410      	bmi.n	8009ca6 <__swhatbuf_r+0x40>
 8009c84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c88:	e00e      	b.n	8009ca8 <__swhatbuf_r+0x42>
 8009c8a:	466a      	mov	r2, sp
 8009c8c:	f001 f9a6 	bl	800afdc <_fstat_r>
 8009c90:	2800      	cmp	r0, #0
 8009c92:	dbf1      	blt.n	8009c78 <__swhatbuf_r+0x12>
 8009c94:	9a01      	ldr	r2, [sp, #4]
 8009c96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c9e:	425a      	negs	r2, r3
 8009ca0:	415a      	adcs	r2, r3
 8009ca2:	602a      	str	r2, [r5, #0]
 8009ca4:	e7ee      	b.n	8009c84 <__swhatbuf_r+0x1e>
 8009ca6:	2340      	movs	r3, #64	; 0x40
 8009ca8:	2000      	movs	r0, #0
 8009caa:	6023      	str	r3, [r4, #0]
 8009cac:	b016      	add	sp, #88	; 0x58
 8009cae:	bd70      	pop	{r4, r5, r6, pc}

08009cb0 <__smakebuf_r>:
 8009cb0:	898b      	ldrh	r3, [r1, #12]
 8009cb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009cb4:	079d      	lsls	r5, r3, #30
 8009cb6:	4606      	mov	r6, r0
 8009cb8:	460c      	mov	r4, r1
 8009cba:	d507      	bpl.n	8009ccc <__smakebuf_r+0x1c>
 8009cbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009cc0:	6023      	str	r3, [r4, #0]
 8009cc2:	6123      	str	r3, [r4, #16]
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	6163      	str	r3, [r4, #20]
 8009cc8:	b002      	add	sp, #8
 8009cca:	bd70      	pop	{r4, r5, r6, pc}
 8009ccc:	ab01      	add	r3, sp, #4
 8009cce:	466a      	mov	r2, sp
 8009cd0:	f7ff ffc9 	bl	8009c66 <__swhatbuf_r>
 8009cd4:	9900      	ldr	r1, [sp, #0]
 8009cd6:	4605      	mov	r5, r0
 8009cd8:	4630      	mov	r0, r6
 8009cda:	f000 fd87 	bl	800a7ec <_malloc_r>
 8009cde:	b948      	cbnz	r0, 8009cf4 <__smakebuf_r+0x44>
 8009ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ce4:	059a      	lsls	r2, r3, #22
 8009ce6:	d4ef      	bmi.n	8009cc8 <__smakebuf_r+0x18>
 8009ce8:	f023 0303 	bic.w	r3, r3, #3
 8009cec:	f043 0302 	orr.w	r3, r3, #2
 8009cf0:	81a3      	strh	r3, [r4, #12]
 8009cf2:	e7e3      	b.n	8009cbc <__smakebuf_r+0xc>
 8009cf4:	4b0d      	ldr	r3, [pc, #52]	; (8009d2c <__smakebuf_r+0x7c>)
 8009cf6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009cf8:	89a3      	ldrh	r3, [r4, #12]
 8009cfa:	6020      	str	r0, [r4, #0]
 8009cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d00:	81a3      	strh	r3, [r4, #12]
 8009d02:	9b00      	ldr	r3, [sp, #0]
 8009d04:	6163      	str	r3, [r4, #20]
 8009d06:	9b01      	ldr	r3, [sp, #4]
 8009d08:	6120      	str	r0, [r4, #16]
 8009d0a:	b15b      	cbz	r3, 8009d24 <__smakebuf_r+0x74>
 8009d0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d10:	4630      	mov	r0, r6
 8009d12:	f001 f975 	bl	800b000 <_isatty_r>
 8009d16:	b128      	cbz	r0, 8009d24 <__smakebuf_r+0x74>
 8009d18:	89a3      	ldrh	r3, [r4, #12]
 8009d1a:	f023 0303 	bic.w	r3, r3, #3
 8009d1e:	f043 0301 	orr.w	r3, r3, #1
 8009d22:	81a3      	strh	r3, [r4, #12]
 8009d24:	89a0      	ldrh	r0, [r4, #12]
 8009d26:	4305      	orrs	r5, r0
 8009d28:	81a5      	strh	r5, [r4, #12]
 8009d2a:	e7cd      	b.n	8009cc8 <__smakebuf_r+0x18>
 8009d2c:	080093d9 	.word	0x080093d9

08009d30 <malloc>:
 8009d30:	4b02      	ldr	r3, [pc, #8]	; (8009d3c <malloc+0xc>)
 8009d32:	4601      	mov	r1, r0
 8009d34:	6818      	ldr	r0, [r3, #0]
 8009d36:	f000 bd59 	b.w	800a7ec <_malloc_r>
 8009d3a:	bf00      	nop
 8009d3c:	20000040 	.word	0x20000040

08009d40 <__ascii_mbtowc>:
 8009d40:	b082      	sub	sp, #8
 8009d42:	b901      	cbnz	r1, 8009d46 <__ascii_mbtowc+0x6>
 8009d44:	a901      	add	r1, sp, #4
 8009d46:	b142      	cbz	r2, 8009d5a <__ascii_mbtowc+0x1a>
 8009d48:	b14b      	cbz	r3, 8009d5e <__ascii_mbtowc+0x1e>
 8009d4a:	7813      	ldrb	r3, [r2, #0]
 8009d4c:	600b      	str	r3, [r1, #0]
 8009d4e:	7812      	ldrb	r2, [r2, #0]
 8009d50:	1e10      	subs	r0, r2, #0
 8009d52:	bf18      	it	ne
 8009d54:	2001      	movne	r0, #1
 8009d56:	b002      	add	sp, #8
 8009d58:	4770      	bx	lr
 8009d5a:	4610      	mov	r0, r2
 8009d5c:	e7fb      	b.n	8009d56 <__ascii_mbtowc+0x16>
 8009d5e:	f06f 0001 	mvn.w	r0, #1
 8009d62:	e7f8      	b.n	8009d56 <__ascii_mbtowc+0x16>

08009d64 <_Balloc>:
 8009d64:	b570      	push	{r4, r5, r6, lr}
 8009d66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d68:	4604      	mov	r4, r0
 8009d6a:	460d      	mov	r5, r1
 8009d6c:	b976      	cbnz	r6, 8009d8c <_Balloc+0x28>
 8009d6e:	2010      	movs	r0, #16
 8009d70:	f7ff ffde 	bl	8009d30 <malloc>
 8009d74:	4602      	mov	r2, r0
 8009d76:	6260      	str	r0, [r4, #36]	; 0x24
 8009d78:	b920      	cbnz	r0, 8009d84 <_Balloc+0x20>
 8009d7a:	4b18      	ldr	r3, [pc, #96]	; (8009ddc <_Balloc+0x78>)
 8009d7c:	4818      	ldr	r0, [pc, #96]	; (8009de0 <_Balloc+0x7c>)
 8009d7e:	2166      	movs	r1, #102	; 0x66
 8009d80:	f001 f8ec 	bl	800af5c <__assert_func>
 8009d84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d88:	6006      	str	r6, [r0, #0]
 8009d8a:	60c6      	str	r6, [r0, #12]
 8009d8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009d8e:	68f3      	ldr	r3, [r6, #12]
 8009d90:	b183      	cbz	r3, 8009db4 <_Balloc+0x50>
 8009d92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009d9a:	b9b8      	cbnz	r0, 8009dcc <_Balloc+0x68>
 8009d9c:	2101      	movs	r1, #1
 8009d9e:	fa01 f605 	lsl.w	r6, r1, r5
 8009da2:	1d72      	adds	r2, r6, #5
 8009da4:	0092      	lsls	r2, r2, #2
 8009da6:	4620      	mov	r0, r4
 8009da8:	f000 fc9d 	bl	800a6e6 <_calloc_r>
 8009dac:	b160      	cbz	r0, 8009dc8 <_Balloc+0x64>
 8009dae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009db2:	e00e      	b.n	8009dd2 <_Balloc+0x6e>
 8009db4:	2221      	movs	r2, #33	; 0x21
 8009db6:	2104      	movs	r1, #4
 8009db8:	4620      	mov	r0, r4
 8009dba:	f000 fc94 	bl	800a6e6 <_calloc_r>
 8009dbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009dc0:	60f0      	str	r0, [r6, #12]
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d1e4      	bne.n	8009d92 <_Balloc+0x2e>
 8009dc8:	2000      	movs	r0, #0
 8009dca:	bd70      	pop	{r4, r5, r6, pc}
 8009dcc:	6802      	ldr	r2, [r0, #0]
 8009dce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009dd8:	e7f7      	b.n	8009dca <_Balloc+0x66>
 8009dda:	bf00      	nop
 8009ddc:	0800b66e 	.word	0x0800b66e
 8009de0:	0800b7d0 	.word	0x0800b7d0

08009de4 <_Bfree>:
 8009de4:	b570      	push	{r4, r5, r6, lr}
 8009de6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009de8:	4605      	mov	r5, r0
 8009dea:	460c      	mov	r4, r1
 8009dec:	b976      	cbnz	r6, 8009e0c <_Bfree+0x28>
 8009dee:	2010      	movs	r0, #16
 8009df0:	f7ff ff9e 	bl	8009d30 <malloc>
 8009df4:	4602      	mov	r2, r0
 8009df6:	6268      	str	r0, [r5, #36]	; 0x24
 8009df8:	b920      	cbnz	r0, 8009e04 <_Bfree+0x20>
 8009dfa:	4b09      	ldr	r3, [pc, #36]	; (8009e20 <_Bfree+0x3c>)
 8009dfc:	4809      	ldr	r0, [pc, #36]	; (8009e24 <_Bfree+0x40>)
 8009dfe:	218a      	movs	r1, #138	; 0x8a
 8009e00:	f001 f8ac 	bl	800af5c <__assert_func>
 8009e04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e08:	6006      	str	r6, [r0, #0]
 8009e0a:	60c6      	str	r6, [r0, #12]
 8009e0c:	b13c      	cbz	r4, 8009e1e <_Bfree+0x3a>
 8009e0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009e10:	6862      	ldr	r2, [r4, #4]
 8009e12:	68db      	ldr	r3, [r3, #12]
 8009e14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e18:	6021      	str	r1, [r4, #0]
 8009e1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e1e:	bd70      	pop	{r4, r5, r6, pc}
 8009e20:	0800b66e 	.word	0x0800b66e
 8009e24:	0800b7d0 	.word	0x0800b7d0

08009e28 <__multadd>:
 8009e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e2c:	690d      	ldr	r5, [r1, #16]
 8009e2e:	4607      	mov	r7, r0
 8009e30:	460c      	mov	r4, r1
 8009e32:	461e      	mov	r6, r3
 8009e34:	f101 0c14 	add.w	ip, r1, #20
 8009e38:	2000      	movs	r0, #0
 8009e3a:	f8dc 3000 	ldr.w	r3, [ip]
 8009e3e:	b299      	uxth	r1, r3
 8009e40:	fb02 6101 	mla	r1, r2, r1, r6
 8009e44:	0c1e      	lsrs	r6, r3, #16
 8009e46:	0c0b      	lsrs	r3, r1, #16
 8009e48:	fb02 3306 	mla	r3, r2, r6, r3
 8009e4c:	b289      	uxth	r1, r1
 8009e4e:	3001      	adds	r0, #1
 8009e50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009e54:	4285      	cmp	r5, r0
 8009e56:	f84c 1b04 	str.w	r1, [ip], #4
 8009e5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009e5e:	dcec      	bgt.n	8009e3a <__multadd+0x12>
 8009e60:	b30e      	cbz	r6, 8009ea6 <__multadd+0x7e>
 8009e62:	68a3      	ldr	r3, [r4, #8]
 8009e64:	42ab      	cmp	r3, r5
 8009e66:	dc19      	bgt.n	8009e9c <__multadd+0x74>
 8009e68:	6861      	ldr	r1, [r4, #4]
 8009e6a:	4638      	mov	r0, r7
 8009e6c:	3101      	adds	r1, #1
 8009e6e:	f7ff ff79 	bl	8009d64 <_Balloc>
 8009e72:	4680      	mov	r8, r0
 8009e74:	b928      	cbnz	r0, 8009e82 <__multadd+0x5a>
 8009e76:	4602      	mov	r2, r0
 8009e78:	4b0c      	ldr	r3, [pc, #48]	; (8009eac <__multadd+0x84>)
 8009e7a:	480d      	ldr	r0, [pc, #52]	; (8009eb0 <__multadd+0x88>)
 8009e7c:	21b5      	movs	r1, #181	; 0xb5
 8009e7e:	f001 f86d 	bl	800af5c <__assert_func>
 8009e82:	6922      	ldr	r2, [r4, #16]
 8009e84:	3202      	adds	r2, #2
 8009e86:	f104 010c 	add.w	r1, r4, #12
 8009e8a:	0092      	lsls	r2, r2, #2
 8009e8c:	300c      	adds	r0, #12
 8009e8e:	f7fc fc93 	bl	80067b8 <memcpy>
 8009e92:	4621      	mov	r1, r4
 8009e94:	4638      	mov	r0, r7
 8009e96:	f7ff ffa5 	bl	8009de4 <_Bfree>
 8009e9a:	4644      	mov	r4, r8
 8009e9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ea0:	3501      	adds	r5, #1
 8009ea2:	615e      	str	r6, [r3, #20]
 8009ea4:	6125      	str	r5, [r4, #16]
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009eac:	0800b6e0 	.word	0x0800b6e0
 8009eb0:	0800b7d0 	.word	0x0800b7d0

08009eb4 <__s2b>:
 8009eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009eb8:	460c      	mov	r4, r1
 8009eba:	4615      	mov	r5, r2
 8009ebc:	461f      	mov	r7, r3
 8009ebe:	2209      	movs	r2, #9
 8009ec0:	3308      	adds	r3, #8
 8009ec2:	4606      	mov	r6, r0
 8009ec4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ec8:	2100      	movs	r1, #0
 8009eca:	2201      	movs	r2, #1
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	db09      	blt.n	8009ee4 <__s2b+0x30>
 8009ed0:	4630      	mov	r0, r6
 8009ed2:	f7ff ff47 	bl	8009d64 <_Balloc>
 8009ed6:	b940      	cbnz	r0, 8009eea <__s2b+0x36>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	4b19      	ldr	r3, [pc, #100]	; (8009f40 <__s2b+0x8c>)
 8009edc:	4819      	ldr	r0, [pc, #100]	; (8009f44 <__s2b+0x90>)
 8009ede:	21ce      	movs	r1, #206	; 0xce
 8009ee0:	f001 f83c 	bl	800af5c <__assert_func>
 8009ee4:	0052      	lsls	r2, r2, #1
 8009ee6:	3101      	adds	r1, #1
 8009ee8:	e7f0      	b.n	8009ecc <__s2b+0x18>
 8009eea:	9b08      	ldr	r3, [sp, #32]
 8009eec:	6143      	str	r3, [r0, #20]
 8009eee:	2d09      	cmp	r5, #9
 8009ef0:	f04f 0301 	mov.w	r3, #1
 8009ef4:	6103      	str	r3, [r0, #16]
 8009ef6:	dd16      	ble.n	8009f26 <__s2b+0x72>
 8009ef8:	f104 0909 	add.w	r9, r4, #9
 8009efc:	46c8      	mov	r8, r9
 8009efe:	442c      	add	r4, r5
 8009f00:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009f04:	4601      	mov	r1, r0
 8009f06:	3b30      	subs	r3, #48	; 0x30
 8009f08:	220a      	movs	r2, #10
 8009f0a:	4630      	mov	r0, r6
 8009f0c:	f7ff ff8c 	bl	8009e28 <__multadd>
 8009f10:	45a0      	cmp	r8, r4
 8009f12:	d1f5      	bne.n	8009f00 <__s2b+0x4c>
 8009f14:	f1a5 0408 	sub.w	r4, r5, #8
 8009f18:	444c      	add	r4, r9
 8009f1a:	1b2d      	subs	r5, r5, r4
 8009f1c:	1963      	adds	r3, r4, r5
 8009f1e:	42bb      	cmp	r3, r7
 8009f20:	db04      	blt.n	8009f2c <__s2b+0x78>
 8009f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f26:	340a      	adds	r4, #10
 8009f28:	2509      	movs	r5, #9
 8009f2a:	e7f6      	b.n	8009f1a <__s2b+0x66>
 8009f2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009f30:	4601      	mov	r1, r0
 8009f32:	3b30      	subs	r3, #48	; 0x30
 8009f34:	220a      	movs	r2, #10
 8009f36:	4630      	mov	r0, r6
 8009f38:	f7ff ff76 	bl	8009e28 <__multadd>
 8009f3c:	e7ee      	b.n	8009f1c <__s2b+0x68>
 8009f3e:	bf00      	nop
 8009f40:	0800b6e0 	.word	0x0800b6e0
 8009f44:	0800b7d0 	.word	0x0800b7d0

08009f48 <__hi0bits>:
 8009f48:	0c03      	lsrs	r3, r0, #16
 8009f4a:	041b      	lsls	r3, r3, #16
 8009f4c:	b9d3      	cbnz	r3, 8009f84 <__hi0bits+0x3c>
 8009f4e:	0400      	lsls	r0, r0, #16
 8009f50:	2310      	movs	r3, #16
 8009f52:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009f56:	bf04      	itt	eq
 8009f58:	0200      	lsleq	r0, r0, #8
 8009f5a:	3308      	addeq	r3, #8
 8009f5c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009f60:	bf04      	itt	eq
 8009f62:	0100      	lsleq	r0, r0, #4
 8009f64:	3304      	addeq	r3, #4
 8009f66:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009f6a:	bf04      	itt	eq
 8009f6c:	0080      	lsleq	r0, r0, #2
 8009f6e:	3302      	addeq	r3, #2
 8009f70:	2800      	cmp	r0, #0
 8009f72:	db05      	blt.n	8009f80 <__hi0bits+0x38>
 8009f74:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009f78:	f103 0301 	add.w	r3, r3, #1
 8009f7c:	bf08      	it	eq
 8009f7e:	2320      	moveq	r3, #32
 8009f80:	4618      	mov	r0, r3
 8009f82:	4770      	bx	lr
 8009f84:	2300      	movs	r3, #0
 8009f86:	e7e4      	b.n	8009f52 <__hi0bits+0xa>

08009f88 <__lo0bits>:
 8009f88:	6803      	ldr	r3, [r0, #0]
 8009f8a:	f013 0207 	ands.w	r2, r3, #7
 8009f8e:	4601      	mov	r1, r0
 8009f90:	d00b      	beq.n	8009faa <__lo0bits+0x22>
 8009f92:	07da      	lsls	r2, r3, #31
 8009f94:	d423      	bmi.n	8009fde <__lo0bits+0x56>
 8009f96:	0798      	lsls	r0, r3, #30
 8009f98:	bf49      	itett	mi
 8009f9a:	085b      	lsrmi	r3, r3, #1
 8009f9c:	089b      	lsrpl	r3, r3, #2
 8009f9e:	2001      	movmi	r0, #1
 8009fa0:	600b      	strmi	r3, [r1, #0]
 8009fa2:	bf5c      	itt	pl
 8009fa4:	600b      	strpl	r3, [r1, #0]
 8009fa6:	2002      	movpl	r0, #2
 8009fa8:	4770      	bx	lr
 8009faa:	b298      	uxth	r0, r3
 8009fac:	b9a8      	cbnz	r0, 8009fda <__lo0bits+0x52>
 8009fae:	0c1b      	lsrs	r3, r3, #16
 8009fb0:	2010      	movs	r0, #16
 8009fb2:	b2da      	uxtb	r2, r3
 8009fb4:	b90a      	cbnz	r2, 8009fba <__lo0bits+0x32>
 8009fb6:	3008      	adds	r0, #8
 8009fb8:	0a1b      	lsrs	r3, r3, #8
 8009fba:	071a      	lsls	r2, r3, #28
 8009fbc:	bf04      	itt	eq
 8009fbe:	091b      	lsreq	r3, r3, #4
 8009fc0:	3004      	addeq	r0, #4
 8009fc2:	079a      	lsls	r2, r3, #30
 8009fc4:	bf04      	itt	eq
 8009fc6:	089b      	lsreq	r3, r3, #2
 8009fc8:	3002      	addeq	r0, #2
 8009fca:	07da      	lsls	r2, r3, #31
 8009fcc:	d403      	bmi.n	8009fd6 <__lo0bits+0x4e>
 8009fce:	085b      	lsrs	r3, r3, #1
 8009fd0:	f100 0001 	add.w	r0, r0, #1
 8009fd4:	d005      	beq.n	8009fe2 <__lo0bits+0x5a>
 8009fd6:	600b      	str	r3, [r1, #0]
 8009fd8:	4770      	bx	lr
 8009fda:	4610      	mov	r0, r2
 8009fdc:	e7e9      	b.n	8009fb2 <__lo0bits+0x2a>
 8009fde:	2000      	movs	r0, #0
 8009fe0:	4770      	bx	lr
 8009fe2:	2020      	movs	r0, #32
 8009fe4:	4770      	bx	lr
	...

08009fe8 <__i2b>:
 8009fe8:	b510      	push	{r4, lr}
 8009fea:	460c      	mov	r4, r1
 8009fec:	2101      	movs	r1, #1
 8009fee:	f7ff feb9 	bl	8009d64 <_Balloc>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	b928      	cbnz	r0, 800a002 <__i2b+0x1a>
 8009ff6:	4b05      	ldr	r3, [pc, #20]	; (800a00c <__i2b+0x24>)
 8009ff8:	4805      	ldr	r0, [pc, #20]	; (800a010 <__i2b+0x28>)
 8009ffa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009ffe:	f000 ffad 	bl	800af5c <__assert_func>
 800a002:	2301      	movs	r3, #1
 800a004:	6144      	str	r4, [r0, #20]
 800a006:	6103      	str	r3, [r0, #16]
 800a008:	bd10      	pop	{r4, pc}
 800a00a:	bf00      	nop
 800a00c:	0800b6e0 	.word	0x0800b6e0
 800a010:	0800b7d0 	.word	0x0800b7d0

0800a014 <__multiply>:
 800a014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a018:	4691      	mov	r9, r2
 800a01a:	690a      	ldr	r2, [r1, #16]
 800a01c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a020:	429a      	cmp	r2, r3
 800a022:	bfb8      	it	lt
 800a024:	460b      	movlt	r3, r1
 800a026:	460c      	mov	r4, r1
 800a028:	bfbc      	itt	lt
 800a02a:	464c      	movlt	r4, r9
 800a02c:	4699      	movlt	r9, r3
 800a02e:	6927      	ldr	r7, [r4, #16]
 800a030:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a034:	68a3      	ldr	r3, [r4, #8]
 800a036:	6861      	ldr	r1, [r4, #4]
 800a038:	eb07 060a 	add.w	r6, r7, sl
 800a03c:	42b3      	cmp	r3, r6
 800a03e:	b085      	sub	sp, #20
 800a040:	bfb8      	it	lt
 800a042:	3101      	addlt	r1, #1
 800a044:	f7ff fe8e 	bl	8009d64 <_Balloc>
 800a048:	b930      	cbnz	r0, 800a058 <__multiply+0x44>
 800a04a:	4602      	mov	r2, r0
 800a04c:	4b44      	ldr	r3, [pc, #272]	; (800a160 <__multiply+0x14c>)
 800a04e:	4845      	ldr	r0, [pc, #276]	; (800a164 <__multiply+0x150>)
 800a050:	f240 115d 	movw	r1, #349	; 0x15d
 800a054:	f000 ff82 	bl	800af5c <__assert_func>
 800a058:	f100 0514 	add.w	r5, r0, #20
 800a05c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a060:	462b      	mov	r3, r5
 800a062:	2200      	movs	r2, #0
 800a064:	4543      	cmp	r3, r8
 800a066:	d321      	bcc.n	800a0ac <__multiply+0x98>
 800a068:	f104 0314 	add.w	r3, r4, #20
 800a06c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a070:	f109 0314 	add.w	r3, r9, #20
 800a074:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a078:	9202      	str	r2, [sp, #8]
 800a07a:	1b3a      	subs	r2, r7, r4
 800a07c:	3a15      	subs	r2, #21
 800a07e:	f022 0203 	bic.w	r2, r2, #3
 800a082:	3204      	adds	r2, #4
 800a084:	f104 0115 	add.w	r1, r4, #21
 800a088:	428f      	cmp	r7, r1
 800a08a:	bf38      	it	cc
 800a08c:	2204      	movcc	r2, #4
 800a08e:	9201      	str	r2, [sp, #4]
 800a090:	9a02      	ldr	r2, [sp, #8]
 800a092:	9303      	str	r3, [sp, #12]
 800a094:	429a      	cmp	r2, r3
 800a096:	d80c      	bhi.n	800a0b2 <__multiply+0x9e>
 800a098:	2e00      	cmp	r6, #0
 800a09a:	dd03      	ble.n	800a0a4 <__multiply+0x90>
 800a09c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d05a      	beq.n	800a15a <__multiply+0x146>
 800a0a4:	6106      	str	r6, [r0, #16]
 800a0a6:	b005      	add	sp, #20
 800a0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ac:	f843 2b04 	str.w	r2, [r3], #4
 800a0b0:	e7d8      	b.n	800a064 <__multiply+0x50>
 800a0b2:	f8b3 a000 	ldrh.w	sl, [r3]
 800a0b6:	f1ba 0f00 	cmp.w	sl, #0
 800a0ba:	d024      	beq.n	800a106 <__multiply+0xf2>
 800a0bc:	f104 0e14 	add.w	lr, r4, #20
 800a0c0:	46a9      	mov	r9, r5
 800a0c2:	f04f 0c00 	mov.w	ip, #0
 800a0c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a0ca:	f8d9 1000 	ldr.w	r1, [r9]
 800a0ce:	fa1f fb82 	uxth.w	fp, r2
 800a0d2:	b289      	uxth	r1, r1
 800a0d4:	fb0a 110b 	mla	r1, sl, fp, r1
 800a0d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a0dc:	f8d9 2000 	ldr.w	r2, [r9]
 800a0e0:	4461      	add	r1, ip
 800a0e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a0e6:	fb0a c20b 	mla	r2, sl, fp, ip
 800a0ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a0ee:	b289      	uxth	r1, r1
 800a0f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a0f4:	4577      	cmp	r7, lr
 800a0f6:	f849 1b04 	str.w	r1, [r9], #4
 800a0fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a0fe:	d8e2      	bhi.n	800a0c6 <__multiply+0xb2>
 800a100:	9a01      	ldr	r2, [sp, #4]
 800a102:	f845 c002 	str.w	ip, [r5, r2]
 800a106:	9a03      	ldr	r2, [sp, #12]
 800a108:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a10c:	3304      	adds	r3, #4
 800a10e:	f1b9 0f00 	cmp.w	r9, #0
 800a112:	d020      	beq.n	800a156 <__multiply+0x142>
 800a114:	6829      	ldr	r1, [r5, #0]
 800a116:	f104 0c14 	add.w	ip, r4, #20
 800a11a:	46ae      	mov	lr, r5
 800a11c:	f04f 0a00 	mov.w	sl, #0
 800a120:	f8bc b000 	ldrh.w	fp, [ip]
 800a124:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a128:	fb09 220b 	mla	r2, r9, fp, r2
 800a12c:	4492      	add	sl, r2
 800a12e:	b289      	uxth	r1, r1
 800a130:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a134:	f84e 1b04 	str.w	r1, [lr], #4
 800a138:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a13c:	f8be 1000 	ldrh.w	r1, [lr]
 800a140:	0c12      	lsrs	r2, r2, #16
 800a142:	fb09 1102 	mla	r1, r9, r2, r1
 800a146:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a14a:	4567      	cmp	r7, ip
 800a14c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a150:	d8e6      	bhi.n	800a120 <__multiply+0x10c>
 800a152:	9a01      	ldr	r2, [sp, #4]
 800a154:	50a9      	str	r1, [r5, r2]
 800a156:	3504      	adds	r5, #4
 800a158:	e79a      	b.n	800a090 <__multiply+0x7c>
 800a15a:	3e01      	subs	r6, #1
 800a15c:	e79c      	b.n	800a098 <__multiply+0x84>
 800a15e:	bf00      	nop
 800a160:	0800b6e0 	.word	0x0800b6e0
 800a164:	0800b7d0 	.word	0x0800b7d0

0800a168 <__pow5mult>:
 800a168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a16c:	4615      	mov	r5, r2
 800a16e:	f012 0203 	ands.w	r2, r2, #3
 800a172:	4606      	mov	r6, r0
 800a174:	460f      	mov	r7, r1
 800a176:	d007      	beq.n	800a188 <__pow5mult+0x20>
 800a178:	4c25      	ldr	r4, [pc, #148]	; (800a210 <__pow5mult+0xa8>)
 800a17a:	3a01      	subs	r2, #1
 800a17c:	2300      	movs	r3, #0
 800a17e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a182:	f7ff fe51 	bl	8009e28 <__multadd>
 800a186:	4607      	mov	r7, r0
 800a188:	10ad      	asrs	r5, r5, #2
 800a18a:	d03d      	beq.n	800a208 <__pow5mult+0xa0>
 800a18c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a18e:	b97c      	cbnz	r4, 800a1b0 <__pow5mult+0x48>
 800a190:	2010      	movs	r0, #16
 800a192:	f7ff fdcd 	bl	8009d30 <malloc>
 800a196:	4602      	mov	r2, r0
 800a198:	6270      	str	r0, [r6, #36]	; 0x24
 800a19a:	b928      	cbnz	r0, 800a1a8 <__pow5mult+0x40>
 800a19c:	4b1d      	ldr	r3, [pc, #116]	; (800a214 <__pow5mult+0xac>)
 800a19e:	481e      	ldr	r0, [pc, #120]	; (800a218 <__pow5mult+0xb0>)
 800a1a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a1a4:	f000 feda 	bl	800af5c <__assert_func>
 800a1a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a1ac:	6004      	str	r4, [r0, #0]
 800a1ae:	60c4      	str	r4, [r0, #12]
 800a1b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a1b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a1b8:	b94c      	cbnz	r4, 800a1ce <__pow5mult+0x66>
 800a1ba:	f240 2171 	movw	r1, #625	; 0x271
 800a1be:	4630      	mov	r0, r6
 800a1c0:	f7ff ff12 	bl	8009fe8 <__i2b>
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a1ca:	4604      	mov	r4, r0
 800a1cc:	6003      	str	r3, [r0, #0]
 800a1ce:	f04f 0900 	mov.w	r9, #0
 800a1d2:	07eb      	lsls	r3, r5, #31
 800a1d4:	d50a      	bpl.n	800a1ec <__pow5mult+0x84>
 800a1d6:	4639      	mov	r1, r7
 800a1d8:	4622      	mov	r2, r4
 800a1da:	4630      	mov	r0, r6
 800a1dc:	f7ff ff1a 	bl	800a014 <__multiply>
 800a1e0:	4639      	mov	r1, r7
 800a1e2:	4680      	mov	r8, r0
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	f7ff fdfd 	bl	8009de4 <_Bfree>
 800a1ea:	4647      	mov	r7, r8
 800a1ec:	106d      	asrs	r5, r5, #1
 800a1ee:	d00b      	beq.n	800a208 <__pow5mult+0xa0>
 800a1f0:	6820      	ldr	r0, [r4, #0]
 800a1f2:	b938      	cbnz	r0, 800a204 <__pow5mult+0x9c>
 800a1f4:	4622      	mov	r2, r4
 800a1f6:	4621      	mov	r1, r4
 800a1f8:	4630      	mov	r0, r6
 800a1fa:	f7ff ff0b 	bl	800a014 <__multiply>
 800a1fe:	6020      	str	r0, [r4, #0]
 800a200:	f8c0 9000 	str.w	r9, [r0]
 800a204:	4604      	mov	r4, r0
 800a206:	e7e4      	b.n	800a1d2 <__pow5mult+0x6a>
 800a208:	4638      	mov	r0, r7
 800a20a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a20e:	bf00      	nop
 800a210:	0800b920 	.word	0x0800b920
 800a214:	0800b66e 	.word	0x0800b66e
 800a218:	0800b7d0 	.word	0x0800b7d0

0800a21c <__lshift>:
 800a21c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a220:	460c      	mov	r4, r1
 800a222:	6849      	ldr	r1, [r1, #4]
 800a224:	6923      	ldr	r3, [r4, #16]
 800a226:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a22a:	68a3      	ldr	r3, [r4, #8]
 800a22c:	4607      	mov	r7, r0
 800a22e:	4691      	mov	r9, r2
 800a230:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a234:	f108 0601 	add.w	r6, r8, #1
 800a238:	42b3      	cmp	r3, r6
 800a23a:	db0b      	blt.n	800a254 <__lshift+0x38>
 800a23c:	4638      	mov	r0, r7
 800a23e:	f7ff fd91 	bl	8009d64 <_Balloc>
 800a242:	4605      	mov	r5, r0
 800a244:	b948      	cbnz	r0, 800a25a <__lshift+0x3e>
 800a246:	4602      	mov	r2, r0
 800a248:	4b2a      	ldr	r3, [pc, #168]	; (800a2f4 <__lshift+0xd8>)
 800a24a:	482b      	ldr	r0, [pc, #172]	; (800a2f8 <__lshift+0xdc>)
 800a24c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a250:	f000 fe84 	bl	800af5c <__assert_func>
 800a254:	3101      	adds	r1, #1
 800a256:	005b      	lsls	r3, r3, #1
 800a258:	e7ee      	b.n	800a238 <__lshift+0x1c>
 800a25a:	2300      	movs	r3, #0
 800a25c:	f100 0114 	add.w	r1, r0, #20
 800a260:	f100 0210 	add.w	r2, r0, #16
 800a264:	4618      	mov	r0, r3
 800a266:	4553      	cmp	r3, sl
 800a268:	db37      	blt.n	800a2da <__lshift+0xbe>
 800a26a:	6920      	ldr	r0, [r4, #16]
 800a26c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a270:	f104 0314 	add.w	r3, r4, #20
 800a274:	f019 091f 	ands.w	r9, r9, #31
 800a278:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a27c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a280:	d02f      	beq.n	800a2e2 <__lshift+0xc6>
 800a282:	f1c9 0e20 	rsb	lr, r9, #32
 800a286:	468a      	mov	sl, r1
 800a288:	f04f 0c00 	mov.w	ip, #0
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	fa02 f209 	lsl.w	r2, r2, r9
 800a292:	ea42 020c 	orr.w	r2, r2, ip
 800a296:	f84a 2b04 	str.w	r2, [sl], #4
 800a29a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a29e:	4298      	cmp	r0, r3
 800a2a0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a2a4:	d8f2      	bhi.n	800a28c <__lshift+0x70>
 800a2a6:	1b03      	subs	r3, r0, r4
 800a2a8:	3b15      	subs	r3, #21
 800a2aa:	f023 0303 	bic.w	r3, r3, #3
 800a2ae:	3304      	adds	r3, #4
 800a2b0:	f104 0215 	add.w	r2, r4, #21
 800a2b4:	4290      	cmp	r0, r2
 800a2b6:	bf38      	it	cc
 800a2b8:	2304      	movcc	r3, #4
 800a2ba:	f841 c003 	str.w	ip, [r1, r3]
 800a2be:	f1bc 0f00 	cmp.w	ip, #0
 800a2c2:	d001      	beq.n	800a2c8 <__lshift+0xac>
 800a2c4:	f108 0602 	add.w	r6, r8, #2
 800a2c8:	3e01      	subs	r6, #1
 800a2ca:	4638      	mov	r0, r7
 800a2cc:	612e      	str	r6, [r5, #16]
 800a2ce:	4621      	mov	r1, r4
 800a2d0:	f7ff fd88 	bl	8009de4 <_Bfree>
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2da:	f842 0f04 	str.w	r0, [r2, #4]!
 800a2de:	3301      	adds	r3, #1
 800a2e0:	e7c1      	b.n	800a266 <__lshift+0x4a>
 800a2e2:	3904      	subs	r1, #4
 800a2e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a2ec:	4298      	cmp	r0, r3
 800a2ee:	d8f9      	bhi.n	800a2e4 <__lshift+0xc8>
 800a2f0:	e7ea      	b.n	800a2c8 <__lshift+0xac>
 800a2f2:	bf00      	nop
 800a2f4:	0800b6e0 	.word	0x0800b6e0
 800a2f8:	0800b7d0 	.word	0x0800b7d0

0800a2fc <__mcmp>:
 800a2fc:	b530      	push	{r4, r5, lr}
 800a2fe:	6902      	ldr	r2, [r0, #16]
 800a300:	690c      	ldr	r4, [r1, #16]
 800a302:	1b12      	subs	r2, r2, r4
 800a304:	d10e      	bne.n	800a324 <__mcmp+0x28>
 800a306:	f100 0314 	add.w	r3, r0, #20
 800a30a:	3114      	adds	r1, #20
 800a30c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a310:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a314:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a318:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a31c:	42a5      	cmp	r5, r4
 800a31e:	d003      	beq.n	800a328 <__mcmp+0x2c>
 800a320:	d305      	bcc.n	800a32e <__mcmp+0x32>
 800a322:	2201      	movs	r2, #1
 800a324:	4610      	mov	r0, r2
 800a326:	bd30      	pop	{r4, r5, pc}
 800a328:	4283      	cmp	r3, r0
 800a32a:	d3f3      	bcc.n	800a314 <__mcmp+0x18>
 800a32c:	e7fa      	b.n	800a324 <__mcmp+0x28>
 800a32e:	f04f 32ff 	mov.w	r2, #4294967295
 800a332:	e7f7      	b.n	800a324 <__mcmp+0x28>

0800a334 <__mdiff>:
 800a334:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a338:	460c      	mov	r4, r1
 800a33a:	4606      	mov	r6, r0
 800a33c:	4611      	mov	r1, r2
 800a33e:	4620      	mov	r0, r4
 800a340:	4690      	mov	r8, r2
 800a342:	f7ff ffdb 	bl	800a2fc <__mcmp>
 800a346:	1e05      	subs	r5, r0, #0
 800a348:	d110      	bne.n	800a36c <__mdiff+0x38>
 800a34a:	4629      	mov	r1, r5
 800a34c:	4630      	mov	r0, r6
 800a34e:	f7ff fd09 	bl	8009d64 <_Balloc>
 800a352:	b930      	cbnz	r0, 800a362 <__mdiff+0x2e>
 800a354:	4b3a      	ldr	r3, [pc, #232]	; (800a440 <__mdiff+0x10c>)
 800a356:	4602      	mov	r2, r0
 800a358:	f240 2132 	movw	r1, #562	; 0x232
 800a35c:	4839      	ldr	r0, [pc, #228]	; (800a444 <__mdiff+0x110>)
 800a35e:	f000 fdfd 	bl	800af5c <__assert_func>
 800a362:	2301      	movs	r3, #1
 800a364:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a368:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a36c:	bfa4      	itt	ge
 800a36e:	4643      	movge	r3, r8
 800a370:	46a0      	movge	r8, r4
 800a372:	4630      	mov	r0, r6
 800a374:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a378:	bfa6      	itte	ge
 800a37a:	461c      	movge	r4, r3
 800a37c:	2500      	movge	r5, #0
 800a37e:	2501      	movlt	r5, #1
 800a380:	f7ff fcf0 	bl	8009d64 <_Balloc>
 800a384:	b920      	cbnz	r0, 800a390 <__mdiff+0x5c>
 800a386:	4b2e      	ldr	r3, [pc, #184]	; (800a440 <__mdiff+0x10c>)
 800a388:	4602      	mov	r2, r0
 800a38a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a38e:	e7e5      	b.n	800a35c <__mdiff+0x28>
 800a390:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a394:	6926      	ldr	r6, [r4, #16]
 800a396:	60c5      	str	r5, [r0, #12]
 800a398:	f104 0914 	add.w	r9, r4, #20
 800a39c:	f108 0514 	add.w	r5, r8, #20
 800a3a0:	f100 0e14 	add.w	lr, r0, #20
 800a3a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a3a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a3ac:	f108 0210 	add.w	r2, r8, #16
 800a3b0:	46f2      	mov	sl, lr
 800a3b2:	2100      	movs	r1, #0
 800a3b4:	f859 3b04 	ldr.w	r3, [r9], #4
 800a3b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a3bc:	fa1f f883 	uxth.w	r8, r3
 800a3c0:	fa11 f18b 	uxtah	r1, r1, fp
 800a3c4:	0c1b      	lsrs	r3, r3, #16
 800a3c6:	eba1 0808 	sub.w	r8, r1, r8
 800a3ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a3ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a3d2:	fa1f f888 	uxth.w	r8, r8
 800a3d6:	1419      	asrs	r1, r3, #16
 800a3d8:	454e      	cmp	r6, r9
 800a3da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a3de:	f84a 3b04 	str.w	r3, [sl], #4
 800a3e2:	d8e7      	bhi.n	800a3b4 <__mdiff+0x80>
 800a3e4:	1b33      	subs	r3, r6, r4
 800a3e6:	3b15      	subs	r3, #21
 800a3e8:	f023 0303 	bic.w	r3, r3, #3
 800a3ec:	3304      	adds	r3, #4
 800a3ee:	3415      	adds	r4, #21
 800a3f0:	42a6      	cmp	r6, r4
 800a3f2:	bf38      	it	cc
 800a3f4:	2304      	movcc	r3, #4
 800a3f6:	441d      	add	r5, r3
 800a3f8:	4473      	add	r3, lr
 800a3fa:	469e      	mov	lr, r3
 800a3fc:	462e      	mov	r6, r5
 800a3fe:	4566      	cmp	r6, ip
 800a400:	d30e      	bcc.n	800a420 <__mdiff+0xec>
 800a402:	f10c 0203 	add.w	r2, ip, #3
 800a406:	1b52      	subs	r2, r2, r5
 800a408:	f022 0203 	bic.w	r2, r2, #3
 800a40c:	3d03      	subs	r5, #3
 800a40e:	45ac      	cmp	ip, r5
 800a410:	bf38      	it	cc
 800a412:	2200      	movcc	r2, #0
 800a414:	441a      	add	r2, r3
 800a416:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a41a:	b17b      	cbz	r3, 800a43c <__mdiff+0x108>
 800a41c:	6107      	str	r7, [r0, #16]
 800a41e:	e7a3      	b.n	800a368 <__mdiff+0x34>
 800a420:	f856 8b04 	ldr.w	r8, [r6], #4
 800a424:	fa11 f288 	uxtah	r2, r1, r8
 800a428:	1414      	asrs	r4, r2, #16
 800a42a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a42e:	b292      	uxth	r2, r2
 800a430:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a434:	f84e 2b04 	str.w	r2, [lr], #4
 800a438:	1421      	asrs	r1, r4, #16
 800a43a:	e7e0      	b.n	800a3fe <__mdiff+0xca>
 800a43c:	3f01      	subs	r7, #1
 800a43e:	e7ea      	b.n	800a416 <__mdiff+0xe2>
 800a440:	0800b6e0 	.word	0x0800b6e0
 800a444:	0800b7d0 	.word	0x0800b7d0

0800a448 <__ulp>:
 800a448:	b082      	sub	sp, #8
 800a44a:	ed8d 0b00 	vstr	d0, [sp]
 800a44e:	9b01      	ldr	r3, [sp, #4]
 800a450:	4912      	ldr	r1, [pc, #72]	; (800a49c <__ulp+0x54>)
 800a452:	4019      	ands	r1, r3
 800a454:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a458:	2900      	cmp	r1, #0
 800a45a:	dd05      	ble.n	800a468 <__ulp+0x20>
 800a45c:	2200      	movs	r2, #0
 800a45e:	460b      	mov	r3, r1
 800a460:	ec43 2b10 	vmov	d0, r2, r3
 800a464:	b002      	add	sp, #8
 800a466:	4770      	bx	lr
 800a468:	4249      	negs	r1, r1
 800a46a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a46e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a472:	f04f 0200 	mov.w	r2, #0
 800a476:	f04f 0300 	mov.w	r3, #0
 800a47a:	da04      	bge.n	800a486 <__ulp+0x3e>
 800a47c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a480:	fa41 f300 	asr.w	r3, r1, r0
 800a484:	e7ec      	b.n	800a460 <__ulp+0x18>
 800a486:	f1a0 0114 	sub.w	r1, r0, #20
 800a48a:	291e      	cmp	r1, #30
 800a48c:	bfda      	itte	le
 800a48e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a492:	fa20 f101 	lsrle.w	r1, r0, r1
 800a496:	2101      	movgt	r1, #1
 800a498:	460a      	mov	r2, r1
 800a49a:	e7e1      	b.n	800a460 <__ulp+0x18>
 800a49c:	7ff00000 	.word	0x7ff00000

0800a4a0 <__b2d>:
 800a4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4a2:	6905      	ldr	r5, [r0, #16]
 800a4a4:	f100 0714 	add.w	r7, r0, #20
 800a4a8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a4ac:	1f2e      	subs	r6, r5, #4
 800a4ae:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	f7ff fd48 	bl	8009f48 <__hi0bits>
 800a4b8:	f1c0 0320 	rsb	r3, r0, #32
 800a4bc:	280a      	cmp	r0, #10
 800a4be:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a53c <__b2d+0x9c>
 800a4c2:	600b      	str	r3, [r1, #0]
 800a4c4:	dc14      	bgt.n	800a4f0 <__b2d+0x50>
 800a4c6:	f1c0 0e0b 	rsb	lr, r0, #11
 800a4ca:	fa24 f10e 	lsr.w	r1, r4, lr
 800a4ce:	42b7      	cmp	r7, r6
 800a4d0:	ea41 030c 	orr.w	r3, r1, ip
 800a4d4:	bf34      	ite	cc
 800a4d6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a4da:	2100      	movcs	r1, #0
 800a4dc:	3015      	adds	r0, #21
 800a4de:	fa04 f000 	lsl.w	r0, r4, r0
 800a4e2:	fa21 f10e 	lsr.w	r1, r1, lr
 800a4e6:	ea40 0201 	orr.w	r2, r0, r1
 800a4ea:	ec43 2b10 	vmov	d0, r2, r3
 800a4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4f0:	42b7      	cmp	r7, r6
 800a4f2:	bf3a      	itte	cc
 800a4f4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a4f8:	f1a5 0608 	subcc.w	r6, r5, #8
 800a4fc:	2100      	movcs	r1, #0
 800a4fe:	380b      	subs	r0, #11
 800a500:	d017      	beq.n	800a532 <__b2d+0x92>
 800a502:	f1c0 0c20 	rsb	ip, r0, #32
 800a506:	fa04 f500 	lsl.w	r5, r4, r0
 800a50a:	42be      	cmp	r6, r7
 800a50c:	fa21 f40c 	lsr.w	r4, r1, ip
 800a510:	ea45 0504 	orr.w	r5, r5, r4
 800a514:	bf8c      	ite	hi
 800a516:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a51a:	2400      	movls	r4, #0
 800a51c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a520:	fa01 f000 	lsl.w	r0, r1, r0
 800a524:	fa24 f40c 	lsr.w	r4, r4, ip
 800a528:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a52c:	ea40 0204 	orr.w	r2, r0, r4
 800a530:	e7db      	b.n	800a4ea <__b2d+0x4a>
 800a532:	ea44 030c 	orr.w	r3, r4, ip
 800a536:	460a      	mov	r2, r1
 800a538:	e7d7      	b.n	800a4ea <__b2d+0x4a>
 800a53a:	bf00      	nop
 800a53c:	3ff00000 	.word	0x3ff00000

0800a540 <__d2b>:
 800a540:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a544:	4689      	mov	r9, r1
 800a546:	2101      	movs	r1, #1
 800a548:	ec57 6b10 	vmov	r6, r7, d0
 800a54c:	4690      	mov	r8, r2
 800a54e:	f7ff fc09 	bl	8009d64 <_Balloc>
 800a552:	4604      	mov	r4, r0
 800a554:	b930      	cbnz	r0, 800a564 <__d2b+0x24>
 800a556:	4602      	mov	r2, r0
 800a558:	4b25      	ldr	r3, [pc, #148]	; (800a5f0 <__d2b+0xb0>)
 800a55a:	4826      	ldr	r0, [pc, #152]	; (800a5f4 <__d2b+0xb4>)
 800a55c:	f240 310a 	movw	r1, #778	; 0x30a
 800a560:	f000 fcfc 	bl	800af5c <__assert_func>
 800a564:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a568:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a56c:	bb35      	cbnz	r5, 800a5bc <__d2b+0x7c>
 800a56e:	2e00      	cmp	r6, #0
 800a570:	9301      	str	r3, [sp, #4]
 800a572:	d028      	beq.n	800a5c6 <__d2b+0x86>
 800a574:	4668      	mov	r0, sp
 800a576:	9600      	str	r6, [sp, #0]
 800a578:	f7ff fd06 	bl	8009f88 <__lo0bits>
 800a57c:	9900      	ldr	r1, [sp, #0]
 800a57e:	b300      	cbz	r0, 800a5c2 <__d2b+0x82>
 800a580:	9a01      	ldr	r2, [sp, #4]
 800a582:	f1c0 0320 	rsb	r3, r0, #32
 800a586:	fa02 f303 	lsl.w	r3, r2, r3
 800a58a:	430b      	orrs	r3, r1
 800a58c:	40c2      	lsrs	r2, r0
 800a58e:	6163      	str	r3, [r4, #20]
 800a590:	9201      	str	r2, [sp, #4]
 800a592:	9b01      	ldr	r3, [sp, #4]
 800a594:	61a3      	str	r3, [r4, #24]
 800a596:	2b00      	cmp	r3, #0
 800a598:	bf14      	ite	ne
 800a59a:	2202      	movne	r2, #2
 800a59c:	2201      	moveq	r2, #1
 800a59e:	6122      	str	r2, [r4, #16]
 800a5a0:	b1d5      	cbz	r5, 800a5d8 <__d2b+0x98>
 800a5a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a5a6:	4405      	add	r5, r0
 800a5a8:	f8c9 5000 	str.w	r5, [r9]
 800a5ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a5b0:	f8c8 0000 	str.w	r0, [r8]
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	b003      	add	sp, #12
 800a5b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a5c0:	e7d5      	b.n	800a56e <__d2b+0x2e>
 800a5c2:	6161      	str	r1, [r4, #20]
 800a5c4:	e7e5      	b.n	800a592 <__d2b+0x52>
 800a5c6:	a801      	add	r0, sp, #4
 800a5c8:	f7ff fcde 	bl	8009f88 <__lo0bits>
 800a5cc:	9b01      	ldr	r3, [sp, #4]
 800a5ce:	6163      	str	r3, [r4, #20]
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	6122      	str	r2, [r4, #16]
 800a5d4:	3020      	adds	r0, #32
 800a5d6:	e7e3      	b.n	800a5a0 <__d2b+0x60>
 800a5d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a5dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a5e0:	f8c9 0000 	str.w	r0, [r9]
 800a5e4:	6918      	ldr	r0, [r3, #16]
 800a5e6:	f7ff fcaf 	bl	8009f48 <__hi0bits>
 800a5ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a5ee:	e7df      	b.n	800a5b0 <__d2b+0x70>
 800a5f0:	0800b6e0 	.word	0x0800b6e0
 800a5f4:	0800b7d0 	.word	0x0800b7d0

0800a5f8 <__ratio>:
 800a5f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5fc:	4688      	mov	r8, r1
 800a5fe:	4669      	mov	r1, sp
 800a600:	4681      	mov	r9, r0
 800a602:	f7ff ff4d 	bl	800a4a0 <__b2d>
 800a606:	a901      	add	r1, sp, #4
 800a608:	4640      	mov	r0, r8
 800a60a:	ec55 4b10 	vmov	r4, r5, d0
 800a60e:	f7ff ff47 	bl	800a4a0 <__b2d>
 800a612:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a616:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a61a:	eba3 0c02 	sub.w	ip, r3, r2
 800a61e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a622:	1a9b      	subs	r3, r3, r2
 800a624:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a628:	ec51 0b10 	vmov	r0, r1, d0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	bfd6      	itet	le
 800a630:	460a      	movle	r2, r1
 800a632:	462a      	movgt	r2, r5
 800a634:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a638:	468b      	mov	fp, r1
 800a63a:	462f      	mov	r7, r5
 800a63c:	bfd4      	ite	le
 800a63e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a642:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a646:	4620      	mov	r0, r4
 800a648:	ee10 2a10 	vmov	r2, s0
 800a64c:	465b      	mov	r3, fp
 800a64e:	4639      	mov	r1, r7
 800a650:	f7f6 f904 	bl	800085c <__aeabi_ddiv>
 800a654:	ec41 0b10 	vmov	d0, r0, r1
 800a658:	b003      	add	sp, #12
 800a65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a65e <__copybits>:
 800a65e:	3901      	subs	r1, #1
 800a660:	b570      	push	{r4, r5, r6, lr}
 800a662:	1149      	asrs	r1, r1, #5
 800a664:	6914      	ldr	r4, [r2, #16]
 800a666:	3101      	adds	r1, #1
 800a668:	f102 0314 	add.w	r3, r2, #20
 800a66c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a670:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a674:	1f05      	subs	r5, r0, #4
 800a676:	42a3      	cmp	r3, r4
 800a678:	d30c      	bcc.n	800a694 <__copybits+0x36>
 800a67a:	1aa3      	subs	r3, r4, r2
 800a67c:	3b11      	subs	r3, #17
 800a67e:	f023 0303 	bic.w	r3, r3, #3
 800a682:	3211      	adds	r2, #17
 800a684:	42a2      	cmp	r2, r4
 800a686:	bf88      	it	hi
 800a688:	2300      	movhi	r3, #0
 800a68a:	4418      	add	r0, r3
 800a68c:	2300      	movs	r3, #0
 800a68e:	4288      	cmp	r0, r1
 800a690:	d305      	bcc.n	800a69e <__copybits+0x40>
 800a692:	bd70      	pop	{r4, r5, r6, pc}
 800a694:	f853 6b04 	ldr.w	r6, [r3], #4
 800a698:	f845 6f04 	str.w	r6, [r5, #4]!
 800a69c:	e7eb      	b.n	800a676 <__copybits+0x18>
 800a69e:	f840 3b04 	str.w	r3, [r0], #4
 800a6a2:	e7f4      	b.n	800a68e <__copybits+0x30>

0800a6a4 <__any_on>:
 800a6a4:	f100 0214 	add.w	r2, r0, #20
 800a6a8:	6900      	ldr	r0, [r0, #16]
 800a6aa:	114b      	asrs	r3, r1, #5
 800a6ac:	4298      	cmp	r0, r3
 800a6ae:	b510      	push	{r4, lr}
 800a6b0:	db11      	blt.n	800a6d6 <__any_on+0x32>
 800a6b2:	dd0a      	ble.n	800a6ca <__any_on+0x26>
 800a6b4:	f011 011f 	ands.w	r1, r1, #31
 800a6b8:	d007      	beq.n	800a6ca <__any_on+0x26>
 800a6ba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a6be:	fa24 f001 	lsr.w	r0, r4, r1
 800a6c2:	fa00 f101 	lsl.w	r1, r0, r1
 800a6c6:	428c      	cmp	r4, r1
 800a6c8:	d10b      	bne.n	800a6e2 <__any_on+0x3e>
 800a6ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d803      	bhi.n	800a6da <__any_on+0x36>
 800a6d2:	2000      	movs	r0, #0
 800a6d4:	bd10      	pop	{r4, pc}
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	e7f7      	b.n	800a6ca <__any_on+0x26>
 800a6da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a6de:	2900      	cmp	r1, #0
 800a6e0:	d0f5      	beq.n	800a6ce <__any_on+0x2a>
 800a6e2:	2001      	movs	r0, #1
 800a6e4:	e7f6      	b.n	800a6d4 <__any_on+0x30>

0800a6e6 <_calloc_r>:
 800a6e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a6e8:	fba1 2402 	umull	r2, r4, r1, r2
 800a6ec:	b94c      	cbnz	r4, 800a702 <_calloc_r+0x1c>
 800a6ee:	4611      	mov	r1, r2
 800a6f0:	9201      	str	r2, [sp, #4]
 800a6f2:	f000 f87b 	bl	800a7ec <_malloc_r>
 800a6f6:	9a01      	ldr	r2, [sp, #4]
 800a6f8:	4605      	mov	r5, r0
 800a6fa:	b930      	cbnz	r0, 800a70a <_calloc_r+0x24>
 800a6fc:	4628      	mov	r0, r5
 800a6fe:	b003      	add	sp, #12
 800a700:	bd30      	pop	{r4, r5, pc}
 800a702:	220c      	movs	r2, #12
 800a704:	6002      	str	r2, [r0, #0]
 800a706:	2500      	movs	r5, #0
 800a708:	e7f8      	b.n	800a6fc <_calloc_r+0x16>
 800a70a:	4621      	mov	r1, r4
 800a70c:	f7fc f862 	bl	80067d4 <memset>
 800a710:	e7f4      	b.n	800a6fc <_calloc_r+0x16>
	...

0800a714 <_free_r>:
 800a714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a716:	2900      	cmp	r1, #0
 800a718:	d044      	beq.n	800a7a4 <_free_r+0x90>
 800a71a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a71e:	9001      	str	r0, [sp, #4]
 800a720:	2b00      	cmp	r3, #0
 800a722:	f1a1 0404 	sub.w	r4, r1, #4
 800a726:	bfb8      	it	lt
 800a728:	18e4      	addlt	r4, r4, r3
 800a72a:	f000 fca5 	bl	800b078 <__malloc_lock>
 800a72e:	4a1e      	ldr	r2, [pc, #120]	; (800a7a8 <_free_r+0x94>)
 800a730:	9801      	ldr	r0, [sp, #4]
 800a732:	6813      	ldr	r3, [r2, #0]
 800a734:	b933      	cbnz	r3, 800a744 <_free_r+0x30>
 800a736:	6063      	str	r3, [r4, #4]
 800a738:	6014      	str	r4, [r2, #0]
 800a73a:	b003      	add	sp, #12
 800a73c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a740:	f000 bca0 	b.w	800b084 <__malloc_unlock>
 800a744:	42a3      	cmp	r3, r4
 800a746:	d908      	bls.n	800a75a <_free_r+0x46>
 800a748:	6825      	ldr	r5, [r4, #0]
 800a74a:	1961      	adds	r1, r4, r5
 800a74c:	428b      	cmp	r3, r1
 800a74e:	bf01      	itttt	eq
 800a750:	6819      	ldreq	r1, [r3, #0]
 800a752:	685b      	ldreq	r3, [r3, #4]
 800a754:	1949      	addeq	r1, r1, r5
 800a756:	6021      	streq	r1, [r4, #0]
 800a758:	e7ed      	b.n	800a736 <_free_r+0x22>
 800a75a:	461a      	mov	r2, r3
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	b10b      	cbz	r3, 800a764 <_free_r+0x50>
 800a760:	42a3      	cmp	r3, r4
 800a762:	d9fa      	bls.n	800a75a <_free_r+0x46>
 800a764:	6811      	ldr	r1, [r2, #0]
 800a766:	1855      	adds	r5, r2, r1
 800a768:	42a5      	cmp	r5, r4
 800a76a:	d10b      	bne.n	800a784 <_free_r+0x70>
 800a76c:	6824      	ldr	r4, [r4, #0]
 800a76e:	4421      	add	r1, r4
 800a770:	1854      	adds	r4, r2, r1
 800a772:	42a3      	cmp	r3, r4
 800a774:	6011      	str	r1, [r2, #0]
 800a776:	d1e0      	bne.n	800a73a <_free_r+0x26>
 800a778:	681c      	ldr	r4, [r3, #0]
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	6053      	str	r3, [r2, #4]
 800a77e:	4421      	add	r1, r4
 800a780:	6011      	str	r1, [r2, #0]
 800a782:	e7da      	b.n	800a73a <_free_r+0x26>
 800a784:	d902      	bls.n	800a78c <_free_r+0x78>
 800a786:	230c      	movs	r3, #12
 800a788:	6003      	str	r3, [r0, #0]
 800a78a:	e7d6      	b.n	800a73a <_free_r+0x26>
 800a78c:	6825      	ldr	r5, [r4, #0]
 800a78e:	1961      	adds	r1, r4, r5
 800a790:	428b      	cmp	r3, r1
 800a792:	bf04      	itt	eq
 800a794:	6819      	ldreq	r1, [r3, #0]
 800a796:	685b      	ldreq	r3, [r3, #4]
 800a798:	6063      	str	r3, [r4, #4]
 800a79a:	bf04      	itt	eq
 800a79c:	1949      	addeq	r1, r1, r5
 800a79e:	6021      	streq	r1, [r4, #0]
 800a7a0:	6054      	str	r4, [r2, #4]
 800a7a2:	e7ca      	b.n	800a73a <_free_r+0x26>
 800a7a4:	b003      	add	sp, #12
 800a7a6:	bd30      	pop	{r4, r5, pc}
 800a7a8:	2000049c 	.word	0x2000049c

0800a7ac <sbrk_aligned>:
 800a7ac:	b570      	push	{r4, r5, r6, lr}
 800a7ae:	4e0e      	ldr	r6, [pc, #56]	; (800a7e8 <sbrk_aligned+0x3c>)
 800a7b0:	460c      	mov	r4, r1
 800a7b2:	6831      	ldr	r1, [r6, #0]
 800a7b4:	4605      	mov	r5, r0
 800a7b6:	b911      	cbnz	r1, 800a7be <sbrk_aligned+0x12>
 800a7b8:	f000 fb4a 	bl	800ae50 <_sbrk_r>
 800a7bc:	6030      	str	r0, [r6, #0]
 800a7be:	4621      	mov	r1, r4
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	f000 fb45 	bl	800ae50 <_sbrk_r>
 800a7c6:	1c43      	adds	r3, r0, #1
 800a7c8:	d00a      	beq.n	800a7e0 <sbrk_aligned+0x34>
 800a7ca:	1cc4      	adds	r4, r0, #3
 800a7cc:	f024 0403 	bic.w	r4, r4, #3
 800a7d0:	42a0      	cmp	r0, r4
 800a7d2:	d007      	beq.n	800a7e4 <sbrk_aligned+0x38>
 800a7d4:	1a21      	subs	r1, r4, r0
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	f000 fb3a 	bl	800ae50 <_sbrk_r>
 800a7dc:	3001      	adds	r0, #1
 800a7de:	d101      	bne.n	800a7e4 <sbrk_aligned+0x38>
 800a7e0:	f04f 34ff 	mov.w	r4, #4294967295
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	bd70      	pop	{r4, r5, r6, pc}
 800a7e8:	200004a0 	.word	0x200004a0

0800a7ec <_malloc_r>:
 800a7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7f0:	1ccd      	adds	r5, r1, #3
 800a7f2:	f025 0503 	bic.w	r5, r5, #3
 800a7f6:	3508      	adds	r5, #8
 800a7f8:	2d0c      	cmp	r5, #12
 800a7fa:	bf38      	it	cc
 800a7fc:	250c      	movcc	r5, #12
 800a7fe:	2d00      	cmp	r5, #0
 800a800:	4607      	mov	r7, r0
 800a802:	db01      	blt.n	800a808 <_malloc_r+0x1c>
 800a804:	42a9      	cmp	r1, r5
 800a806:	d905      	bls.n	800a814 <_malloc_r+0x28>
 800a808:	230c      	movs	r3, #12
 800a80a:	603b      	str	r3, [r7, #0]
 800a80c:	2600      	movs	r6, #0
 800a80e:	4630      	mov	r0, r6
 800a810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a814:	4e2e      	ldr	r6, [pc, #184]	; (800a8d0 <_malloc_r+0xe4>)
 800a816:	f000 fc2f 	bl	800b078 <__malloc_lock>
 800a81a:	6833      	ldr	r3, [r6, #0]
 800a81c:	461c      	mov	r4, r3
 800a81e:	bb34      	cbnz	r4, 800a86e <_malloc_r+0x82>
 800a820:	4629      	mov	r1, r5
 800a822:	4638      	mov	r0, r7
 800a824:	f7ff ffc2 	bl	800a7ac <sbrk_aligned>
 800a828:	1c43      	adds	r3, r0, #1
 800a82a:	4604      	mov	r4, r0
 800a82c:	d14d      	bne.n	800a8ca <_malloc_r+0xde>
 800a82e:	6834      	ldr	r4, [r6, #0]
 800a830:	4626      	mov	r6, r4
 800a832:	2e00      	cmp	r6, #0
 800a834:	d140      	bne.n	800a8b8 <_malloc_r+0xcc>
 800a836:	6823      	ldr	r3, [r4, #0]
 800a838:	4631      	mov	r1, r6
 800a83a:	4638      	mov	r0, r7
 800a83c:	eb04 0803 	add.w	r8, r4, r3
 800a840:	f000 fb06 	bl	800ae50 <_sbrk_r>
 800a844:	4580      	cmp	r8, r0
 800a846:	d13a      	bne.n	800a8be <_malloc_r+0xd2>
 800a848:	6821      	ldr	r1, [r4, #0]
 800a84a:	3503      	adds	r5, #3
 800a84c:	1a6d      	subs	r5, r5, r1
 800a84e:	f025 0503 	bic.w	r5, r5, #3
 800a852:	3508      	adds	r5, #8
 800a854:	2d0c      	cmp	r5, #12
 800a856:	bf38      	it	cc
 800a858:	250c      	movcc	r5, #12
 800a85a:	4629      	mov	r1, r5
 800a85c:	4638      	mov	r0, r7
 800a85e:	f7ff ffa5 	bl	800a7ac <sbrk_aligned>
 800a862:	3001      	adds	r0, #1
 800a864:	d02b      	beq.n	800a8be <_malloc_r+0xd2>
 800a866:	6823      	ldr	r3, [r4, #0]
 800a868:	442b      	add	r3, r5
 800a86a:	6023      	str	r3, [r4, #0]
 800a86c:	e00e      	b.n	800a88c <_malloc_r+0xa0>
 800a86e:	6822      	ldr	r2, [r4, #0]
 800a870:	1b52      	subs	r2, r2, r5
 800a872:	d41e      	bmi.n	800a8b2 <_malloc_r+0xc6>
 800a874:	2a0b      	cmp	r2, #11
 800a876:	d916      	bls.n	800a8a6 <_malloc_r+0xba>
 800a878:	1961      	adds	r1, r4, r5
 800a87a:	42a3      	cmp	r3, r4
 800a87c:	6025      	str	r5, [r4, #0]
 800a87e:	bf18      	it	ne
 800a880:	6059      	strne	r1, [r3, #4]
 800a882:	6863      	ldr	r3, [r4, #4]
 800a884:	bf08      	it	eq
 800a886:	6031      	streq	r1, [r6, #0]
 800a888:	5162      	str	r2, [r4, r5]
 800a88a:	604b      	str	r3, [r1, #4]
 800a88c:	4638      	mov	r0, r7
 800a88e:	f104 060b 	add.w	r6, r4, #11
 800a892:	f000 fbf7 	bl	800b084 <__malloc_unlock>
 800a896:	f026 0607 	bic.w	r6, r6, #7
 800a89a:	1d23      	adds	r3, r4, #4
 800a89c:	1af2      	subs	r2, r6, r3
 800a89e:	d0b6      	beq.n	800a80e <_malloc_r+0x22>
 800a8a0:	1b9b      	subs	r3, r3, r6
 800a8a2:	50a3      	str	r3, [r4, r2]
 800a8a4:	e7b3      	b.n	800a80e <_malloc_r+0x22>
 800a8a6:	6862      	ldr	r2, [r4, #4]
 800a8a8:	42a3      	cmp	r3, r4
 800a8aa:	bf0c      	ite	eq
 800a8ac:	6032      	streq	r2, [r6, #0]
 800a8ae:	605a      	strne	r2, [r3, #4]
 800a8b0:	e7ec      	b.n	800a88c <_malloc_r+0xa0>
 800a8b2:	4623      	mov	r3, r4
 800a8b4:	6864      	ldr	r4, [r4, #4]
 800a8b6:	e7b2      	b.n	800a81e <_malloc_r+0x32>
 800a8b8:	4634      	mov	r4, r6
 800a8ba:	6876      	ldr	r6, [r6, #4]
 800a8bc:	e7b9      	b.n	800a832 <_malloc_r+0x46>
 800a8be:	230c      	movs	r3, #12
 800a8c0:	603b      	str	r3, [r7, #0]
 800a8c2:	4638      	mov	r0, r7
 800a8c4:	f000 fbde 	bl	800b084 <__malloc_unlock>
 800a8c8:	e7a1      	b.n	800a80e <_malloc_r+0x22>
 800a8ca:	6025      	str	r5, [r4, #0]
 800a8cc:	e7de      	b.n	800a88c <_malloc_r+0xa0>
 800a8ce:	bf00      	nop
 800a8d0:	2000049c 	.word	0x2000049c

0800a8d4 <__ssputs_r>:
 800a8d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8d8:	688e      	ldr	r6, [r1, #8]
 800a8da:	429e      	cmp	r6, r3
 800a8dc:	4682      	mov	sl, r0
 800a8de:	460c      	mov	r4, r1
 800a8e0:	4690      	mov	r8, r2
 800a8e2:	461f      	mov	r7, r3
 800a8e4:	d838      	bhi.n	800a958 <__ssputs_r+0x84>
 800a8e6:	898a      	ldrh	r2, [r1, #12]
 800a8e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a8ec:	d032      	beq.n	800a954 <__ssputs_r+0x80>
 800a8ee:	6825      	ldr	r5, [r4, #0]
 800a8f0:	6909      	ldr	r1, [r1, #16]
 800a8f2:	eba5 0901 	sub.w	r9, r5, r1
 800a8f6:	6965      	ldr	r5, [r4, #20]
 800a8f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a900:	3301      	adds	r3, #1
 800a902:	444b      	add	r3, r9
 800a904:	106d      	asrs	r5, r5, #1
 800a906:	429d      	cmp	r5, r3
 800a908:	bf38      	it	cc
 800a90a:	461d      	movcc	r5, r3
 800a90c:	0553      	lsls	r3, r2, #21
 800a90e:	d531      	bpl.n	800a974 <__ssputs_r+0xa0>
 800a910:	4629      	mov	r1, r5
 800a912:	f7ff ff6b 	bl	800a7ec <_malloc_r>
 800a916:	4606      	mov	r6, r0
 800a918:	b950      	cbnz	r0, 800a930 <__ssputs_r+0x5c>
 800a91a:	230c      	movs	r3, #12
 800a91c:	f8ca 3000 	str.w	r3, [sl]
 800a920:	89a3      	ldrh	r3, [r4, #12]
 800a922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a926:	81a3      	strh	r3, [r4, #12]
 800a928:	f04f 30ff 	mov.w	r0, #4294967295
 800a92c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a930:	6921      	ldr	r1, [r4, #16]
 800a932:	464a      	mov	r2, r9
 800a934:	f7fb ff40 	bl	80067b8 <memcpy>
 800a938:	89a3      	ldrh	r3, [r4, #12]
 800a93a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a93e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a942:	81a3      	strh	r3, [r4, #12]
 800a944:	6126      	str	r6, [r4, #16]
 800a946:	6165      	str	r5, [r4, #20]
 800a948:	444e      	add	r6, r9
 800a94a:	eba5 0509 	sub.w	r5, r5, r9
 800a94e:	6026      	str	r6, [r4, #0]
 800a950:	60a5      	str	r5, [r4, #8]
 800a952:	463e      	mov	r6, r7
 800a954:	42be      	cmp	r6, r7
 800a956:	d900      	bls.n	800a95a <__ssputs_r+0x86>
 800a958:	463e      	mov	r6, r7
 800a95a:	6820      	ldr	r0, [r4, #0]
 800a95c:	4632      	mov	r2, r6
 800a95e:	4641      	mov	r1, r8
 800a960:	f000 fb70 	bl	800b044 <memmove>
 800a964:	68a3      	ldr	r3, [r4, #8]
 800a966:	1b9b      	subs	r3, r3, r6
 800a968:	60a3      	str	r3, [r4, #8]
 800a96a:	6823      	ldr	r3, [r4, #0]
 800a96c:	4433      	add	r3, r6
 800a96e:	6023      	str	r3, [r4, #0]
 800a970:	2000      	movs	r0, #0
 800a972:	e7db      	b.n	800a92c <__ssputs_r+0x58>
 800a974:	462a      	mov	r2, r5
 800a976:	f000 fb8b 	bl	800b090 <_realloc_r>
 800a97a:	4606      	mov	r6, r0
 800a97c:	2800      	cmp	r0, #0
 800a97e:	d1e1      	bne.n	800a944 <__ssputs_r+0x70>
 800a980:	6921      	ldr	r1, [r4, #16]
 800a982:	4650      	mov	r0, sl
 800a984:	f7ff fec6 	bl	800a714 <_free_r>
 800a988:	e7c7      	b.n	800a91a <__ssputs_r+0x46>
	...

0800a98c <_svfiprintf_r>:
 800a98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a990:	4698      	mov	r8, r3
 800a992:	898b      	ldrh	r3, [r1, #12]
 800a994:	061b      	lsls	r3, r3, #24
 800a996:	b09d      	sub	sp, #116	; 0x74
 800a998:	4607      	mov	r7, r0
 800a99a:	460d      	mov	r5, r1
 800a99c:	4614      	mov	r4, r2
 800a99e:	d50e      	bpl.n	800a9be <_svfiprintf_r+0x32>
 800a9a0:	690b      	ldr	r3, [r1, #16]
 800a9a2:	b963      	cbnz	r3, 800a9be <_svfiprintf_r+0x32>
 800a9a4:	2140      	movs	r1, #64	; 0x40
 800a9a6:	f7ff ff21 	bl	800a7ec <_malloc_r>
 800a9aa:	6028      	str	r0, [r5, #0]
 800a9ac:	6128      	str	r0, [r5, #16]
 800a9ae:	b920      	cbnz	r0, 800a9ba <_svfiprintf_r+0x2e>
 800a9b0:	230c      	movs	r3, #12
 800a9b2:	603b      	str	r3, [r7, #0]
 800a9b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b8:	e0d1      	b.n	800ab5e <_svfiprintf_r+0x1d2>
 800a9ba:	2340      	movs	r3, #64	; 0x40
 800a9bc:	616b      	str	r3, [r5, #20]
 800a9be:	2300      	movs	r3, #0
 800a9c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a9c2:	2320      	movs	r3, #32
 800a9c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9cc:	2330      	movs	r3, #48	; 0x30
 800a9ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ab78 <_svfiprintf_r+0x1ec>
 800a9d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9d6:	f04f 0901 	mov.w	r9, #1
 800a9da:	4623      	mov	r3, r4
 800a9dc:	469a      	mov	sl, r3
 800a9de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9e2:	b10a      	cbz	r2, 800a9e8 <_svfiprintf_r+0x5c>
 800a9e4:	2a25      	cmp	r2, #37	; 0x25
 800a9e6:	d1f9      	bne.n	800a9dc <_svfiprintf_r+0x50>
 800a9e8:	ebba 0b04 	subs.w	fp, sl, r4
 800a9ec:	d00b      	beq.n	800aa06 <_svfiprintf_r+0x7a>
 800a9ee:	465b      	mov	r3, fp
 800a9f0:	4622      	mov	r2, r4
 800a9f2:	4629      	mov	r1, r5
 800a9f4:	4638      	mov	r0, r7
 800a9f6:	f7ff ff6d 	bl	800a8d4 <__ssputs_r>
 800a9fa:	3001      	adds	r0, #1
 800a9fc:	f000 80aa 	beq.w	800ab54 <_svfiprintf_r+0x1c8>
 800aa00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa02:	445a      	add	r2, fp
 800aa04:	9209      	str	r2, [sp, #36]	; 0x24
 800aa06:	f89a 3000 	ldrb.w	r3, [sl]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	f000 80a2 	beq.w	800ab54 <_svfiprintf_r+0x1c8>
 800aa10:	2300      	movs	r3, #0
 800aa12:	f04f 32ff 	mov.w	r2, #4294967295
 800aa16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa1a:	f10a 0a01 	add.w	sl, sl, #1
 800aa1e:	9304      	str	r3, [sp, #16]
 800aa20:	9307      	str	r3, [sp, #28]
 800aa22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa26:	931a      	str	r3, [sp, #104]	; 0x68
 800aa28:	4654      	mov	r4, sl
 800aa2a:	2205      	movs	r2, #5
 800aa2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa30:	4851      	ldr	r0, [pc, #324]	; (800ab78 <_svfiprintf_r+0x1ec>)
 800aa32:	f7f5 fbdd 	bl	80001f0 <memchr>
 800aa36:	9a04      	ldr	r2, [sp, #16]
 800aa38:	b9d8      	cbnz	r0, 800aa72 <_svfiprintf_r+0xe6>
 800aa3a:	06d0      	lsls	r0, r2, #27
 800aa3c:	bf44      	itt	mi
 800aa3e:	2320      	movmi	r3, #32
 800aa40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa44:	0711      	lsls	r1, r2, #28
 800aa46:	bf44      	itt	mi
 800aa48:	232b      	movmi	r3, #43	; 0x2b
 800aa4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa4e:	f89a 3000 	ldrb.w	r3, [sl]
 800aa52:	2b2a      	cmp	r3, #42	; 0x2a
 800aa54:	d015      	beq.n	800aa82 <_svfiprintf_r+0xf6>
 800aa56:	9a07      	ldr	r2, [sp, #28]
 800aa58:	4654      	mov	r4, sl
 800aa5a:	2000      	movs	r0, #0
 800aa5c:	f04f 0c0a 	mov.w	ip, #10
 800aa60:	4621      	mov	r1, r4
 800aa62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa66:	3b30      	subs	r3, #48	; 0x30
 800aa68:	2b09      	cmp	r3, #9
 800aa6a:	d94e      	bls.n	800ab0a <_svfiprintf_r+0x17e>
 800aa6c:	b1b0      	cbz	r0, 800aa9c <_svfiprintf_r+0x110>
 800aa6e:	9207      	str	r2, [sp, #28]
 800aa70:	e014      	b.n	800aa9c <_svfiprintf_r+0x110>
 800aa72:	eba0 0308 	sub.w	r3, r0, r8
 800aa76:	fa09 f303 	lsl.w	r3, r9, r3
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	9304      	str	r3, [sp, #16]
 800aa7e:	46a2      	mov	sl, r4
 800aa80:	e7d2      	b.n	800aa28 <_svfiprintf_r+0x9c>
 800aa82:	9b03      	ldr	r3, [sp, #12]
 800aa84:	1d19      	adds	r1, r3, #4
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	9103      	str	r1, [sp, #12]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	bfbb      	ittet	lt
 800aa8e:	425b      	neglt	r3, r3
 800aa90:	f042 0202 	orrlt.w	r2, r2, #2
 800aa94:	9307      	strge	r3, [sp, #28]
 800aa96:	9307      	strlt	r3, [sp, #28]
 800aa98:	bfb8      	it	lt
 800aa9a:	9204      	strlt	r2, [sp, #16]
 800aa9c:	7823      	ldrb	r3, [r4, #0]
 800aa9e:	2b2e      	cmp	r3, #46	; 0x2e
 800aaa0:	d10c      	bne.n	800aabc <_svfiprintf_r+0x130>
 800aaa2:	7863      	ldrb	r3, [r4, #1]
 800aaa4:	2b2a      	cmp	r3, #42	; 0x2a
 800aaa6:	d135      	bne.n	800ab14 <_svfiprintf_r+0x188>
 800aaa8:	9b03      	ldr	r3, [sp, #12]
 800aaaa:	1d1a      	adds	r2, r3, #4
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	9203      	str	r2, [sp, #12]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	bfb8      	it	lt
 800aab4:	f04f 33ff 	movlt.w	r3, #4294967295
 800aab8:	3402      	adds	r4, #2
 800aaba:	9305      	str	r3, [sp, #20]
 800aabc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ab88 <_svfiprintf_r+0x1fc>
 800aac0:	7821      	ldrb	r1, [r4, #0]
 800aac2:	2203      	movs	r2, #3
 800aac4:	4650      	mov	r0, sl
 800aac6:	f7f5 fb93 	bl	80001f0 <memchr>
 800aaca:	b140      	cbz	r0, 800aade <_svfiprintf_r+0x152>
 800aacc:	2340      	movs	r3, #64	; 0x40
 800aace:	eba0 000a 	sub.w	r0, r0, sl
 800aad2:	fa03 f000 	lsl.w	r0, r3, r0
 800aad6:	9b04      	ldr	r3, [sp, #16]
 800aad8:	4303      	orrs	r3, r0
 800aada:	3401      	adds	r4, #1
 800aadc:	9304      	str	r3, [sp, #16]
 800aade:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aae2:	4826      	ldr	r0, [pc, #152]	; (800ab7c <_svfiprintf_r+0x1f0>)
 800aae4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aae8:	2206      	movs	r2, #6
 800aaea:	f7f5 fb81 	bl	80001f0 <memchr>
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	d038      	beq.n	800ab64 <_svfiprintf_r+0x1d8>
 800aaf2:	4b23      	ldr	r3, [pc, #140]	; (800ab80 <_svfiprintf_r+0x1f4>)
 800aaf4:	bb1b      	cbnz	r3, 800ab3e <_svfiprintf_r+0x1b2>
 800aaf6:	9b03      	ldr	r3, [sp, #12]
 800aaf8:	3307      	adds	r3, #7
 800aafa:	f023 0307 	bic.w	r3, r3, #7
 800aafe:	3308      	adds	r3, #8
 800ab00:	9303      	str	r3, [sp, #12]
 800ab02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab04:	4433      	add	r3, r6
 800ab06:	9309      	str	r3, [sp, #36]	; 0x24
 800ab08:	e767      	b.n	800a9da <_svfiprintf_r+0x4e>
 800ab0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab0e:	460c      	mov	r4, r1
 800ab10:	2001      	movs	r0, #1
 800ab12:	e7a5      	b.n	800aa60 <_svfiprintf_r+0xd4>
 800ab14:	2300      	movs	r3, #0
 800ab16:	3401      	adds	r4, #1
 800ab18:	9305      	str	r3, [sp, #20]
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	f04f 0c0a 	mov.w	ip, #10
 800ab20:	4620      	mov	r0, r4
 800ab22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab26:	3a30      	subs	r2, #48	; 0x30
 800ab28:	2a09      	cmp	r2, #9
 800ab2a:	d903      	bls.n	800ab34 <_svfiprintf_r+0x1a8>
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d0c5      	beq.n	800aabc <_svfiprintf_r+0x130>
 800ab30:	9105      	str	r1, [sp, #20]
 800ab32:	e7c3      	b.n	800aabc <_svfiprintf_r+0x130>
 800ab34:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab38:	4604      	mov	r4, r0
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	e7f0      	b.n	800ab20 <_svfiprintf_r+0x194>
 800ab3e:	ab03      	add	r3, sp, #12
 800ab40:	9300      	str	r3, [sp, #0]
 800ab42:	462a      	mov	r2, r5
 800ab44:	4b0f      	ldr	r3, [pc, #60]	; (800ab84 <_svfiprintf_r+0x1f8>)
 800ab46:	a904      	add	r1, sp, #16
 800ab48:	4638      	mov	r0, r7
 800ab4a:	f7fb feeb 	bl	8006924 <_printf_float>
 800ab4e:	1c42      	adds	r2, r0, #1
 800ab50:	4606      	mov	r6, r0
 800ab52:	d1d6      	bne.n	800ab02 <_svfiprintf_r+0x176>
 800ab54:	89ab      	ldrh	r3, [r5, #12]
 800ab56:	065b      	lsls	r3, r3, #25
 800ab58:	f53f af2c 	bmi.w	800a9b4 <_svfiprintf_r+0x28>
 800ab5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab5e:	b01d      	add	sp, #116	; 0x74
 800ab60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab64:	ab03      	add	r3, sp, #12
 800ab66:	9300      	str	r3, [sp, #0]
 800ab68:	462a      	mov	r2, r5
 800ab6a:	4b06      	ldr	r3, [pc, #24]	; (800ab84 <_svfiprintf_r+0x1f8>)
 800ab6c:	a904      	add	r1, sp, #16
 800ab6e:	4638      	mov	r0, r7
 800ab70:	f7fc f97c 	bl	8006e6c <_printf_i>
 800ab74:	e7eb      	b.n	800ab4e <_svfiprintf_r+0x1c2>
 800ab76:	bf00      	nop
 800ab78:	0800b92c 	.word	0x0800b92c
 800ab7c:	0800b936 	.word	0x0800b936
 800ab80:	08006925 	.word	0x08006925
 800ab84:	0800a8d5 	.word	0x0800a8d5
 800ab88:	0800b932 	.word	0x0800b932

0800ab8c <__sfputc_r>:
 800ab8c:	6893      	ldr	r3, [r2, #8]
 800ab8e:	3b01      	subs	r3, #1
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	b410      	push	{r4}
 800ab94:	6093      	str	r3, [r2, #8]
 800ab96:	da08      	bge.n	800abaa <__sfputc_r+0x1e>
 800ab98:	6994      	ldr	r4, [r2, #24]
 800ab9a:	42a3      	cmp	r3, r4
 800ab9c:	db01      	blt.n	800aba2 <__sfputc_r+0x16>
 800ab9e:	290a      	cmp	r1, #10
 800aba0:	d103      	bne.n	800abaa <__sfputc_r+0x1e>
 800aba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aba6:	f7fd bbf7 	b.w	8008398 <__swbuf_r>
 800abaa:	6813      	ldr	r3, [r2, #0]
 800abac:	1c58      	adds	r0, r3, #1
 800abae:	6010      	str	r0, [r2, #0]
 800abb0:	7019      	strb	r1, [r3, #0]
 800abb2:	4608      	mov	r0, r1
 800abb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abb8:	4770      	bx	lr

0800abba <__sfputs_r>:
 800abba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abbc:	4606      	mov	r6, r0
 800abbe:	460f      	mov	r7, r1
 800abc0:	4614      	mov	r4, r2
 800abc2:	18d5      	adds	r5, r2, r3
 800abc4:	42ac      	cmp	r4, r5
 800abc6:	d101      	bne.n	800abcc <__sfputs_r+0x12>
 800abc8:	2000      	movs	r0, #0
 800abca:	e007      	b.n	800abdc <__sfputs_r+0x22>
 800abcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abd0:	463a      	mov	r2, r7
 800abd2:	4630      	mov	r0, r6
 800abd4:	f7ff ffda 	bl	800ab8c <__sfputc_r>
 800abd8:	1c43      	adds	r3, r0, #1
 800abda:	d1f3      	bne.n	800abc4 <__sfputs_r+0xa>
 800abdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800abe0 <_vfiprintf_r>:
 800abe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe4:	460d      	mov	r5, r1
 800abe6:	b09d      	sub	sp, #116	; 0x74
 800abe8:	4614      	mov	r4, r2
 800abea:	4698      	mov	r8, r3
 800abec:	4606      	mov	r6, r0
 800abee:	b118      	cbz	r0, 800abf8 <_vfiprintf_r+0x18>
 800abf0:	6983      	ldr	r3, [r0, #24]
 800abf2:	b90b      	cbnz	r3, 800abf8 <_vfiprintf_r+0x18>
 800abf4:	f7fe fc24 	bl	8009440 <__sinit>
 800abf8:	4b89      	ldr	r3, [pc, #548]	; (800ae20 <_vfiprintf_r+0x240>)
 800abfa:	429d      	cmp	r5, r3
 800abfc:	d11b      	bne.n	800ac36 <_vfiprintf_r+0x56>
 800abfe:	6875      	ldr	r5, [r6, #4]
 800ac00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac02:	07d9      	lsls	r1, r3, #31
 800ac04:	d405      	bmi.n	800ac12 <_vfiprintf_r+0x32>
 800ac06:	89ab      	ldrh	r3, [r5, #12]
 800ac08:	059a      	lsls	r2, r3, #22
 800ac0a:	d402      	bmi.n	800ac12 <_vfiprintf_r+0x32>
 800ac0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac0e:	f7ff f828 	bl	8009c62 <__retarget_lock_acquire_recursive>
 800ac12:	89ab      	ldrh	r3, [r5, #12]
 800ac14:	071b      	lsls	r3, r3, #28
 800ac16:	d501      	bpl.n	800ac1c <_vfiprintf_r+0x3c>
 800ac18:	692b      	ldr	r3, [r5, #16]
 800ac1a:	b9eb      	cbnz	r3, 800ac58 <_vfiprintf_r+0x78>
 800ac1c:	4629      	mov	r1, r5
 800ac1e:	4630      	mov	r0, r6
 800ac20:	f7fd fc0c 	bl	800843c <__swsetup_r>
 800ac24:	b1c0      	cbz	r0, 800ac58 <_vfiprintf_r+0x78>
 800ac26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac28:	07dc      	lsls	r4, r3, #31
 800ac2a:	d50e      	bpl.n	800ac4a <_vfiprintf_r+0x6a>
 800ac2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac30:	b01d      	add	sp, #116	; 0x74
 800ac32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac36:	4b7b      	ldr	r3, [pc, #492]	; (800ae24 <_vfiprintf_r+0x244>)
 800ac38:	429d      	cmp	r5, r3
 800ac3a:	d101      	bne.n	800ac40 <_vfiprintf_r+0x60>
 800ac3c:	68b5      	ldr	r5, [r6, #8]
 800ac3e:	e7df      	b.n	800ac00 <_vfiprintf_r+0x20>
 800ac40:	4b79      	ldr	r3, [pc, #484]	; (800ae28 <_vfiprintf_r+0x248>)
 800ac42:	429d      	cmp	r5, r3
 800ac44:	bf08      	it	eq
 800ac46:	68f5      	ldreq	r5, [r6, #12]
 800ac48:	e7da      	b.n	800ac00 <_vfiprintf_r+0x20>
 800ac4a:	89ab      	ldrh	r3, [r5, #12]
 800ac4c:	0598      	lsls	r0, r3, #22
 800ac4e:	d4ed      	bmi.n	800ac2c <_vfiprintf_r+0x4c>
 800ac50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac52:	f7ff f807 	bl	8009c64 <__retarget_lock_release_recursive>
 800ac56:	e7e9      	b.n	800ac2c <_vfiprintf_r+0x4c>
 800ac58:	2300      	movs	r3, #0
 800ac5a:	9309      	str	r3, [sp, #36]	; 0x24
 800ac5c:	2320      	movs	r3, #32
 800ac5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac62:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac66:	2330      	movs	r3, #48	; 0x30
 800ac68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ae2c <_vfiprintf_r+0x24c>
 800ac6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac70:	f04f 0901 	mov.w	r9, #1
 800ac74:	4623      	mov	r3, r4
 800ac76:	469a      	mov	sl, r3
 800ac78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac7c:	b10a      	cbz	r2, 800ac82 <_vfiprintf_r+0xa2>
 800ac7e:	2a25      	cmp	r2, #37	; 0x25
 800ac80:	d1f9      	bne.n	800ac76 <_vfiprintf_r+0x96>
 800ac82:	ebba 0b04 	subs.w	fp, sl, r4
 800ac86:	d00b      	beq.n	800aca0 <_vfiprintf_r+0xc0>
 800ac88:	465b      	mov	r3, fp
 800ac8a:	4622      	mov	r2, r4
 800ac8c:	4629      	mov	r1, r5
 800ac8e:	4630      	mov	r0, r6
 800ac90:	f7ff ff93 	bl	800abba <__sfputs_r>
 800ac94:	3001      	adds	r0, #1
 800ac96:	f000 80aa 	beq.w	800adee <_vfiprintf_r+0x20e>
 800ac9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac9c:	445a      	add	r2, fp
 800ac9e:	9209      	str	r2, [sp, #36]	; 0x24
 800aca0:	f89a 3000 	ldrb.w	r3, [sl]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	f000 80a2 	beq.w	800adee <_vfiprintf_r+0x20e>
 800acaa:	2300      	movs	r3, #0
 800acac:	f04f 32ff 	mov.w	r2, #4294967295
 800acb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acb4:	f10a 0a01 	add.w	sl, sl, #1
 800acb8:	9304      	str	r3, [sp, #16]
 800acba:	9307      	str	r3, [sp, #28]
 800acbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800acc0:	931a      	str	r3, [sp, #104]	; 0x68
 800acc2:	4654      	mov	r4, sl
 800acc4:	2205      	movs	r2, #5
 800acc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acca:	4858      	ldr	r0, [pc, #352]	; (800ae2c <_vfiprintf_r+0x24c>)
 800accc:	f7f5 fa90 	bl	80001f0 <memchr>
 800acd0:	9a04      	ldr	r2, [sp, #16]
 800acd2:	b9d8      	cbnz	r0, 800ad0c <_vfiprintf_r+0x12c>
 800acd4:	06d1      	lsls	r1, r2, #27
 800acd6:	bf44      	itt	mi
 800acd8:	2320      	movmi	r3, #32
 800acda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acde:	0713      	lsls	r3, r2, #28
 800ace0:	bf44      	itt	mi
 800ace2:	232b      	movmi	r3, #43	; 0x2b
 800ace4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ace8:	f89a 3000 	ldrb.w	r3, [sl]
 800acec:	2b2a      	cmp	r3, #42	; 0x2a
 800acee:	d015      	beq.n	800ad1c <_vfiprintf_r+0x13c>
 800acf0:	9a07      	ldr	r2, [sp, #28]
 800acf2:	4654      	mov	r4, sl
 800acf4:	2000      	movs	r0, #0
 800acf6:	f04f 0c0a 	mov.w	ip, #10
 800acfa:	4621      	mov	r1, r4
 800acfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad00:	3b30      	subs	r3, #48	; 0x30
 800ad02:	2b09      	cmp	r3, #9
 800ad04:	d94e      	bls.n	800ada4 <_vfiprintf_r+0x1c4>
 800ad06:	b1b0      	cbz	r0, 800ad36 <_vfiprintf_r+0x156>
 800ad08:	9207      	str	r2, [sp, #28]
 800ad0a:	e014      	b.n	800ad36 <_vfiprintf_r+0x156>
 800ad0c:	eba0 0308 	sub.w	r3, r0, r8
 800ad10:	fa09 f303 	lsl.w	r3, r9, r3
 800ad14:	4313      	orrs	r3, r2
 800ad16:	9304      	str	r3, [sp, #16]
 800ad18:	46a2      	mov	sl, r4
 800ad1a:	e7d2      	b.n	800acc2 <_vfiprintf_r+0xe2>
 800ad1c:	9b03      	ldr	r3, [sp, #12]
 800ad1e:	1d19      	adds	r1, r3, #4
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	9103      	str	r1, [sp, #12]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	bfbb      	ittet	lt
 800ad28:	425b      	neglt	r3, r3
 800ad2a:	f042 0202 	orrlt.w	r2, r2, #2
 800ad2e:	9307      	strge	r3, [sp, #28]
 800ad30:	9307      	strlt	r3, [sp, #28]
 800ad32:	bfb8      	it	lt
 800ad34:	9204      	strlt	r2, [sp, #16]
 800ad36:	7823      	ldrb	r3, [r4, #0]
 800ad38:	2b2e      	cmp	r3, #46	; 0x2e
 800ad3a:	d10c      	bne.n	800ad56 <_vfiprintf_r+0x176>
 800ad3c:	7863      	ldrb	r3, [r4, #1]
 800ad3e:	2b2a      	cmp	r3, #42	; 0x2a
 800ad40:	d135      	bne.n	800adae <_vfiprintf_r+0x1ce>
 800ad42:	9b03      	ldr	r3, [sp, #12]
 800ad44:	1d1a      	adds	r2, r3, #4
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	9203      	str	r2, [sp, #12]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	bfb8      	it	lt
 800ad4e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad52:	3402      	adds	r4, #2
 800ad54:	9305      	str	r3, [sp, #20]
 800ad56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ae3c <_vfiprintf_r+0x25c>
 800ad5a:	7821      	ldrb	r1, [r4, #0]
 800ad5c:	2203      	movs	r2, #3
 800ad5e:	4650      	mov	r0, sl
 800ad60:	f7f5 fa46 	bl	80001f0 <memchr>
 800ad64:	b140      	cbz	r0, 800ad78 <_vfiprintf_r+0x198>
 800ad66:	2340      	movs	r3, #64	; 0x40
 800ad68:	eba0 000a 	sub.w	r0, r0, sl
 800ad6c:	fa03 f000 	lsl.w	r0, r3, r0
 800ad70:	9b04      	ldr	r3, [sp, #16]
 800ad72:	4303      	orrs	r3, r0
 800ad74:	3401      	adds	r4, #1
 800ad76:	9304      	str	r3, [sp, #16]
 800ad78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad7c:	482c      	ldr	r0, [pc, #176]	; (800ae30 <_vfiprintf_r+0x250>)
 800ad7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad82:	2206      	movs	r2, #6
 800ad84:	f7f5 fa34 	bl	80001f0 <memchr>
 800ad88:	2800      	cmp	r0, #0
 800ad8a:	d03f      	beq.n	800ae0c <_vfiprintf_r+0x22c>
 800ad8c:	4b29      	ldr	r3, [pc, #164]	; (800ae34 <_vfiprintf_r+0x254>)
 800ad8e:	bb1b      	cbnz	r3, 800add8 <_vfiprintf_r+0x1f8>
 800ad90:	9b03      	ldr	r3, [sp, #12]
 800ad92:	3307      	adds	r3, #7
 800ad94:	f023 0307 	bic.w	r3, r3, #7
 800ad98:	3308      	adds	r3, #8
 800ad9a:	9303      	str	r3, [sp, #12]
 800ad9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad9e:	443b      	add	r3, r7
 800ada0:	9309      	str	r3, [sp, #36]	; 0x24
 800ada2:	e767      	b.n	800ac74 <_vfiprintf_r+0x94>
 800ada4:	fb0c 3202 	mla	r2, ip, r2, r3
 800ada8:	460c      	mov	r4, r1
 800adaa:	2001      	movs	r0, #1
 800adac:	e7a5      	b.n	800acfa <_vfiprintf_r+0x11a>
 800adae:	2300      	movs	r3, #0
 800adb0:	3401      	adds	r4, #1
 800adb2:	9305      	str	r3, [sp, #20]
 800adb4:	4619      	mov	r1, r3
 800adb6:	f04f 0c0a 	mov.w	ip, #10
 800adba:	4620      	mov	r0, r4
 800adbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adc0:	3a30      	subs	r2, #48	; 0x30
 800adc2:	2a09      	cmp	r2, #9
 800adc4:	d903      	bls.n	800adce <_vfiprintf_r+0x1ee>
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d0c5      	beq.n	800ad56 <_vfiprintf_r+0x176>
 800adca:	9105      	str	r1, [sp, #20]
 800adcc:	e7c3      	b.n	800ad56 <_vfiprintf_r+0x176>
 800adce:	fb0c 2101 	mla	r1, ip, r1, r2
 800add2:	4604      	mov	r4, r0
 800add4:	2301      	movs	r3, #1
 800add6:	e7f0      	b.n	800adba <_vfiprintf_r+0x1da>
 800add8:	ab03      	add	r3, sp, #12
 800adda:	9300      	str	r3, [sp, #0]
 800addc:	462a      	mov	r2, r5
 800adde:	4b16      	ldr	r3, [pc, #88]	; (800ae38 <_vfiprintf_r+0x258>)
 800ade0:	a904      	add	r1, sp, #16
 800ade2:	4630      	mov	r0, r6
 800ade4:	f7fb fd9e 	bl	8006924 <_printf_float>
 800ade8:	4607      	mov	r7, r0
 800adea:	1c78      	adds	r0, r7, #1
 800adec:	d1d6      	bne.n	800ad9c <_vfiprintf_r+0x1bc>
 800adee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adf0:	07d9      	lsls	r1, r3, #31
 800adf2:	d405      	bmi.n	800ae00 <_vfiprintf_r+0x220>
 800adf4:	89ab      	ldrh	r3, [r5, #12]
 800adf6:	059a      	lsls	r2, r3, #22
 800adf8:	d402      	bmi.n	800ae00 <_vfiprintf_r+0x220>
 800adfa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800adfc:	f7fe ff32 	bl	8009c64 <__retarget_lock_release_recursive>
 800ae00:	89ab      	ldrh	r3, [r5, #12]
 800ae02:	065b      	lsls	r3, r3, #25
 800ae04:	f53f af12 	bmi.w	800ac2c <_vfiprintf_r+0x4c>
 800ae08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae0a:	e711      	b.n	800ac30 <_vfiprintf_r+0x50>
 800ae0c:	ab03      	add	r3, sp, #12
 800ae0e:	9300      	str	r3, [sp, #0]
 800ae10:	462a      	mov	r2, r5
 800ae12:	4b09      	ldr	r3, [pc, #36]	; (800ae38 <_vfiprintf_r+0x258>)
 800ae14:	a904      	add	r1, sp, #16
 800ae16:	4630      	mov	r0, r6
 800ae18:	f7fc f828 	bl	8006e6c <_printf_i>
 800ae1c:	e7e4      	b.n	800ade8 <_vfiprintf_r+0x208>
 800ae1e:	bf00      	nop
 800ae20:	0800b714 	.word	0x0800b714
 800ae24:	0800b734 	.word	0x0800b734
 800ae28:	0800b6f4 	.word	0x0800b6f4
 800ae2c:	0800b92c 	.word	0x0800b92c
 800ae30:	0800b936 	.word	0x0800b936
 800ae34:	08006925 	.word	0x08006925
 800ae38:	0800abbb 	.word	0x0800abbb
 800ae3c:	0800b932 	.word	0x0800b932

0800ae40 <nan>:
 800ae40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ae48 <nan+0x8>
 800ae44:	4770      	bx	lr
 800ae46:	bf00      	nop
 800ae48:	00000000 	.word	0x00000000
 800ae4c:	7ff80000 	.word	0x7ff80000

0800ae50 <_sbrk_r>:
 800ae50:	b538      	push	{r3, r4, r5, lr}
 800ae52:	4d06      	ldr	r5, [pc, #24]	; (800ae6c <_sbrk_r+0x1c>)
 800ae54:	2300      	movs	r3, #0
 800ae56:	4604      	mov	r4, r0
 800ae58:	4608      	mov	r0, r1
 800ae5a:	602b      	str	r3, [r5, #0]
 800ae5c:	f7f7 fe48 	bl	8002af0 <_sbrk>
 800ae60:	1c43      	adds	r3, r0, #1
 800ae62:	d102      	bne.n	800ae6a <_sbrk_r+0x1a>
 800ae64:	682b      	ldr	r3, [r5, #0]
 800ae66:	b103      	cbz	r3, 800ae6a <_sbrk_r+0x1a>
 800ae68:	6023      	str	r3, [r4, #0]
 800ae6a:	bd38      	pop	{r3, r4, r5, pc}
 800ae6c:	200004a4 	.word	0x200004a4

0800ae70 <__sread>:
 800ae70:	b510      	push	{r4, lr}
 800ae72:	460c      	mov	r4, r1
 800ae74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae78:	f000 f93a 	bl	800b0f0 <_read_r>
 800ae7c:	2800      	cmp	r0, #0
 800ae7e:	bfab      	itete	ge
 800ae80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae82:	89a3      	ldrhlt	r3, [r4, #12]
 800ae84:	181b      	addge	r3, r3, r0
 800ae86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae8a:	bfac      	ite	ge
 800ae8c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae8e:	81a3      	strhlt	r3, [r4, #12]
 800ae90:	bd10      	pop	{r4, pc}

0800ae92 <__swrite>:
 800ae92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae96:	461f      	mov	r7, r3
 800ae98:	898b      	ldrh	r3, [r1, #12]
 800ae9a:	05db      	lsls	r3, r3, #23
 800ae9c:	4605      	mov	r5, r0
 800ae9e:	460c      	mov	r4, r1
 800aea0:	4616      	mov	r6, r2
 800aea2:	d505      	bpl.n	800aeb0 <__swrite+0x1e>
 800aea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aea8:	2302      	movs	r3, #2
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f000 f8b8 	bl	800b020 <_lseek_r>
 800aeb0:	89a3      	ldrh	r3, [r4, #12]
 800aeb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aeb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aeba:	81a3      	strh	r3, [r4, #12]
 800aebc:	4632      	mov	r2, r6
 800aebe:	463b      	mov	r3, r7
 800aec0:	4628      	mov	r0, r5
 800aec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aec6:	f000 b837 	b.w	800af38 <_write_r>

0800aeca <__sseek>:
 800aeca:	b510      	push	{r4, lr}
 800aecc:	460c      	mov	r4, r1
 800aece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aed2:	f000 f8a5 	bl	800b020 <_lseek_r>
 800aed6:	1c43      	adds	r3, r0, #1
 800aed8:	89a3      	ldrh	r3, [r4, #12]
 800aeda:	bf15      	itete	ne
 800aedc:	6560      	strne	r0, [r4, #84]	; 0x54
 800aede:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aee2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aee6:	81a3      	strheq	r3, [r4, #12]
 800aee8:	bf18      	it	ne
 800aeea:	81a3      	strhne	r3, [r4, #12]
 800aeec:	bd10      	pop	{r4, pc}

0800aeee <__sclose>:
 800aeee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aef2:	f000 b851 	b.w	800af98 <_close_r>

0800aef6 <strncmp>:
 800aef6:	b510      	push	{r4, lr}
 800aef8:	b17a      	cbz	r2, 800af1a <strncmp+0x24>
 800aefa:	4603      	mov	r3, r0
 800aefc:	3901      	subs	r1, #1
 800aefe:	1884      	adds	r4, r0, r2
 800af00:	f813 0b01 	ldrb.w	r0, [r3], #1
 800af04:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800af08:	4290      	cmp	r0, r2
 800af0a:	d101      	bne.n	800af10 <strncmp+0x1a>
 800af0c:	42a3      	cmp	r3, r4
 800af0e:	d101      	bne.n	800af14 <strncmp+0x1e>
 800af10:	1a80      	subs	r0, r0, r2
 800af12:	bd10      	pop	{r4, pc}
 800af14:	2800      	cmp	r0, #0
 800af16:	d1f3      	bne.n	800af00 <strncmp+0xa>
 800af18:	e7fa      	b.n	800af10 <strncmp+0x1a>
 800af1a:	4610      	mov	r0, r2
 800af1c:	e7f9      	b.n	800af12 <strncmp+0x1c>

0800af1e <__ascii_wctomb>:
 800af1e:	b149      	cbz	r1, 800af34 <__ascii_wctomb+0x16>
 800af20:	2aff      	cmp	r2, #255	; 0xff
 800af22:	bf85      	ittet	hi
 800af24:	238a      	movhi	r3, #138	; 0x8a
 800af26:	6003      	strhi	r3, [r0, #0]
 800af28:	700a      	strbls	r2, [r1, #0]
 800af2a:	f04f 30ff 	movhi.w	r0, #4294967295
 800af2e:	bf98      	it	ls
 800af30:	2001      	movls	r0, #1
 800af32:	4770      	bx	lr
 800af34:	4608      	mov	r0, r1
 800af36:	4770      	bx	lr

0800af38 <_write_r>:
 800af38:	b538      	push	{r3, r4, r5, lr}
 800af3a:	4d07      	ldr	r5, [pc, #28]	; (800af58 <_write_r+0x20>)
 800af3c:	4604      	mov	r4, r0
 800af3e:	4608      	mov	r0, r1
 800af40:	4611      	mov	r1, r2
 800af42:	2200      	movs	r2, #0
 800af44:	602a      	str	r2, [r5, #0]
 800af46:	461a      	mov	r2, r3
 800af48:	f7f7 fd81 	bl	8002a4e <_write>
 800af4c:	1c43      	adds	r3, r0, #1
 800af4e:	d102      	bne.n	800af56 <_write_r+0x1e>
 800af50:	682b      	ldr	r3, [r5, #0]
 800af52:	b103      	cbz	r3, 800af56 <_write_r+0x1e>
 800af54:	6023      	str	r3, [r4, #0]
 800af56:	bd38      	pop	{r3, r4, r5, pc}
 800af58:	200004a4 	.word	0x200004a4

0800af5c <__assert_func>:
 800af5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af5e:	4614      	mov	r4, r2
 800af60:	461a      	mov	r2, r3
 800af62:	4b09      	ldr	r3, [pc, #36]	; (800af88 <__assert_func+0x2c>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4605      	mov	r5, r0
 800af68:	68d8      	ldr	r0, [r3, #12]
 800af6a:	b14c      	cbz	r4, 800af80 <__assert_func+0x24>
 800af6c:	4b07      	ldr	r3, [pc, #28]	; (800af8c <__assert_func+0x30>)
 800af6e:	9100      	str	r1, [sp, #0]
 800af70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af74:	4906      	ldr	r1, [pc, #24]	; (800af90 <__assert_func+0x34>)
 800af76:	462b      	mov	r3, r5
 800af78:	f000 f81e 	bl	800afb8 <fiprintf>
 800af7c:	f000 f8ca 	bl	800b114 <abort>
 800af80:	4b04      	ldr	r3, [pc, #16]	; (800af94 <__assert_func+0x38>)
 800af82:	461c      	mov	r4, r3
 800af84:	e7f3      	b.n	800af6e <__assert_func+0x12>
 800af86:	bf00      	nop
 800af88:	20000040 	.word	0x20000040
 800af8c:	0800b93d 	.word	0x0800b93d
 800af90:	0800b94a 	.word	0x0800b94a
 800af94:	0800b978 	.word	0x0800b978

0800af98 <_close_r>:
 800af98:	b538      	push	{r3, r4, r5, lr}
 800af9a:	4d06      	ldr	r5, [pc, #24]	; (800afb4 <_close_r+0x1c>)
 800af9c:	2300      	movs	r3, #0
 800af9e:	4604      	mov	r4, r0
 800afa0:	4608      	mov	r0, r1
 800afa2:	602b      	str	r3, [r5, #0]
 800afa4:	f7f7 fd6f 	bl	8002a86 <_close>
 800afa8:	1c43      	adds	r3, r0, #1
 800afaa:	d102      	bne.n	800afb2 <_close_r+0x1a>
 800afac:	682b      	ldr	r3, [r5, #0]
 800afae:	b103      	cbz	r3, 800afb2 <_close_r+0x1a>
 800afb0:	6023      	str	r3, [r4, #0]
 800afb2:	bd38      	pop	{r3, r4, r5, pc}
 800afb4:	200004a4 	.word	0x200004a4

0800afb8 <fiprintf>:
 800afb8:	b40e      	push	{r1, r2, r3}
 800afba:	b503      	push	{r0, r1, lr}
 800afbc:	4601      	mov	r1, r0
 800afbe:	ab03      	add	r3, sp, #12
 800afc0:	4805      	ldr	r0, [pc, #20]	; (800afd8 <fiprintf+0x20>)
 800afc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800afc6:	6800      	ldr	r0, [r0, #0]
 800afc8:	9301      	str	r3, [sp, #4]
 800afca:	f7ff fe09 	bl	800abe0 <_vfiprintf_r>
 800afce:	b002      	add	sp, #8
 800afd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800afd4:	b003      	add	sp, #12
 800afd6:	4770      	bx	lr
 800afd8:	20000040 	.word	0x20000040

0800afdc <_fstat_r>:
 800afdc:	b538      	push	{r3, r4, r5, lr}
 800afde:	4d07      	ldr	r5, [pc, #28]	; (800affc <_fstat_r+0x20>)
 800afe0:	2300      	movs	r3, #0
 800afe2:	4604      	mov	r4, r0
 800afe4:	4608      	mov	r0, r1
 800afe6:	4611      	mov	r1, r2
 800afe8:	602b      	str	r3, [r5, #0]
 800afea:	f7f7 fd58 	bl	8002a9e <_fstat>
 800afee:	1c43      	adds	r3, r0, #1
 800aff0:	d102      	bne.n	800aff8 <_fstat_r+0x1c>
 800aff2:	682b      	ldr	r3, [r5, #0]
 800aff4:	b103      	cbz	r3, 800aff8 <_fstat_r+0x1c>
 800aff6:	6023      	str	r3, [r4, #0]
 800aff8:	bd38      	pop	{r3, r4, r5, pc}
 800affa:	bf00      	nop
 800affc:	200004a4 	.word	0x200004a4

0800b000 <_isatty_r>:
 800b000:	b538      	push	{r3, r4, r5, lr}
 800b002:	4d06      	ldr	r5, [pc, #24]	; (800b01c <_isatty_r+0x1c>)
 800b004:	2300      	movs	r3, #0
 800b006:	4604      	mov	r4, r0
 800b008:	4608      	mov	r0, r1
 800b00a:	602b      	str	r3, [r5, #0]
 800b00c:	f7f7 fd57 	bl	8002abe <_isatty>
 800b010:	1c43      	adds	r3, r0, #1
 800b012:	d102      	bne.n	800b01a <_isatty_r+0x1a>
 800b014:	682b      	ldr	r3, [r5, #0]
 800b016:	b103      	cbz	r3, 800b01a <_isatty_r+0x1a>
 800b018:	6023      	str	r3, [r4, #0]
 800b01a:	bd38      	pop	{r3, r4, r5, pc}
 800b01c:	200004a4 	.word	0x200004a4

0800b020 <_lseek_r>:
 800b020:	b538      	push	{r3, r4, r5, lr}
 800b022:	4d07      	ldr	r5, [pc, #28]	; (800b040 <_lseek_r+0x20>)
 800b024:	4604      	mov	r4, r0
 800b026:	4608      	mov	r0, r1
 800b028:	4611      	mov	r1, r2
 800b02a:	2200      	movs	r2, #0
 800b02c:	602a      	str	r2, [r5, #0]
 800b02e:	461a      	mov	r2, r3
 800b030:	f7f7 fd50 	bl	8002ad4 <_lseek>
 800b034:	1c43      	adds	r3, r0, #1
 800b036:	d102      	bne.n	800b03e <_lseek_r+0x1e>
 800b038:	682b      	ldr	r3, [r5, #0]
 800b03a:	b103      	cbz	r3, 800b03e <_lseek_r+0x1e>
 800b03c:	6023      	str	r3, [r4, #0]
 800b03e:	bd38      	pop	{r3, r4, r5, pc}
 800b040:	200004a4 	.word	0x200004a4

0800b044 <memmove>:
 800b044:	4288      	cmp	r0, r1
 800b046:	b510      	push	{r4, lr}
 800b048:	eb01 0402 	add.w	r4, r1, r2
 800b04c:	d902      	bls.n	800b054 <memmove+0x10>
 800b04e:	4284      	cmp	r4, r0
 800b050:	4623      	mov	r3, r4
 800b052:	d807      	bhi.n	800b064 <memmove+0x20>
 800b054:	1e43      	subs	r3, r0, #1
 800b056:	42a1      	cmp	r1, r4
 800b058:	d008      	beq.n	800b06c <memmove+0x28>
 800b05a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b05e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b062:	e7f8      	b.n	800b056 <memmove+0x12>
 800b064:	4402      	add	r2, r0
 800b066:	4601      	mov	r1, r0
 800b068:	428a      	cmp	r2, r1
 800b06a:	d100      	bne.n	800b06e <memmove+0x2a>
 800b06c:	bd10      	pop	{r4, pc}
 800b06e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b072:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b076:	e7f7      	b.n	800b068 <memmove+0x24>

0800b078 <__malloc_lock>:
 800b078:	4801      	ldr	r0, [pc, #4]	; (800b080 <__malloc_lock+0x8>)
 800b07a:	f7fe bdf2 	b.w	8009c62 <__retarget_lock_acquire_recursive>
 800b07e:	bf00      	nop
 800b080:	20000498 	.word	0x20000498

0800b084 <__malloc_unlock>:
 800b084:	4801      	ldr	r0, [pc, #4]	; (800b08c <__malloc_unlock+0x8>)
 800b086:	f7fe bded 	b.w	8009c64 <__retarget_lock_release_recursive>
 800b08a:	bf00      	nop
 800b08c:	20000498 	.word	0x20000498

0800b090 <_realloc_r>:
 800b090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b094:	4680      	mov	r8, r0
 800b096:	4614      	mov	r4, r2
 800b098:	460e      	mov	r6, r1
 800b09a:	b921      	cbnz	r1, 800b0a6 <_realloc_r+0x16>
 800b09c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0a0:	4611      	mov	r1, r2
 800b0a2:	f7ff bba3 	b.w	800a7ec <_malloc_r>
 800b0a6:	b92a      	cbnz	r2, 800b0b4 <_realloc_r+0x24>
 800b0a8:	f7ff fb34 	bl	800a714 <_free_r>
 800b0ac:	4625      	mov	r5, r4
 800b0ae:	4628      	mov	r0, r5
 800b0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0b4:	f000 f835 	bl	800b122 <_malloc_usable_size_r>
 800b0b8:	4284      	cmp	r4, r0
 800b0ba:	4607      	mov	r7, r0
 800b0bc:	d802      	bhi.n	800b0c4 <_realloc_r+0x34>
 800b0be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b0c2:	d812      	bhi.n	800b0ea <_realloc_r+0x5a>
 800b0c4:	4621      	mov	r1, r4
 800b0c6:	4640      	mov	r0, r8
 800b0c8:	f7ff fb90 	bl	800a7ec <_malloc_r>
 800b0cc:	4605      	mov	r5, r0
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	d0ed      	beq.n	800b0ae <_realloc_r+0x1e>
 800b0d2:	42bc      	cmp	r4, r7
 800b0d4:	4622      	mov	r2, r4
 800b0d6:	4631      	mov	r1, r6
 800b0d8:	bf28      	it	cs
 800b0da:	463a      	movcs	r2, r7
 800b0dc:	f7fb fb6c 	bl	80067b8 <memcpy>
 800b0e0:	4631      	mov	r1, r6
 800b0e2:	4640      	mov	r0, r8
 800b0e4:	f7ff fb16 	bl	800a714 <_free_r>
 800b0e8:	e7e1      	b.n	800b0ae <_realloc_r+0x1e>
 800b0ea:	4635      	mov	r5, r6
 800b0ec:	e7df      	b.n	800b0ae <_realloc_r+0x1e>
	...

0800b0f0 <_read_r>:
 800b0f0:	b538      	push	{r3, r4, r5, lr}
 800b0f2:	4d07      	ldr	r5, [pc, #28]	; (800b110 <_read_r+0x20>)
 800b0f4:	4604      	mov	r4, r0
 800b0f6:	4608      	mov	r0, r1
 800b0f8:	4611      	mov	r1, r2
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	602a      	str	r2, [r5, #0]
 800b0fe:	461a      	mov	r2, r3
 800b100:	f7f7 fc86 	bl	8002a10 <_read>
 800b104:	1c43      	adds	r3, r0, #1
 800b106:	d102      	bne.n	800b10e <_read_r+0x1e>
 800b108:	682b      	ldr	r3, [r5, #0]
 800b10a:	b103      	cbz	r3, 800b10e <_read_r+0x1e>
 800b10c:	6023      	str	r3, [r4, #0]
 800b10e:	bd38      	pop	{r3, r4, r5, pc}
 800b110:	200004a4 	.word	0x200004a4

0800b114 <abort>:
 800b114:	b508      	push	{r3, lr}
 800b116:	2006      	movs	r0, #6
 800b118:	f000 f834 	bl	800b184 <raise>
 800b11c:	2001      	movs	r0, #1
 800b11e:	f7f7 fc6d 	bl	80029fc <_exit>

0800b122 <_malloc_usable_size_r>:
 800b122:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b126:	1f18      	subs	r0, r3, #4
 800b128:	2b00      	cmp	r3, #0
 800b12a:	bfbc      	itt	lt
 800b12c:	580b      	ldrlt	r3, [r1, r0]
 800b12e:	18c0      	addlt	r0, r0, r3
 800b130:	4770      	bx	lr

0800b132 <_raise_r>:
 800b132:	291f      	cmp	r1, #31
 800b134:	b538      	push	{r3, r4, r5, lr}
 800b136:	4604      	mov	r4, r0
 800b138:	460d      	mov	r5, r1
 800b13a:	d904      	bls.n	800b146 <_raise_r+0x14>
 800b13c:	2316      	movs	r3, #22
 800b13e:	6003      	str	r3, [r0, #0]
 800b140:	f04f 30ff 	mov.w	r0, #4294967295
 800b144:	bd38      	pop	{r3, r4, r5, pc}
 800b146:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b148:	b112      	cbz	r2, 800b150 <_raise_r+0x1e>
 800b14a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b14e:	b94b      	cbnz	r3, 800b164 <_raise_r+0x32>
 800b150:	4620      	mov	r0, r4
 800b152:	f000 f831 	bl	800b1b8 <_getpid_r>
 800b156:	462a      	mov	r2, r5
 800b158:	4601      	mov	r1, r0
 800b15a:	4620      	mov	r0, r4
 800b15c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b160:	f000 b818 	b.w	800b194 <_kill_r>
 800b164:	2b01      	cmp	r3, #1
 800b166:	d00a      	beq.n	800b17e <_raise_r+0x4c>
 800b168:	1c59      	adds	r1, r3, #1
 800b16a:	d103      	bne.n	800b174 <_raise_r+0x42>
 800b16c:	2316      	movs	r3, #22
 800b16e:	6003      	str	r3, [r0, #0]
 800b170:	2001      	movs	r0, #1
 800b172:	e7e7      	b.n	800b144 <_raise_r+0x12>
 800b174:	2400      	movs	r4, #0
 800b176:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b17a:	4628      	mov	r0, r5
 800b17c:	4798      	blx	r3
 800b17e:	2000      	movs	r0, #0
 800b180:	e7e0      	b.n	800b144 <_raise_r+0x12>
	...

0800b184 <raise>:
 800b184:	4b02      	ldr	r3, [pc, #8]	; (800b190 <raise+0xc>)
 800b186:	4601      	mov	r1, r0
 800b188:	6818      	ldr	r0, [r3, #0]
 800b18a:	f7ff bfd2 	b.w	800b132 <_raise_r>
 800b18e:	bf00      	nop
 800b190:	20000040 	.word	0x20000040

0800b194 <_kill_r>:
 800b194:	b538      	push	{r3, r4, r5, lr}
 800b196:	4d07      	ldr	r5, [pc, #28]	; (800b1b4 <_kill_r+0x20>)
 800b198:	2300      	movs	r3, #0
 800b19a:	4604      	mov	r4, r0
 800b19c:	4608      	mov	r0, r1
 800b19e:	4611      	mov	r1, r2
 800b1a0:	602b      	str	r3, [r5, #0]
 800b1a2:	f7f7 fc1b 	bl	80029dc <_kill>
 800b1a6:	1c43      	adds	r3, r0, #1
 800b1a8:	d102      	bne.n	800b1b0 <_kill_r+0x1c>
 800b1aa:	682b      	ldr	r3, [r5, #0]
 800b1ac:	b103      	cbz	r3, 800b1b0 <_kill_r+0x1c>
 800b1ae:	6023      	str	r3, [r4, #0]
 800b1b0:	bd38      	pop	{r3, r4, r5, pc}
 800b1b2:	bf00      	nop
 800b1b4:	200004a4 	.word	0x200004a4

0800b1b8 <_getpid_r>:
 800b1b8:	f7f7 bc08 	b.w	80029cc <_getpid>

0800b1bc <_init>:
 800b1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1be:	bf00      	nop
 800b1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1c2:	bc08      	pop	{r3}
 800b1c4:	469e      	mov	lr, r3
 800b1c6:	4770      	bx	lr

0800b1c8 <_fini>:
 800b1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ca:	bf00      	nop
 800b1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ce:	bc08      	pop	{r3}
 800b1d0:	469e      	mov	lr, r3
 800b1d2:	4770      	bx	lr
